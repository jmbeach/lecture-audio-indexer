00:00.000 --> 00:02.000
So in our discussion of DNS

00:02.000 --> 00:09.100
we're next going to cover some of the challenges and issues that can arise in making the domain name system work

00:09.100 --> 00:12.300
The first challenge is just reliability

00:12.300 --> 00:17.300
We've mentioned that the DNS servers are replicated in

00:17.300 --> 00:19.300
The reason for this is

00:19.300 --> 00:21.800
is that if we query one of these

00:21.800 --> 00:23.900
the name service should be available

00:23.900 --> 00:26.200
at least one of the replicas is up

00:26.200 --> 00:29.800
The other reason for this would be for performance

00:29.800 --> 00:33.600
So that queries could get load balance between different replicas

00:35.100 --> 00:38.800
So frequently you DP is used for performing these queries

00:40.200 --> 00:42.300
However

00:42.300 --> 00:47.100
I will get into how UDP Works in more depth than some future lectures

00:47.100 --> 00:49.400
but i u d p is not reliable

00:49.400 --> 00:55.100
So we would need to provide some reliability mechanisms on top of you

00:55.100 --> 01:01.500
T P if we're going to use that the DNS specification could support TCP as well

01:01.500 --> 01:02.700
but it's not always implemented

01:05.000 --> 01:09.400
Other reliability concerns would be to try alternate server

01:09.400 --> 01:14.600
So if there's a time out as a common mechanism to do that is so it's called exponential back off

01:14.600 --> 01:22.500
If you're retrying the same server see basically weight exponentially increasing amounts of time to try to retry the same server

01:22.500 --> 01:25.800
maybe query alternate Alternatives if a timeouts occurred

01:27.000 --> 01:31.300
The other issue that could arise

01:31.300 --> 01:34.000
if we have the same identifier for all the queries

01:34.000 --> 01:36.500
We don't really care which server would respond

01:39.000 --> 01:41.800
So how can we insert research

01:41.800 --> 01:42.900
records into DNS

01:42.900 --> 01:44.300
How do we add things to

01:44.300 --> 01:44.700
Let's say

01:44.700 --> 01:46.500
we created a startup called FUBAR

01:46.500 --> 01:51.600
Just called and we want to register domain name like food or something

01:51.600 --> 01:55.700
We get a block of address space from an IP ASP

01:55.700 --> 01:57.900
So we'd be able to set up say a web server

01:57.900 --> 02:03.300
Then we need to register that domain name with a domain name

02:03.300 --> 02:04.000
registrar

02:04.000 --> 02:05.400
So Network Solutions

02:05.400 --> 02:05.900
as one example

02:05.900 --> 02:17.800
we provide the registrar with the names and IP addresses of the authoritative name server within the organization

02:17.800 --> 02:20.300
Then the registrar would insert

02:20.300 --> 02:23.000
These resource record pairs into the Comm

02:23.000 --> 02:25.600
top-level domain name server

02:25.600 --> 02:26.200
right

02:26.200 --> 02:26.300
So

02:26.300 --> 02:28.500
this is why the process of registering a domain name

02:28.500 --> 02:29.500
Takes a little bit of time

02:29.500 --> 02:31.600
these updates need to occur

02:31.600 --> 02:32.700
So

02:32.700 --> 02:32.900
for example

02:32.900 --> 02:34.400
that what this would look like

02:34.400 --> 02:38.700
say fubar.com would be an alias for

02:39.000 --> 02:39.700
Did a Swan

02:39.700 --> 02:43.200
Dive fubar.com and then the DNS one

02:43.200 --> 02:45.500
Fubar.com would correspond to a particular

02:45.500 --> 02:48.600
a name record or this IP address

02:48.600 --> 02:49.400
Okay

02:49.400 --> 02:49.500
so

02:49.500 --> 02:50.900
that's what we'll get an insert it in

02:50.900 --> 02:51.700
So

02:51.700 --> 02:52.800
that now in the cam

02:52.800 --> 02:53.900
top level domain name

02:53.900 --> 02:58.500
server gets a query for fubar.com at knows how to respond to it

02:58.500 --> 03:00.400
So it give it back that IP address

03:00.400 --> 03:02.300
Then in your authoritative

03:02.300 --> 03:11.300
serve for you to put in the a couple records for where the web server would be

03:11.300 --> 03:14.000
maybe a male record for what the mail server is

03:14.000 --> 03:16.200
If you're going to support mail on your own domain name

03:16.200 --> 03:22.300
showing this it go into that host file on your authoritative server

03:22.300 --> 03:25.800
So unless fubar.com DNS one server

03:26.500 --> 03:30.600
So they're a couple more pieces to actually get that set up to her

03:30.600 --> 03:40.300
You need to provide the reverse pointer binding so that we could map from the IP address to the domain name to go the opposite direction

03:40.300 --> 03:44.300
So then normally do that reversing process

03:44.300 --> 03:49.100
So a problem in doing this

03:49.100 --> 03:53.300
as you don't run that domain name that domain name server

03:53.300 --> 03:58.200
So this just has to do with you using a different block

03:58.200 --> 03:59.400
So

03:59.400 --> 04:06.300
in practice how that's done for their reverse lookups is the ISP would run this for you

04:06.300 --> 04:10.300
but it's now more of a headache to keep this information up to date

04:10.300 --> 04:13.300
And this is why the reverse lookups don't always work properly

04:14.900 --> 04:18.500
So some other challenges that would arise or just security

04:18.500 --> 04:19.600
So

04:19.600 --> 04:25.600
what security issues could come up in domain names while we have a lot of degrees of freedom here

04:25.600 --> 04:26.900
So

04:26.900 --> 04:28.900
let's go through a couple possible examples

04:28.900 --> 04:30.000
So

04:30.000 --> 04:33.100
One initial problem is

04:33.100 --> 04:36.100
since you're sitting saying Starbucks and browsing the web

04:36.100 --> 04:38.300
How does your laptop find google.com

04:39.600 --> 04:40.100
Well

04:40.100 --> 04:43.400
it's going to ask the local domain name server

04:43.400 --> 04:47.400
That would be assigned probably with DHCP

04:47.400 --> 04:50.600
But that server is going to be run by Starbucks

04:50.600 --> 04:55.000
Probably your contractor in reality and they could return anything they want

04:55.000 --> 04:58.900
So this is a wide opening for a man-in-the-middle attack

04:58.900 --> 05:03.100
That would forward your query to Google

05:03.100 --> 05:03.900
get the reply

05:03.900 --> 05:07.100
but then they could change anything they want any other direction

05:07.100 --> 05:09.000
So if it wasn't google.com

05:09.000 --> 05:10.000
it was your bank

05:10.000 --> 05:10.500
Instead

05:10.500 --> 05:12.400
This could be a big problem

05:12.400 --> 05:16.400
So how do you know you're going to get the correct date on

05:16.400 --> 05:17.800
When you do one of these queries

05:17.800 --> 05:22.000
you can't really if you're using HTTP

05:22.000 --> 05:28.400
that would help but the contractor or whoever's running that local domain name

05:28.400 --> 05:30.900
Server could still lie and send you somewhere else

05:30.900 --> 05:39.300
but there are some some security extensions this DNS SEC protocol that hopefully would fix some of this but this

05:39.500 --> 05:42.000
Still isn't completely widely deployed

05:43.700 --> 05:48.400
A similar type of security problem is called Cash poisoning within this

05:48.400 --> 05:53.200
If there's a bad guy that controls a name server for safe fubar.com

05:53.200 --> 05:57.400
If you receive a request to results www.fubar.com

05:57.400 --> 06:12.800
you could reply back with some additional information and lie to the user and instead direct anything that's intended for google.com to say a particular server that they control

06:12.800 --> 06:15.000
So one of the issues here

06:15.000 --> 06:21.200
So this would be that the computer run by the bad guy and not the actual google.com server

06:21.200 --> 06:24.600
An issue that kind of rice with this

06:24.600 --> 06:30.100
and why this can be difficult to detect is that the evidence of the attack can disappear very quickly

06:30.100 --> 06:30.900
based on

06:30.900 --> 06:33.000
that time to live field length

06:33.000 --> 06:33.600
So say

06:33.600 --> 06:34.600
a few seconds later

06:34.600 --> 06:35.200
So

06:35.200 --> 06:35.500
again

06:35.500 --> 06:37.200
if it's banking information

06:37.200 --> 06:38.600
let's say again

06:38.600 --> 06:39.000
Google.com

06:39.000 --> 06:40.000
but your bank

06:40.000 --> 06:43.600
you could rout someone's traffic and

06:43.700 --> 06:46.600
For their Bank to a server that they control

06:47.900 --> 06:48.400
So

06:48.400 --> 06:52.500
how would you get them to look up a particular website in the first place

06:52.500 --> 06:52.900
So

06:52.900 --> 06:54.900
any domain name server could do that

06:54.900 --> 06:55.200
right

06:55.200 --> 06:56.100
To any of them

06:56.100 --> 06:59.900
could lie with those sections with the Serta

06:59.900 --> 07:02.900
Perfect records to send traffic to an intended

07:02.900 --> 07:03.700
destinations

07:03.700 --> 07:05.200
Well

07:05.200 --> 07:06.400
there's some things you could do

07:06.400 --> 07:09.500
you could send a request to their mail server

07:09.500 --> 07:13.000
but then their mail server would look up this address

07:13.000 --> 07:14.100
So that's one way

07:14.100 --> 07:19.900
You could trick their name server into requesting this invalid domain name

07:19.900 --> 07:21.600
Look up that we've been poison the cash

07:21.600 --> 07:28.300
you could send them an email with a link in there to a particular URL if they clicked on it

07:28.300 --> 07:28.800
Now

07:28.800 --> 07:30.900
you could have perhaps poison the cash as well

07:31.800 --> 07:37.900
With a single compromised nameserver

07:37.900 --> 07:41.400
we could also lie about Pointer records of these reverse mapping

07:41.400 --> 07:47.700
So if we are in control of managing these and you'll occasionally

07:47.700 --> 07:55.800
see this happen where those are widespread DNS cache poisoning attack and all the traffic intended for something

07:55.800 --> 07:56.900
It's Robin somewhere else

07:56.900 --> 07:58.600
It's not too

07:58.600 --> 07:59.900
but it does happen on occasion

08:01.500 --> 08:05.100
So let's look a little bit more cash poisoning

08:05.100 --> 08:09.300
So suppose the bad guys at Starbucks and they can sniff for maybe gas

08:09.300 --> 08:14.000
the identification field of the local server used in its next request

08:14.000 --> 08:21.400
Remember the ID field within DNS correspondent to what request and reply are going to be linked together

08:21.400 --> 08:25.400
So if they ask the local server for recursive

08:25.400 --> 08:26.200
look up of google.com

08:26.200 --> 08:35.800
they could then locally spoof the subsequent reply from the correct domain name server using that ID field

08:35.800 --> 08:37.000
if they can figure out what it is

08:37.000 --> 08:43.600
then if the bogus reply gets there sooner and it probably would because it's on the local network

08:43.600 --> 08:47.100
The local server would cash the bogus reply

08:47.100 --> 08:54.700
So now every future Starbucks customer would be served that bogus answer out of the local servers cash

08:54.700 --> 08:56.000
And if you did

08:56.000 --> 09:01.100
this probably would put in a large time to live so that it would cause this effect for a long time

09:01.500 --> 09:05.600
So whenever anybody browse to a particular websites

09:05.600 --> 09:06.200
a google.com

09:06.200 --> 09:08.200
instead of a really going there

09:08.200 --> 09:12.200
it would be routed to some server that's controlled by that person

09:12.200 --> 09:13.200
For example

09:14.600 --> 09:17.300
So it's just summarize what we've seen about DNS

09:17.300 --> 09:20.300
Now we talked about some of the challenges just now

09:20.300 --> 09:22.000
But what is DNS

09:22.000 --> 09:23.100
Just remind you

09:23.100 --> 09:30.000
It's a distributed and hierarchical database that needs to get replicated all over the world in Direction

09:30.000 --> 09:42.100
Lets us use these human-readable names and also gives us the ability to change the underlying IP addresses that uses cashing to improve performance other that can lead to some security issues

09:42.100 --> 09:47.700
And then we saw a little bit of how the DNS protocol would work using the big utility

09:47.700 --> 09:55.800
the security issues that we've discussed the cash poisoning and what not arise due to not having any form of authentication

09:55.800 --> 09:59.700
So we don't know if the reply is coming from the correct or legitimate Source

09:59.700 --> 10:00.600
We don't know

10:00.600 --> 10:02.200
If the truth is being told

10:02.200 --> 10:06.000
there could be malicious information

10:06.000 --> 10:07.300
Inserted

10:07.300 --> 10:10.900
There could be bystanders that spoofed information

10:10.900 --> 10:13.600
If they pick up with the DNS message

10:13.600 --> 10:14.500
identifiers are

10:15.100 --> 10:20.600
And then playing with the the various cashing time to live life time to add power to these attacks

10:20.600 --> 10:23.700
Either make them gone for a long time or to make them disappear quickly

10:23.700 --> 10:25.100
So you don't know that they occurred

10:26.700 --> 10:31.200
So that pretty much summarizes how the domain name system works

10:31.200 --> 10:31.600
And again

10:31.600 --> 10:32.700
the key reason we have

10:32.700 --> 10:36.900
this is so that we don't have to remember IP addresses

10:36.900 --> 10:43.700
And instead we can use the Mane human-readable names like google.com or vanderbilt.edu

10:43.700 --> 10:53.500
instead of having to remember a long number corresponding to those organizations computer systems that we're trying to interact with