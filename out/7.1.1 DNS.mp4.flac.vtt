00:00.300 --> 00:10.200
So the next topic will discuss will be how to assign easier to remember names so that we do not have to remember IP addresses

00:10.200 --> 00:15.400
When we want to talk to a particular Oster node on a network or on the internet

00:15.400 --> 00:22.600
In particular said that principal system that enables us to do

00:22.600 --> 00:24.900
This is called DNS for the domain name system

00:24.900 --> 00:34.400
What it allows us to do is work with names in place of the numerical IP addresses that the actual underlined protocols

00:34.400 --> 00:48.300
Like the IP protocol will depend upon its also set up in a hierarchical way for scalability and a variety of other reasons so that we can reasonably refer to these names

00:48.300 --> 00:53.600
And then also what address is and servers would be corresponding to them

00:53.600 --> 00:58.500
It also incorporates cashing so that we have mappings from

00:59.400 --> 01:02.100
Names tour from IP addresses

01:03.500 --> 01:07.200
And then we'll talk about some of the inner workings of DNS as well

01:07.200 --> 01:19.600
such as DNS resolvers and servers how queries and DNS and the DNS protocol work there iterative and recursive versions will talk about how cashing works

01:19.600 --> 01:21.300
And when timeouts Whitaker

01:21.300 --> 01:30.600
we'll talk a little bit about how to do reverse lookups and will show some demonstration of using the dick utility hour

01:30.600 --> 01:34.600
which is a Unix base tool for carrying information within DNS

01:34.600 --> 01:38.300
Let's just quickly compare hostname to versus IP addresses

01:38.300 --> 01:43.400
So whose names will be in demonic name that we appreciate us humans

01:43.400 --> 01:46.800
where as as we've already discussed IP addresses at length

01:46.800 --> 01:51.400
Those are numerical address for those that are necessary for routers

01:52.200 --> 01:54.200
Host names will

01:54.200 --> 01:54.400
of course

01:54.400 --> 01:58.000
be variable length and will now use the full alphabet of characters

01:58.000 --> 02:00.100
Where is IP

02:00.100 --> 02:00.700
addresses

02:00.700 --> 02:04.700
were fixed length and always responded under the Hardison

02:04.700 --> 02:05.500
Binary number

02:06.500 --> 02:25.200
The host names are going to provide little if any information about a location where as IP addresses were defined in a hierarchical way and they were related to the hosts location so that we can perform that routing process to get information where it needs to go

02:25.200 --> 02:33.300
So do some examples of course some hosts names like www.cnn.com BBC

02:33.300 --> 02:33.500
Co

02:33.500 --> 02:44.600
Uk would provide a little location information and these are coarser easier to remember than the numerical quantities and IP addresses below

02:46.500 --> 02:50.000
How do we separate the naming from the addressing

02:50.000 --> 02:50.700
And why do we do this

02:50.700 --> 02:51.000
Well

02:51.000 --> 02:52.700
of course names are easier to remember

02:52.700 --> 02:57.600
The other reason is that underneath the addresses could change

02:57.600 --> 03:04.500
Perhaps we change the server that's running the toasting the website CNN.com

03:04.500 --> 03:07.700
or perhaps we change a service provider

03:07.700 --> 03:11.900
The other thing is a name could actually about to multiple IP addresses

03:11.900 --> 03:15.800
perhaps for load balancing or scalability reasons

03:15.800 --> 03:18.900
We have multiple replicas of a website

03:18.900 --> 03:34.500
So handling load balancing a reducing late and see if perhaps we put a server hosting CNN.com saying different country so that there is always one close by to people likely to try to access that server

03:35.300 --> 03:41.900
We could also do things like Taylor the content based on this based on the requesters location or identity

03:41.900 --> 03:48.800
and we could have multiple names for the same address within this so that we could have a Leah says

03:48.800 --> 03:50.700
and there may be good reasons to do that

03:50.700 --> 03:51.400
So

03:51.400 --> 03:52.400
ww.w

03:52.400 --> 03:54.900
if that's prefixed in a domain name

03:54.900 --> 03:57.700
I typically would correspond to a web server

03:57.700 --> 03:59.400
But if you just access CNN.com

03:59.400 --> 04:03.300
that probably also works and gets directed to the web server

04:03.300 --> 04:05.500
Whereas CNN.com might

04:05.500 --> 04:10.200
it doesn't have to direct to that web server

04:10.900 --> 04:14.200
So

04:14.200 --> 04:15.100
how do we

04:15.100 --> 04:16.300
how does this work

04:16.300 --> 04:16.600
Roughly

04:16.600 --> 04:19.900
how does this mapping between names and addresses work

04:19.900 --> 04:21.000
So

04:21.000 --> 04:21.600
originally

04:21.600 --> 04:23.700
this was done in a host file

04:23.700 --> 04:26.400
I'm working with a flat namespace

04:26.400 --> 04:31.100
Typically under Unix should be in / at see

04:31.100 --> 04:34.300
such hosts and then an organization

04:34.300 --> 04:36.700
One of the first organizations on the internet in the web

04:36.700 --> 04:38.500
SRI in Menlo Park

04:38.500 --> 04:39.600
We keep a Master Copy

04:39.600 --> 04:42.800
So then others would need to download this file regularly

04:42.800 --> 04:44.200
but this isn't going to scale

04:44.200 --> 04:44.500
right

04:44.500 --> 04:49.600
If there are a lot of lookups and if one organization was keeping track of this

04:49.600 --> 04:55.800
it could overload that server and it would lead to a single point of failure

04:55.800 --> 05:03.700
So this will motivate how DNS works and why we need a distributed and hierarchical collection of servers

05:03.700 --> 05:05.900
So that this would scale up