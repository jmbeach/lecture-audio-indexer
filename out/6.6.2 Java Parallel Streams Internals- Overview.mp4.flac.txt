We'll continue our discussion of parallel streams, internals by focusing on splitting, combining and pooling.
 So, once again, we'll talk about what you can change, what you can't change in the context of splitting, combining and pulling.
 So that the splitting and combining and pulling mechanisms by default are invisible. If you if you don't do anything and you just program of Pella screen by saying Carol Stream is a stream. Good things happen without you having to be much concerned with how or why is good things happen and that's again intentional. It's by Design.
 Why? This is the case is that all Java Collections you get out of the box in the Java class library on the Java platform all come with predefined splitter, Raiders, that can create parallel streams. So that's great.
 You can see her again, split a writer and then here's parallel stream, which uses the splitter Raider method in conjunction with stream support. Stream and the true flag in the cape. You want to make a Pearl Street?
 Likewise Java also, predefined various collector, Factory methods in the collectors utility class. And so, we have various methods, you could do things like create lists, create sets, and so on. And these Factory methods, even though they create non concurrent collectors can work seamlessly with parallel streams, as we'll talk about here shortly.
 And of course, the common Fork, join pool is also provided. And in fact, it's, it's mandated to be used with Carol Streams in order to run the intermediate operations, on the chunks of data created by the Pearl splitter, Raiders.
 This is the one that doesn't give you as many customization options. You can customize the heck out of the first two and we'll talk a bit about how to customize these things. Although we'll talk in more detail later on. We get a little further along.
 You can customize split Raider by basically either directly implementing these, put her in her face or extending the abstract splitter abstract class and then filling in the appropriate hook methods advance. And as we mentioned before, that try Advanced method is used by the streams framework. The process elements. One of the time in Boston right now in Carol Streams talk about that when we talked about splitter Raiders for sequential streams and the try split method of course, is what's used to partition elements in a parallel stream and we'll talk a lot more about how try split Works in a couple of different lessons in particular, will talk about it. Generally in the partitioning lesson, and then we will go and show a very, very detailed and cool example. When we talked about the search with parallel splitter, raider-class which implements a super Advanced version of try split to take a work of Shakespeare and
 Put it up into chunks, that can be searched in parallel. So that's going to give us really high-end high-performance fine-grained parallel processor.
 Likewise there's also the collector interface. We've talked before about non concurrent collectors and it has all these methods that you can use will also be talking about concurrent collectors here shortly and you get a chance to compare and contrast the performance characteristics.
 And then there's also this mechanism which we briefly talked about earlier to talk about in a lot more detail in this left, this section on Parallel streams as well as the section on the fork, join pool framework and this is basically used to add new threads to the color for joined pool. If operations Block, it's called interesting enough. They manage blocker interface and it's pretty cool. It's something that most people who program a job and don't know much about. In fact, there's a lot of misleading folklore out there that that you can't use parallel streams and you can't use the fork. Join pool for blocking operations. Nothing could be further from the truth. They work perfectly well for blocking operation things, like blocking Ayo, or blocking on synchronizers are blocking on blocking cues. And so it's just that you have to know how to use to manage block her properly. So I will help to dispel those.
 Mistaken, folklore myths and give you very solid grounding for how to use these features in practice.