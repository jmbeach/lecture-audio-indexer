So the next topic will discuss will be how to assign easier to remember names so that we do not have to remember IP addresses. When we want to talk to a particular Oster node on a network or on the internet. In particular said that principal system that enables us to do. This is called DNS for the domain name system. What it allows us to do is work with names in place of the numerical IP addresses that the actual underlined protocols. Like the IP protocol will depend upon its also set up in a hierarchical way for scalability and a variety of other reasons so that we can reasonably refer to these names. And then also what address is and servers would be corresponding to them. It also incorporates cashing so that we have mappings from
Names tour from IP addresses.
 And then we'll talk about some of the inner workings of DNS as well, such as DNS resolvers and servers how queries and DNS and the DNS protocol work there iterative and recursive versions will talk about how cashing works. And when timeouts Whitaker, we'll talk a little bit about how to do reverse lookups and will show some demonstration of using the dick utility hour, which is a Unix base tool for carrying information within DNS. Let's just quickly compare hostname to versus IP addresses. So whose names will be in demonic name that we appreciate us humans, where as as we've already discussed IP addresses at length. Those are numerical address for those that are necessary for routers.
 Host names will, of course, be variable length and will now use the full alphabet of characters. Where is IP, addresses, were fixed length and always responded under the Hardison. Binary number.
 The host names are going to provide little if any information about a location where as IP addresses were defined in a hierarchical way and they were related to the hosts location so that we can perform that routing process to get information where it needs to go. So do some examples of course some hosts names like www.cnn.com BBC. Co. Uk would provide a little location information and these are coarser easier to remember than the numerical quantities and IP addresses below.
 How do we separate the naming from the addressing? And why do we do this? Well, of course names are easier to remember. The other reason is that underneath the addresses could change. Perhaps we change the server that's running the toasting the website CNN.com, or perhaps we change a service provider. The other thing is a name could actually about to multiple IP addresses, perhaps for load balancing or scalability reasons. We have multiple replicas of a website. So handling load balancing a reducing late and see if perhaps we put a server hosting CNN.com saying different country so that there is always one close by to people likely to try to access that server.
 We could also do things like Taylor the content based on this based on the requesters location or identity, and we could have multiple names for the same address within this so that we could have a Leah says, and there may be good reasons to do that. So, ww.w, if that's prefixed in a domain name. I typically would correspond to a web server. But if you just access CNN.com, that probably also works and gets directed to the web server. Whereas CNN.com might, it doesn't have to direct to that web server.
 So, how do we, how does this work? Roughly, how does this mapping between names and addresses work? So, originally, this was done in a host file. I'm working with a flat namespace. Typically under Unix should be in / at see, such hosts and then an organization. One of the first organizations on the internet in the web, SRI in Menlo Park. We keep a Master Copy. So then others would need to download this file regularly, but this isn't going to scale, right? If there are a lot of lookups and if one organization was keeping track of this, it could overload that server and it would lead to a single point of failure. So this will motivate how DNS works and why we need a distributed and hierarchical collection of servers. So that this would scale up.