WEBVTT

1
00:00:00.000 --> 00:00:00.727 align:middle line:90%


2
00:00:00.727 --> 00:00:02.310 align:middle line:84%
So what we're going
to do now is we're

3
00:00:02.310 --> 00:00:05.190 align:middle line:84%
going to talk about
the real workhorse

4
00:00:05.190 --> 00:00:09.420 align:middle line:84%
of the
PhraseMatchSpliterator class,

5
00:00:09.420 --> 00:00:12.240 align:middle line:90%
which is the trySplit method.

6
00:00:12.240 --> 00:00:15.500 align:middle line:84%
And as you'll see, this
method is the first time

7
00:00:15.500 --> 00:00:16.500 align:middle line:90%
we've really covered it.

8
00:00:16.500 --> 00:00:18.480 align:middle line:84%
We've covered the
constructor before.

9
00:00:18.480 --> 00:00:19.860 align:middle line:90%
We covered the fields before.

10
00:00:19.860 --> 00:00:21.660 align:middle line:90%
We covered tryAdvance before.

11
00:00:21.660 --> 00:00:24.030 align:middle line:84%
But we've never covered
trySplit before.

12
00:00:24.030 --> 00:00:26.640 align:middle line:84%
And this is really, like
I said, the workhorse that

13
00:00:26.640 --> 00:00:31.760 align:middle line:84%
does all of the heavy
lifting to split things up.

14
00:00:31.760 --> 00:00:35.510 align:middle line:84%
So the streams framework
will use trySplit

15
00:00:35.510 --> 00:00:39.440 align:middle line:84%
to try to partition a
work of Shakespeare, which

16
00:00:39.440 --> 00:00:42.410 align:middle line:84%
is stored in a
string, into chunks

17
00:00:42.410 --> 00:00:46.190 align:middle line:84%
of that work of Shakespeare
that can be searched in parallel

18
00:00:46.190 --> 00:00:48.120 align:middle line:90%
in the common ForkJoinPool.

19
00:00:48.120 --> 00:00:49.940 align:middle line:84%
And if you think back
to the discussions

20
00:00:49.940 --> 00:00:54.200 align:middle line:84%
we did about the internals
of parallel streams

21
00:00:54.200 --> 00:00:58.820 align:middle line:84%
where I talked about how
the AbstractTask compute

22
00:00:58.820 --> 00:01:00.960 align:middle line:84%
method worked,
remember AbstractTask

23
00:01:00.960 --> 00:01:05.160 align:middle line:84%
had this method that was used
to basically deal with tasks.

24
00:01:05.160 --> 00:01:06.950 align:middle line:84%
So if you took a
look at that method,

25
00:01:06.950 --> 00:01:09.290 align:middle line:84%
you could see where it
called trySplit repeatedly

26
00:01:09.290 --> 00:01:11.360 align:middle line:90%
until it finally returned null.

27
00:01:11.360 --> 00:01:14.750 align:middle line:84%
Well, that would be the
context in which the trySplit

28
00:01:14.750 --> 00:01:17.630 align:middle line:84%
method would be called that
we're about to examine.

29
00:01:17.630 --> 00:01:20.180 align:middle line:84%
Now, it turns out, as
I alluded to before,

30
00:01:20.180 --> 00:01:24.200 align:middle line:84%
that doing a parallel
Spliterator for a work

31
00:01:24.200 --> 00:01:26.670 align:middle line:90%
of Shakespeare is very tricky.

32
00:01:26.670 --> 00:01:29.090 align:middle line:84%
And so for that
reason, we've actually

33
00:01:29.090 --> 00:01:31.200 align:middle line:84%
decomposed the
trySplit method up

34
00:01:31.200 --> 00:01:34.970 align:middle line:84%
into a number of helper
methods to just make it easier

35
00:01:34.970 --> 00:01:36.062 align:middle line:90%
to keep track of things.

36
00:01:36.062 --> 00:01:38.270 align:middle line:84%
Honestly, the other reason
was to make everything fit

37
00:01:38.270 --> 00:01:39.810 align:middle line:90%
onto one slide.

38
00:01:39.810 --> 00:01:41.540 align:middle line:84%
But I think it also
helps to understand

39
00:01:41.540 --> 00:01:44.630 align:middle line:84%
the overall algorithm better if
you see the pieces, as opposed

40
00:01:44.630 --> 00:01:47.100 align:middle line:90%
to just a lot of code.

41
00:01:47.100 --> 00:01:49.880 align:middle line:84%
Note that there is no
synchronization needed

42
00:01:49.880 --> 00:01:51.440 align:middle line:90%
in any of these methods.

43
00:01:51.440 --> 00:01:55.040 align:middle line:84%
That's because the framework,
the streams framework,

44
00:01:55.040 --> 00:01:57.650 align:middle line:84%
always calls trySplit
from a single thread.

45
00:01:57.650 --> 00:02:01.580 align:middle line:84%
In fact, you saw that earlier
in that abstract task discussion

46
00:02:01.580 --> 00:02:05.660 align:middle line:84%
that we did when we talked about
parallel streams partitioning

47
00:02:05.660 --> 00:02:08.937 align:middle line:84%
and how it mapped onto
the common ForkJoinPool.

48
00:02:08.937 --> 00:02:10.729 align:middle line:84%
So if you go back and
rewatch those videos,

49
00:02:10.729 --> 00:02:14.030 align:middle line:84%
you'll see how it
works under the hood.

50
00:02:14.030 --> 00:02:17.930 align:middle line:84%
So the high level here is
what trySplit is going to do.

51
00:02:17.930 --> 00:02:19.940 align:middle line:84%
What it's going to
do is if the input is

52
00:02:19.940 --> 00:02:22.250 align:middle line:84%
below some minimum
size, which is

53
00:02:22.250 --> 00:02:24.590 align:middle line:84%
we saw before was set
in the constructor,

54
00:02:24.590 --> 00:02:26.510 align:middle line:90%
it'll just return null.

55
00:02:26.510 --> 00:02:29.450 align:middle line:84%
Otherwise, it tries
to split the input up

56
00:02:29.450 --> 00:02:33.950 align:middle line:84%
into two relatively
even-sized chunks.

57
00:02:33.950 --> 00:02:36.980 align:middle line:84%
And you'll see that "relatively"
is the keyword here.

58
00:02:36.980 --> 00:02:39.890 align:middle line:84%
It returns a Spliterator
for the left chunk,

59
00:02:39.890 --> 00:02:44.090 align:middle line:84%
and then it updates itself
to become the right chunk.

60
00:02:44.090 --> 00:02:47.450 align:middle line:84%
And we'll see that it tries to
do this as evenly as it can,

61
00:02:47.450 --> 00:02:49.340 align:middle line:90%
but we have to be careful.

62
00:02:49.340 --> 00:02:52.340 align:middle line:84%
Because if we do it so
evenly that it ends up

63
00:02:52.340 --> 00:02:54.710 align:middle line:84%
splitting the input
across a phrase

64
00:02:54.710 --> 00:02:59.800 align:middle line:84%
that we're searching for,
obviously it's no good at all.

65
00:02:59.800 --> 00:03:02.020 align:middle line:84%
Now, the thing to
remember about splitting

66
00:03:02.020 --> 00:03:04.390 align:middle line:84%
is you don't have
to be perfectly even

67
00:03:04.390 --> 00:03:06.580 align:middle line:84%
in order for a Spliterator
to run efficiently.

68
00:03:06.580 --> 00:03:09.310 align:middle line:84%
You can be marginally
even, which

69
00:03:09.310 --> 00:03:12.200 align:middle line:84%
is what we're going
to be doing here.

70
00:03:12.200 --> 00:03:16.190 align:middle line:84%
So here's the actual code
for the trySplit method.

71
00:03:16.190 --> 00:03:18.910 align:middle line:84%
And let's go ahead
and walk through it.

72
00:03:18.910 --> 00:03:22.870 align:middle line:84%
The actual code in the source
code repository on GitHub

73
00:03:22.870 --> 00:03:24.280 align:middle line:90%
is very heavily commented.

74
00:03:24.280 --> 00:03:26.410 align:middle line:84%
So I also recommend
you go and read that,

75
00:03:26.410 --> 00:03:29.740 align:middle line:84%
because it may give you some
additional insights, as well

76
00:03:29.740 --> 00:03:32.980 align:middle line:84%
as the discussions were
about to have right now.

77
00:03:32.980 --> 00:03:34.480 align:middle line:84%
So the first thing
we do is we check

78
00:03:34.480 --> 00:03:39.150 align:middle line:84%
to see if the input
substring that we've got,

79
00:03:39.150 --> 00:03:41.250 align:middle line:84%
which could be the
original string altogether,

80
00:03:41.250 --> 00:03:44.100 align:middle line:84%
or as we split things up, it'll
become smaller and smaller--

81
00:03:44.100 --> 00:03:47.243 align:middle line:84%
whether or not that length
of the current string

82
00:03:47.243 --> 00:03:49.410 align:middle line:84%
we're working on, or substring
that we're working on

83
00:03:49.410 --> 00:03:54.340 align:middle line:84%
after a split, is less than or
equal to the min split size.

84
00:03:54.340 --> 00:03:56.520 align:middle line:84%
If it is less than or equal
to the min split size,

85
00:03:56.520 --> 00:03:58.200 align:middle line:90%
that means we're done.

86
00:03:58.200 --> 00:04:00.810 align:middle line:84%
And we're just going to
bail out and return null.

87
00:04:00.810 --> 00:04:02.128 align:middle line:90%
OK, so far so good.

88
00:04:02.128 --> 00:04:03.670 align:middle line:84%
So let's assume for
sake of argument,

89
00:04:03.670 --> 00:04:05.542 align:middle line:84%
we haven't reached
that point yet.

90
00:04:05.542 --> 00:04:07.000 align:middle line:84%
The next thing
we're going to do is

91
00:04:07.000 --> 00:04:10.090 align:middle line:84%
we're going to define
a couple of values.

92
00:04:10.090 --> 00:04:12.070 align:middle line:84%
We're going to find
something called startPos,

93
00:04:12.070 --> 00:04:15.410 align:middle line:84%
or startPosition, and we'll
talk about that in a second.

94
00:04:15.410 --> 00:04:18.130 align:middle line:84%
And then we also have
something called splitPos.

95
00:04:18.130 --> 00:04:20.470 align:middle line:84%
And the splitPos,
or splitPosition,

96
00:04:20.470 --> 00:04:25.990 align:middle line:84%
is our initial guess at where
to make the split in the string.

97
00:04:25.990 --> 00:04:27.510 align:middle line:84%
So let's assume for
sake of argument

98
00:04:27.510 --> 00:04:31.030 align:middle line:84%
that we had Hamlet
as our input string.

99
00:04:31.030 --> 00:04:34.320 align:middle line:84%
And if we take the length
of the text of Hamlet

100
00:04:34.320 --> 00:04:37.270 align:middle line:84%
and divide it by
2 just for kicks,

101
00:04:37.270 --> 00:04:41.850 align:middle line:84%
let's assume that we'd end up
somehow with a potential split

102
00:04:41.850 --> 00:04:44.130 align:middle line:90%
at the location I show here.

103
00:04:44.130 --> 00:04:47.340 align:middle line:84%
So potentially, we would
split between the word "of"

104
00:04:47.340 --> 00:04:49.173 align:middle line:90%
and the word "wit."

105
00:04:49.173 --> 00:04:51.090 align:middle line:84%
Now, of course, that
would be a horrible split

106
00:04:51.090 --> 00:04:53.048 align:middle line:84%
if we're trying to look
for the phrase "brevity

107
00:04:53.048 --> 00:04:54.400 align:middle line:90%
is the soul of wit."

108
00:04:54.400 --> 00:04:56.005 align:middle line:90%
But we got to start somewhere.

109
00:04:56.005 --> 00:04:56.880 align:middle line:90%
So that's what we do.

110
00:04:56.880 --> 00:04:59.112 align:middle line:90%
That's our initial guess.

111
00:04:59.112 --> 00:05:00.570 align:middle line:84%
The next thing
we're going to do is

112
00:05:00.570 --> 00:05:04.890 align:middle line:84%
we're going to call a helper
method called computeStartPos

113
00:05:04.890 --> 00:05:06.750 align:middle line:90%
for start position.

114
00:05:06.750 --> 00:05:09.330 align:middle line:84%
And that's going to be
our initial guess at where

115
00:05:09.330 --> 00:05:11.010 align:middle line:90%
to start the search.

116
00:05:11.010 --> 00:05:12.540 align:middle line:84%
And of course,
what we need to do

117
00:05:12.540 --> 00:05:17.410 align:middle line:84%
is figure out how big
the search phrase is.

118
00:05:17.410 --> 00:05:19.110 align:middle line:84%
And then we can
compute where to start

119
00:05:19.110 --> 00:05:22.860 align:middle line:84%
the search by subtracting that
from where we do the split.

120
00:05:22.860 --> 00:05:25.050 align:middle line:84%
And we'll look at the logic
for computeStartPosition

121
00:05:25.050 --> 00:05:27.280 align:middle line:90%
here in a second.

122
00:05:27.280 --> 00:05:29.220 align:middle line:84%
So here's the
computeStartPosition.

123
00:05:29.220 --> 00:05:31.680 align:middle line:84%
This identifies the
position to start

124
00:05:31.680 --> 00:05:36.450 align:middle line:84%
determining if a phrase
spans the split position.

125
00:05:36.450 --> 00:05:40.380 align:middle line:84%
So the whole purpose of this is
to see if we would accidentally

126
00:05:40.380 --> 00:05:43.320 align:middle line:84%
end up straddling or
spanning the split

127
00:05:43.320 --> 00:05:46.020 align:middle line:84%
position with our phrase
and then readjust the start

128
00:05:46.020 --> 00:05:50.453 align:middle line:84%
position accordingly to make
it not be in the wrong place.

129
00:05:50.453 --> 00:05:51.870 align:middle line:84%
So here's how it
is going to work.

130
00:05:51.870 --> 00:05:52.650 align:middle line:84%
The first thing
we're going to do

131
00:05:52.650 --> 00:05:55.108 align:middle line:84%
is we're going to figure out
the length of the phrase we're

132
00:05:55.108 --> 00:05:56.580 align:middle line:90%
searching for.

133
00:05:56.580 --> 00:05:58.770 align:middle line:84%
So "brevity is
the soul of wit--"

134
00:05:58.770 --> 00:06:00.960 align:middle line:84%
that turns out to be a
certain number of characters,

135
00:06:00.960 --> 00:06:03.728 align:middle line:84%
probably something in the order
of 24 or something like that.

136
00:06:03.728 --> 00:06:04.270 align:middle line:90%
I'm not sure.

137
00:06:04.270 --> 00:06:05.560 align:middle line:90%
I'd have to count them.

138
00:06:05.560 --> 00:06:08.280 align:middle line:84%
So we figure out how
long the phrase is.

139
00:06:08.280 --> 00:06:12.190 align:middle line:84%
And then we take
the splitPosition,

140
00:06:12.190 --> 00:06:14.070 align:middle line:84%
which we passed as
a parameter, and we

141
00:06:14.070 --> 00:06:18.000 align:middle line:90%
subtract the phrase length.

142
00:06:18.000 --> 00:06:21.050 align:middle line:84%
So that's going to give
us the startPosition.

143
00:06:21.050 --> 00:06:25.243 align:middle line:84%
And this is, again, the
notional startPosition.

144
00:06:25.243 --> 00:06:26.910 align:middle line:84%
And then we do a
little sanity checking.

145
00:06:26.910 --> 00:06:30.750 align:middle line:84%
If that startPosition is less
than 0 for some strange reason,

146
00:06:30.750 --> 00:06:34.650 align:middle line:84%
or if the phrase length is
greater than the splitPosition,

147
00:06:34.650 --> 00:06:36.787 align:middle line:84%
if the phrase is too
long for example,

148
00:06:36.787 --> 00:06:38.370 align:middle line:84%
then we just bail
out and say, there's

149
00:06:38.370 --> 00:06:39.912 align:middle line:84%
no point in searching
for the phrase.

150
00:06:39.912 --> 00:06:41.550 align:middle line:90%
It's too big for this segment.

151
00:06:41.550 --> 00:06:43.530 align:middle line:90%
We aren't going to find a match.

152
00:06:43.530 --> 00:06:46.170 align:middle line:84%
Otherwise, we return
our best guess

153
00:06:46.170 --> 00:06:48.510 align:middle line:90%
for the computed startPosition.

154
00:06:48.510 --> 00:06:50.090 align:middle line:84%
So that comes back
as this method,

155
00:06:50.090 --> 00:06:51.970 align:middle line:90%
and that sets startPosition.

156
00:06:51.970 --> 00:06:54.480 align:middle line:84%
So now we have
startPosition set,

157
00:06:54.480 --> 00:06:56.232 align:middle line:90%
and we have splitPosition set.

158
00:06:56.232 --> 00:06:57.690 align:middle line:84%
The next thing
we're going to do is

159
00:06:57.690 --> 00:07:01.380 align:middle line:84%
we're going to pass
startPosition and splitPosition

160
00:07:01.380 --> 00:07:06.690 align:middle line:84%
into yet another helper method
called tryToUpdateSplitPosition

161
00:07:06.690 --> 00:07:08.820 align:middle line:90%
or tryToUpdateSplitPos.

162
00:07:08.820 --> 00:07:12.420 align:middle line:84%
What this will do is this
will update the splitPosition

163
00:07:12.420 --> 00:07:17.460 align:middle line:84%
if the phrase spans the
initial splitPosition.

164
00:07:17.460 --> 00:07:19.200 align:middle line:84%
So by the time this
method returns, we'll

165
00:07:19.200 --> 00:07:20.740 align:middle line:90%
have the actual split position.

166
00:07:20.740 --> 00:07:22.860 align:middle line:84%
And as you can see here,
what's going to happen

167
00:07:22.860 --> 00:07:23.985 align:middle line:90%
is it's going to come back.

168
00:07:23.985 --> 00:07:26.280 align:middle line:84%
And it's going to say, that
original splitPosition was

169
00:07:26.280 --> 00:07:29.705 align:middle line:84%
a really bad idea because we'd
end up straddling phrases.

170
00:07:29.705 --> 00:07:31.080 align:middle line:84%
So instead, we're
going to return

171
00:07:31.080 --> 00:07:33.240 align:middle line:84%
a different
splitPosition, and we're

172
00:07:33.240 --> 00:07:38.700 align:middle line:84%
going to use that which should
allow us to get a proper split.

173
00:07:38.700 --> 00:07:42.950 align:middle line:84%
So here is the
tryToUpdateSplitPos method.

174
00:07:42.950 --> 00:07:44.750 align:middle line:84%
And the whole
purpose of this thing

175
00:07:44.750 --> 00:07:49.200 align:middle line:84%
is to avoid splitting a
string across a phrase.

176
00:07:49.200 --> 00:07:51.350 align:middle line:84%
Now, again, you
can see that if we

177
00:07:51.350 --> 00:07:52.910 align:middle line:84%
were to start with
this startPosition

178
00:07:52.910 --> 00:07:55.243 align:middle line:84%
and that splitPosition, that's
exactly what we would do.

179
00:07:55.243 --> 00:07:56.840 align:middle line:84%
So this method's
got to compensate

180
00:07:56.840 --> 00:08:00.890 align:middle line:84%
for that to come back
with a better result.

181
00:08:00.890 --> 00:08:04.720 align:middle line:84%
What we're going to do is we're
going to set an internal helper

182
00:08:04.720 --> 00:08:08.890 align:middle line:84%
variable called endPos to be
the very end of the input that

183
00:08:08.890 --> 00:08:10.690 align:middle line:90%
could match the pattern.

184
00:08:10.690 --> 00:08:14.350 align:middle line:84%
And the way we do that is we
take the splitPos and then

185
00:08:14.350 --> 00:08:18.350 align:middle line:84%
we add the length of
the pattern as a string.

186
00:08:18.350 --> 00:08:20.110 align:middle line:84%
So that tells you
how far we have

187
00:08:20.110 --> 00:08:23.327 align:middle line:84%
to look in order to see
where a match could occur.

188
00:08:23.327 --> 00:08:25.910 align:middle line:84%
And we need to do this in order
to be able to make the pattern

189
00:08:25.910 --> 00:08:28.232 align:middle line:90%
matcher work properly.

190
00:08:28.232 --> 00:08:30.440 align:middle line:84%
We then got to make sure
that the phrase isn't longer

191
00:08:30.440 --> 00:08:31.815 align:middle line:84%
than the input
string which again

192
00:08:31.815 --> 00:08:34.789 align:middle line:84%
is sort of another sanity
check, if you will.

193
00:08:34.789 --> 00:08:39.030 align:middle line:84%
And assuming it's all
copacetic, we continue.

194
00:08:39.030 --> 00:08:42.539 align:middle line:84%
Otherwise, we bail out
and return minus 1,

195
00:08:42.539 --> 00:08:45.360 align:middle line:84%
which is a flag to the caller
that something went wrong

196
00:08:45.360 --> 00:08:50.570 align:middle line:84%
and stop trying to search
this particular segment.

197
00:08:50.570 --> 00:08:52.400 align:middle line:84%
What we then do as
we go ahead and we

198
00:08:52.400 --> 00:08:57.700 align:middle line:84%
create ourselves a subSequence
of the input string.

199
00:08:57.700 --> 00:09:00.100 align:middle line:84%
And you can see here
that this subSequence

200
00:09:00.100 --> 00:09:02.740 align:middle line:84%
goes from the startPosition
to the endPosition.

201
00:09:02.740 --> 00:09:04.420 align:middle line:84%
That's going to be
the entire region

202
00:09:04.420 --> 00:09:07.173 align:middle line:90%
we're going to try to match.

203
00:09:07.173 --> 00:09:08.590 align:middle line:84%
And so what we're
going to do then

204
00:09:08.590 --> 00:09:10.180 align:middle line:84%
is we're going to
take that substring

205
00:09:10.180 --> 00:09:16.090 align:middle line:84%
from the current startPosition
to the current endPosition,

206
00:09:16.090 --> 00:09:18.100 align:middle line:84%
and we're going
to basically call

207
00:09:18.100 --> 00:09:20.710 align:middle line:84%
the matcher method
on the pattern

208
00:09:20.710 --> 00:09:24.670 align:middle line:84%
to see if we get a match
within that string.

209
00:09:24.670 --> 00:09:26.060 align:middle line:90%
OK, still so far so good.

210
00:09:26.060 --> 00:09:28.980 align:middle line:84%
We get back a
mPattern.matcher for that.

211
00:09:28.980 --> 00:09:31.420 align:middle line:84%
And then we go ahead and
see if there's a match.

212
00:09:31.420 --> 00:09:34.810 align:middle line:84%
And if there is a match
in that region, that says,

213
00:09:34.810 --> 00:09:38.910 align:middle line:84%
hey, we'd better be prepared
to update the startPosition.

214
00:09:38.910 --> 00:09:42.870 align:middle line:84%
And so if we find a match,
if mPattern.match or pm.find

215
00:09:42.870 --> 00:09:47.250 align:middle line:84%
returns true, we're going
to go ahead and reset

216
00:09:47.250 --> 00:09:51.600 align:middle line:84%
the splitPosition to
be the startPosition

217
00:09:51.600 --> 00:09:58.380 align:middle line:84%
plus wherever the match occurred
plus the length of the pattern

218
00:09:58.380 --> 00:09:59.580 align:middle line:90%
itself.

219
00:09:59.580 --> 00:10:02.020 align:middle line:84%
And all those things
get added together.

220
00:10:02.020 --> 00:10:04.920 align:middle line:84%
And then we go ahead
and return that value

221
00:10:04.920 --> 00:10:08.140 align:middle line:90%
as the final splitPosition.

222
00:10:08.140 --> 00:10:10.120 align:middle line:84%
So finally, when
this method returns,

223
00:10:10.120 --> 00:10:11.890 align:middle line:84%
we now have figured
out where we want

224
00:10:11.890 --> 00:10:16.720 align:middle line:84%
to split our input in such
a way that we don't end up

225
00:10:16.720 --> 00:10:22.330 align:middle line:84%
with things trying to
straddle boundaries.

226
00:10:22.330 --> 00:10:24.030 align:middle line:84%
So the final method
here is going

227
00:10:24.030 --> 00:10:27.300 align:middle line:84%
to be a call to
split index, which

228
00:10:27.300 --> 00:10:31.740 align:middle line:84%
is going to create and return
a new Spliterator to cover

229
00:10:31.740 --> 00:10:33.517 align:middle line:90%
the left-hand side.

230
00:10:33.517 --> 00:10:35.100 align:middle line:84%
And then we're going
to, as we'll see,

231
00:10:35.100 --> 00:10:37.200 align:middle line:84%
we're going to update
the current Spliterator

232
00:10:37.200 --> 00:10:39.000 align:middle line:90%
to handle the right-hand side.

233
00:10:39.000 --> 00:10:41.720 align:middle line:90%


234
00:10:41.720 --> 00:10:46.880 align:middle line:84%
So splitInput is going to create
and return a new Spliterator,

235
00:10:46.880 --> 00:10:48.560 align:middle line:90%
and here's how it works.

236
00:10:48.560 --> 00:10:50.870 align:middle line:84%
This, by the way,
is the reason why

237
00:10:50.870 --> 00:10:53.750 align:middle line:84%
we're using character
sequences because we need to be

238
00:10:53.750 --> 00:10:56.060 align:middle line:90%
able to do these sub-sequences.

239
00:10:56.060 --> 00:10:58.850 align:middle line:84%
And subSequences are very
efficient with character

240
00:10:58.850 --> 00:11:01.760 align:middle line:84%
sequences, but much more costly
with strings because they

241
00:11:01.760 --> 00:11:03.357 align:middle line:90%
end up making data copies.

242
00:11:03.357 --> 00:11:04.940 align:middle line:84%
But we don't want
to make a data copy.

243
00:11:04.940 --> 00:11:06.930 align:middle line:90%
We just want to split it.

244
00:11:06.930 --> 00:11:10.190 align:middle line:84%
So what we do is we
take the current input

245
00:11:10.190 --> 00:11:14.810 align:middle line:84%
and we make a sub-sequence from
the beginning to the splitPos.

246
00:11:14.810 --> 00:11:17.790 align:middle line:84%
And we're going to call
that character sequence lhs,

247
00:11:17.790 --> 00:11:20.960 align:middle line:84%
for left-hand side or
left-hand Spliterator.

248
00:11:20.960 --> 00:11:24.370 align:middle line:84%
Let's call it left-hand side
for the discussion here.

249
00:11:24.370 --> 00:11:27.700 align:middle line:84%
And so that'll cover everything
from the beginning of the input

250
00:11:27.700 --> 00:11:31.420 align:middle line:84%
up to the splitPosition,
so [INAUDIBLE] up to

251
00:11:31.420 --> 00:11:35.040 align:middle line:84%
including [CHUCKLES]
the "t" in "wit."

252
00:11:35.040 --> 00:11:38.520 align:middle line:84%
We then turn around and
update the right-hand side.

253
00:11:38.520 --> 00:11:39.930 align:middle line:90%
That's us.

254
00:11:39.930 --> 00:11:42.610 align:middle line:90%
That's our current string.

255
00:11:42.610 --> 00:11:44.880 align:middle line:84%
So we're going to take
the current string,

256
00:11:44.880 --> 00:11:48.870 align:middle line:84%
and we're going to make a
new subSequence from splitPos

257
00:11:48.870 --> 00:11:53.760 align:middle line:84%
to the end of the
input, mInput.length.

258
00:11:53.760 --> 00:11:56.430 align:middle line:84%
And that is then
overwritten into mInput,

259
00:11:56.430 --> 00:11:58.080 align:middle line:90%
so that becomes the new mInput.

260
00:11:58.080 --> 00:12:00.030 align:middle line:84%
So we're basically
updating ourselves

261
00:12:00.030 --> 00:12:02.760 align:middle line:84%
by creating a new
reference that references

262
00:12:02.760 --> 00:12:07.530 align:middle line:84%
this new subSequence that
has all the right-hand side.

263
00:12:07.530 --> 00:12:09.930 align:middle line:84%
And that's, by the way,
why mInput could not

264
00:12:09.930 --> 00:12:12.840 align:middle line:84%
be defined as final
in the trySplit

265
00:12:12.840 --> 00:12:16.280 align:middle line:84%
because we were going to update
it in trySplit or in splitInput

266
00:12:16.280 --> 00:12:17.840 align:middle line:90%
in this case.

267
00:12:17.840 --> 00:12:20.130 align:middle line:84%
We then take that
input, which is

268
00:12:20.130 --> 00:12:23.130 align:middle line:84%
now as a subSequence of the
original input, basically

269
00:12:23.130 --> 00:12:25.740 align:middle line:84%
about half of it, and
then we make a new pattern

270
00:12:25.740 --> 00:12:26.820 align:middle line:90%
matcher for that.

271
00:12:26.820 --> 00:12:30.960 align:middle line:84%
So mPhraseMatcher is now
connected to a new pattern

272
00:12:30.960 --> 00:12:34.860 align:middle line:84%
matcher that has the same
regular expression before,

273
00:12:34.860 --> 00:12:39.060 align:middle line:84%
but is connected to the
right-hand side of the input.

274
00:12:39.060 --> 00:12:43.370 align:middle line:84%
And then we also update
an offset to be splitPos.

275
00:12:43.370 --> 00:12:46.320 align:middle line:84%
And we're going to need to be
able to update that information

276
00:12:46.320 --> 00:12:49.200 align:middle line:84%
in order to make sure that
we have a global view of what

277
00:12:49.200 --> 00:12:51.712 align:middle line:90%
the offset would be.

278
00:12:51.712 --> 00:12:53.170 align:middle line:84%
So essentially,
what we're doing is

279
00:12:53.170 --> 00:12:59.200 align:middle line:84%
we're updating this object, the
object for which this trySplit

280
00:12:59.200 --> 00:13:03.250 align:middle line:84%
method was called, to reflect
only the right-hand portion

281
00:13:03.250 --> 00:13:05.495 align:middle line:90%
of the input.

282
00:13:05.495 --> 00:13:07.120 align:middle line:84%
And then the very
last thing we do here

283
00:13:07.120 --> 00:13:10.540 align:middle line:84%
as we go ahead and
create a new mPhraseMatch

284
00:13:10.540 --> 00:13:15.010 align:middle line:84%
Spliterator passing in
the left-hand portion,

285
00:13:15.010 --> 00:13:19.450 align:middle line:84%
the left-hand side of the
input, while this object will

286
00:13:19.450 --> 00:13:21.745 align:middle line:90%
handle the right-hand portion.

287
00:13:21.745 --> 00:13:23.120 align:middle line:84%
So I think you'll
agree that this

288
00:13:23.120 --> 00:13:26.900 align:middle line:90%
is pretty darn subtle code.

289
00:13:26.900 --> 00:13:30.020 align:middle line:84%
But it's very powerful
and gets us a chance

290
00:13:30.020 --> 00:13:32.900 align:middle line:84%
to talk about all kinds
of cool Java features

291
00:13:32.900 --> 00:13:36.710 align:middle line:84%
like regular expressions
and character sequences

292
00:13:36.710 --> 00:13:39.830 align:middle line:90%
and all this kind of good stuff.

293
00:13:39.830 --> 00:13:45.220 align:middle line:84%
So once we've split up the work
of Shakespeare in its string

294
00:13:45.220 --> 00:13:48.280 align:middle line:84%
into a bunch of chunks, then
those chunks, of course,

295
00:13:48.280 --> 00:13:50.980 align:middle line:84%
will be thrown into
the common ForkJoinPool

296
00:13:50.980 --> 00:13:53.340 align:middle line:84%
And they can all
be run in parallel.

297
00:13:53.340 --> 00:13:55.990 align:middle line:84%
And keep in mind
that this parallelism

298
00:13:55.990 --> 00:14:00.220 align:middle line:84%
is in addition to the
parallelism of the input string

299
00:14:00.220 --> 00:14:03.400 align:middle line:84%
and phrase chunks we
already had by virtue

300
00:14:03.400 --> 00:14:06.550 align:middle line:84%
of being the same as the
search with parallel streams

301
00:14:06.550 --> 00:14:07.730 align:middle line:90%
implementation.

302
00:14:07.730 --> 00:14:10.860 align:middle line:84%
So now we've got parallelism
in three dimensions.