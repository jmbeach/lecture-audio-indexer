Serena continue our discussion to the IP address thing. And impart start to talk about an issue that can arise as soon as i p fragmentation. As we do that. We need to continue talking about the IP headers for a couple other aspects. We had mentioned in the IP Hatteras or what, the total length of the header is. So, it's 16 bits in this winter coat. How many bytes are in the packet? So, the maximum pocket-sized, then I would be to to the 16 - 1 since we have 16 bits or 650 5535 bites. So, underlying links, however, might impose smaller limits and this is where fragmentation starts to come into play. So fragmentation occurs, when boarding a packet and internet router may need to split or fragment that packet into multiple pieces. If it's too large for the next top link,
So fragmentation information includes 32 bits of information in the header, which includes a packet identifier flags as well as that fragment offset.
 So is an illustrative example. Suppose, we're sending this packet that's length of a thousand and suppose the maximum transfer unit or MTU of each of these links. Along the way this link is 1000 bytes. This link is 500 bytes. This link is 1,000 bytes. So this would be the max packet size that can be handled by that link. And this could be a function of the underlying physical media that's being used. So, as we're trim transferring from the hosts, the router one. Now at this router because the maximum transfer units, 500 by its, we're going to have to split this packet. We could say split into two packets each link 500 and then they could be sent along the way. So at this point, we could potentially reassemble these. So that would be where we might put these packets back together.
 So that we could then continue on with the with the packet reassembled being sent from router to to host be, but it doesn't necessarily have to happen there. So it could have happened that we just send two packets through the link between our two and host. Be even though we have a larger maximum transfer unit allowed. We went ahead and just didn't do the reassemble. Maybe we could just do it at the receiver. So where does that occur?
 So what the correct answer is typically is it at Whitaker at the end coast and the reason being is that the fragments could travel across different paths. So why would we do the reassembly in the network if it could be further fragmented, later as well? If we already took the processing effort to split the pack it up, supposing, our networks been modified and we have two links. We could simultaneously, send this information. That's a long routes through router to and router 3, maybe they could arrive at different times, Soho speed, and then the reassembly could happen there. So we'd prefer to do it at the Final Destination. So that we would avoid extra overhead from doing the splitting, and reassembly in the network, especially because it could further be subject to fragmentation further down in the path of the network.
 So this is where this information is stored in the IP packet, had her what offset would be there as well. Some ID numbers are going to talk a little bit more about so what are these portions of the header? So the identifier is used to tell which fragments belong together. So basically what packets been split up and which fragments are going to correspond to which original packet? The flags are three bets can be a variety of things. Like dog, fragment instruct routers, not to fragment the packet even if it would fit, they could drop it instead and send back a two, large icmp message. This could form the basis for doing the maximum transfer unit discovery, which will talk some about later.
 So the other portion is the offset to the offsets 13 bets. So what part of the data gram would be covered by this fragment in a fight, your nuts and how could the receiver differentiate between the last fragment of a packet and a nun fragmented packet? So there's some special offset. So neither one of them would have this mf4 fragmented Flagstaff and if the offset of zero then it corresponds to it being a nun, fragmented packet. Otherwise, it needs to be the last fragment. So it has been coded that specially.
 So, let's just look at an example of fragmentation. So supposed to have a 4,000 by theater, Grandma package, sent from host. One, two, three, four, Two Hosts, three, four, five, six. So, we have the source and destination address is encoded. We have extra information, included beyond the 20 bite. Header. The total length includes the header link. Plus the additional payload lengths, study identification. That's the fragmented ID and then an offset. And then this other flags within the fragmentation aren't set, currently there's a check some guy that's been plugged in corresponding to this.
 Check some of the data encoded in the message. Let's suppose that traverses are linked that limits datagrams to 1500 bytes.
 So what would occur in this the date of Grant would need to be split into pieces? So as an example we have from by zero up two by four thousand so we could split this into three different chunks or three different datagrams. So one correspondent again, the maximum transfer it was 1500. So one could correspond to filling up that whole $1,500, or 20 bites have had her information and 1480 bytes of packet payload. The next packet. Perhaps could be split up into 12:20 total. So 1200 for the payload, 20 for the header, and the last could be split up. Let's stay in to 1301 for this total length. Length of 4001 bytes.
 So the possible first piece then could look something like this. So we have an ID for what packet, this corresponds to the total length would get encoded. Here's the 1500 and then the fragment offset could be 0. Corresponding to it being the first part of the fragment.
 So the possible second piece then the as we can see the ID number stays the same or at so that ID number would stay the same. The total length is now changed. And then the fragment offset where this would appear, we are counting in bites here. So the fragment offset here would need to be 185 cuz 185 times. So it would be the 14 80 and that correspond to the length minus, the header length of the previous fragment, so that we can put things back together appropriately. So then the possible third piece of this could look like this. So the fragment offset for this now, would be the sum.
 Of the prior two fragments for the 1,200 plus the 1480 would be where we're getting this 2680 from.
 So that would be the fragment offset. So 3:35 bites would correspond to that 2680. Right? So, this is how we know that this portion of the fragment would be the last one based on that offset.
 So there are designed the decisions that we can make it with respect to fragmentation. So 1 ways, where would we assembly occur? We've mentioned that a little bit so far. So usually we want to do that at the Final Destination. There's several reasons. Why? Because different fragments could drop Traverse different paths through the network. The whole collection may only be available at the receiver. So maybe not possible to actually do the reassembly inside of the network. Another reason. Is that? Reassembly it any? No could be premature as we've discussed subsequent. Links might require further fragmentation.
 So why should we use the spite offset as well for fragments rather than number in each? Well, the first answer would be, it allows further fragmentation of the fragments. Okay. So just because one package, already been fragmented. Perhaps, we need to further fragment that fragment. So, another answer is with, despite offset. The receiver can then lay down the bites and memory when they arrive. So we could just basically allocate the total length, and then put these, where they would need to go in that memory. Eraser wouldn't need to be moving the received at or around so we could avoid things like them copies.
 So, some final portions of the packet header that we haven't discussed too much chatter time to live in the check sums were going to wrap those up now. So the time to live field is used to address a potentially serious problem that can arise. And in IP forwarding Loops could cause packets to cycle in the network forever. And as these would accumulate, it could consume all network capacity. So we we keep the time to live field in the packet, header, and this gets decremented each hop. If that ever reaches zero, then the package gets discarded. The time exceeded message would then be sent back to the source. So this is this abuse a using icmp control messages and would be the basis for how traceroute would work.
 I'm so because as we've seen with some of the routing protocols, we could wind up with these Cycles. We need to avoid having the cyclist. Go on forever.
 The protocol would identify a higher layer protocol the transport layer protocol typically. So, for TCP, we wouldn't go to 6 in the header or UDP would encode a 17 and a header. For that particular protocol is a standard that would define where these come from. This can be important for doing D multiplexing at the receiving host. Is it indicate? What kind of pattern to expect next after that hire layer transport layer protocol?
 The most of the last parts of the packet. Her we haven't yet discussed should be the checksum. What happens with the checksum. It's basically making sure date has not been corrupted what how this is computed and be computed as taking the ones compliments. Some of all of the 16-bit words in the IP packet had her right. So use 16-bit words in the ticket. That one's compliments. I'm over all of them. Are the results of this should be a zero or in Hexxit should be ones. If it's not, then the router with describe the packet is having been corrupted so that we don't act on bogus information. For example, of just a single bit, or a single portion of that IP packet, had her spend modified.
 So the last Parts we've already talked about it. A fair amount would be the actual IP addresses. So the two that appear there in the IP packet, headers for the source. So where did it come from? Like the return address in postal mail and the destination or where we're sending to the to address in postal mail. So these destination address is, there should be a unique identifier locator for the receiving host, so that we can have this forwarded appropriately at each router. Where node in the Network's remember. All this is packet-switched. So each no needs to know how to get it to that destination, or at least to get it to the next link along the way to the destination. The Source address also needs to be unique so that the recipient can decide. Let's say whether to accept the packet. Maybe if it's coming from an unknown IP address or an IP address, you know, as bad, you were a few Zack, the receiving host would say, refuse
 Something the packet. So, this would also enable the recipient to send reply messages back to the source. For example, if it needs to acknowledge something, or make sure some information was received or whatever other purpose might be necessary. So that should conclude about everything about IP fragmentation, as well as a few more details about a couple parts of the IP packet, headers that we hadn't previously covered.