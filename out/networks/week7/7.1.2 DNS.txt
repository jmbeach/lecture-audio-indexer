So now that we've introduced the reason for why we have the DNS system. Let's talk a little bit about how it works and how we can work through this mechanism of mapping demonic names to IP addresses. So just a few properties of DNS to start with. So it is a hierarchical namespace divided into zones. The new zones are distributed over a collection of DNS servers and wish us some examples of the shortly to clarify what those phones would mean, losing a hierarchy of DNS servers. Are there are some root DNS servers that are hardwired so that other service can connect to them. They're also top-level domain or Tod servers and then finally, they're all. So authoritative, DNS servers.
So where does the translation get performed? So there can also be local DNS servers and with resolver software that would perform that look up to map a name into an IP address. So it's like a little bit of how DNS would be organized and what it would look like, roughly. It would look like this for some example, domains. So we would have a root server then we would have top-level domain servers. These are correspond to like come to you. Org. There could be those are generic remains. There are many other domain such as country domains. There may be other special-purpose demands like our pot. So then Within These, if we wanted to refer to a particular website, let's say bar. Edu, it would then be organized below this. Then if we had further subdomains or further prefixes in front.
Maybe we have one of these servers located on the west coast and other on the east coast and then Within These we can have some some further break down into this hierarchy. So for example to figure out this name the my Dottie Stuttgart at you, so we would read this from bottom to top following this tree.
 brats and similarly, for the other example, so terminology wise
 The committee you or get such a servers. These are called the top level domain servers, or tlds are at the domain names when they are designated. As that top-level entry. It would be the top level domain name.
 So where? Where is the DNS root servers are so one is located in Virginia. But how do we make it scale?
 So there really is not just one. They're 13. Roughly, the number of these can vary slightly, but you can refer to the server. Org website to see what were their allocated. They're typically labeled a through M. And this will help scale better. If we geographically distributed all these servers. So, for example on the East Coast, there would be several from organizations like verisign. When my, when is run by NASA, then another country's there would be other DNS root servers. So this way to help us scale a bit better. However, now we need to perform replication so that all of these servers will contain the same information, so that, if we look up an IP address or rather, we look up a domain name to figure out what the IP address is, no matter which one of these root servers will query, we need to get back the same IP address.
 That would correspond to that domain name.
 So, the tldr top-level domain servers. Again, these would host. The generic domains country-specific, domains. Are there special domains? Like arpa is a typically be managed professionally by companies. Offer example, Network Solutions, maintain servers for cam, educause maintain servers for EDU.
 The last type of DNS server that we haven't discussed yet or authoritative DNS servers. These would provide public records for hosted, a particular organization. These typically could be private records. So, if you want to refer to a printer by a name and not part of a sort of the original designers attend, so it may not publish all of these around. So this should be things for like organization. Servers, are other local things. So these could be maintained locally or by a service provider.
 Sabes quien es work. So you typically have a local DNS server on your located near and toast that would connect to it. Then the local hosts would be configured with that local server or would learn the server through a mechanism like DHCP, which were going to talk about later. So, he'd know where the server is located and what its IP address is. So we could talk to it the client application, then it would extract the server name from a URL and do a get name to trigger the resolution of a domain name. Then a server application would pull out the client IP address from a saw cutter from packets that are incoming in could translate that back into a name if necessary. So it's just a little example. So let's suppose a host. She is Polly. Edu wants to get the IP address for Gaia. CS at UMass study to you. So this is the request.
 and this is the host, we want to figure out the IP address for
 So the requesting horse would carry the local DNS server to say a DNS stop Polly. Edu. That could query the root DNS server to say. Where is this located after responding back with what top-level domain name server to look? The edu information up at a response back from that?
 Then after we figured out what the authoritative DNS server is, for this particular host that we're trying to figure out the IP address of, we would query the authoritative DNS server at that organization. It would then respond back to the local DNS server, and then finally send the information to the original requesting host.
 That's roughly how it would work. So, how did we know the routes server IP address? Well, that's hard to code, it, essentially, so there can be some issues with that. If it does change, if the IP addresses have the root server service change their own, typically be some major announcements like that. For this. Remember, they're labeled a through M. So if the D route changed its IP address there, be announcements about this. All right, so that the correct information could get hard-coated appropriately so that these look up switch would proceed and work properly.
 There are a couple different kinds of queries. What we saw an example of essentially was sort of a recursive query sweet ass, the server to figure out the answer for it. So this would look like that request one in response to 8. So I'd say the host would say to its local. DNS server find me, this IP address for this host and alternative mechanism for how that could work is through an iterative query, where you could ask the local DNS server, who the next server is to ask. So that all of these other request response Paris essentially would be at heard of. So, this local DNS server. Had asked the routine s server. Who do? I ask? And then the TLD Cerberus would ask next and then it asked the authoritative DNS server and then got back with this response.
 So sometimes we also need to go the other direction from an IP address to a corresponding hostname. So, the address is already have a natural higher key. That's a little bit similar looking to the dots between domain name the portions, but the squad notation has the most significant higher key elements on the left, the 12 appearing here, while CNN.com Hazard on the rights and that would be the cam top-level domain. So an idea would be to reverse the quads and then start the look up in DNS. So we'll go over little bit of how that would work. But basically the way this should work under a particular top-level domain. It would look something like this where you can see we've flipped. We just reverse this string corresponding to the IP address and then
 A prefix stepped on this convention say, for something that's inside of the carpet top-level domain.
 All right, and pictorial a with that reverse type of look up would be something like this? Where the if we were to read now from the bottom. We would see that encoding of zero is not shown here, but the 56th, and the 34th, and the 12, then the end address than are at the top level domain.
 So that all summarize a bit about the high-level overview of how DNS works and the next we're going to talk about a few more details in terms of how the DNS system. Overall operate sensor performance mechanisms as well as some challenges that arise.