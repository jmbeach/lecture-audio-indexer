WEBVTT

00:00:00.000 --> 00:00:00.820 align:middle line:90%


00:00:00.820 --> 00:00:04.720 align:middle line:84%
So next we'll discuss the
Address Resolution Protocol,

00:00:04.720 --> 00:00:08.410 align:middle line:84%
which is used to come up with
a mapping between MAC addresses

00:00:08.410 --> 00:00:10.850 align:middle line:90%
and IP addresses.

00:00:10.850 --> 00:00:13.990 align:middle line:84%
So let's first give a little
bit of an overview of how

00:00:13.990 --> 00:00:16.490 align:middle line:90%
this process works.

00:00:16.490 --> 00:00:19.280 align:middle line:84%
So recall that we have
32-bit IP addresses.

00:00:19.280 --> 00:00:21.850 align:middle line:84%
This is used for
network layer services.

00:00:21.850 --> 00:00:24.700 align:middle line:84%
So for IP type of
services, we're

00:00:24.700 --> 00:00:28.450 align:middle line:84%
doing forwarding of information
through the network.

00:00:28.450 --> 00:00:31.870 align:middle line:84%
The MAC address--
or LAN, physical,

00:00:31.870 --> 00:00:35.020 align:middle line:84%
or ethernet address would
be some other common terms

00:00:35.020 --> 00:00:35.890 align:middle line:90%
for this--

00:00:35.890 --> 00:00:41.950 align:middle line:84%
this would be used locally
to get access to an interface

00:00:41.950 --> 00:00:45.670 align:middle line:84%
and to send that
information that's

00:00:45.670 --> 00:00:50.480 align:middle line:84%
necessary to be sent to another
interface in the same network.

00:00:50.480 --> 00:00:57.320 align:middle line:84%
So very low level sort of
link layer type of an address,

00:00:57.320 --> 00:00:59.270 align:middle line:90%
so we'll see some more details.

00:00:59.270 --> 00:01:04.450 align:middle line:84%
So the 48-bit MAC address is
put into the network interface

00:01:04.450 --> 00:01:07.790 align:middle line:84%
card's read-only memory,
but sometimes its software's

00:01:07.790 --> 00:01:10.900 align:middle line:84%
settable, so you may know how
to change this in a higher level

00:01:10.900 --> 00:01:11.665 align:middle line:90%
operating system.

00:01:11.665 --> 00:01:14.830 align:middle line:90%


00:01:14.830 --> 00:01:17.620 align:middle line:84%
So what would this look
like with these LAN or MAC

00:01:17.620 --> 00:01:19.120 align:middle line:90%
addresses?

00:01:19.120 --> 00:01:22.510 align:middle line:84%
So every computer
on the network would

00:01:22.510 --> 00:01:29.020 align:middle line:84%
be associated with a MAC
address, every interface card.

00:01:29.020 --> 00:01:31.870 align:middle line:84%
And then if we want to send
information between hosts,

00:01:31.870 --> 00:01:34.750 align:middle line:90%
we use this MAC address.

00:01:34.750 --> 00:01:37.240 align:middle line:84%
This is what the adapters
actually understand.

00:01:37.240 --> 00:01:39.160 align:middle line:84%
They don't understand
IP addresses.

00:01:39.160 --> 00:01:41.740 align:middle line:90%


00:01:41.740 --> 00:01:45.310 align:middle line:84%
So how MAC addresses are
assigned or allocated

00:01:45.310 --> 00:01:48.160 align:middle line:90%
is administered by IEEE.

00:01:48.160 --> 00:01:52.930 align:middle line:84%
When someone wants to produce
network interface cards,

00:01:52.930 --> 00:01:55.660 align:middle line:84%
they'd buy a portion of
the MAC address space

00:01:55.660 --> 00:01:58.600 align:middle line:84%
to try to ensure uniqueness,
although, occasionally, there

00:01:58.600 --> 00:02:01.810 align:middle line:84%
can be duplicate
MAC addresses and it

00:02:01.810 --> 00:02:04.900 align:middle line:84%
can cause all sorts of
interesting network problems.

00:02:04.900 --> 00:02:07.630 align:middle line:84%
But analogously, you can
think of the MAC address

00:02:07.630 --> 00:02:09.430 align:middle line:84%
sort of like a social
security number

00:02:09.430 --> 00:02:12.370 align:middle line:84%
and the IP address sort
of like a postal address.

00:02:12.370 --> 00:02:15.760 align:middle line:84%
The MAC addresses are flat,
which enables portability

00:02:15.760 --> 00:02:18.580 align:middle line:84%
so you can move between
different networks,

00:02:18.580 --> 00:02:22.300 align:middle line:84%
whereas the IP address
space was hierarchical

00:02:22.300 --> 00:02:24.040 align:middle line:90%
and it's not really portable.

00:02:24.040 --> 00:02:29.560 align:middle line:84%
It depends on what IP subnet
the node is attached to.

00:02:29.560 --> 00:02:32.710 align:middle line:84%
So what the address resolution
or ARP protocol does

00:02:32.710 --> 00:02:36.940 align:middle line:84%
is it would determine an
interface's MAC address knowing

00:02:36.940 --> 00:02:38.750 align:middle line:90%
its IP address.

00:02:38.750 --> 00:02:42.060 align:middle line:84%
So this is basically
how it operates.

00:02:42.060 --> 00:02:43.720 align:middle line:90%
So I have all these hosts.

00:02:43.720 --> 00:02:49.550 align:middle line:84%
They have IP addresses and MAC
addresses assigned to them.

00:02:49.550 --> 00:02:52.390 align:middle line:84%
So this is done through the
usage of a table called the ARP

00:02:52.390 --> 00:02:53.140 align:middle line:90%
table.

00:02:53.140 --> 00:02:58.060 align:middle line:84%
For this, each IP node, so a
host or router on the network

00:02:58.060 --> 00:03:00.010 align:middle line:84%
would have this table,
and this would only

00:03:00.010 --> 00:03:01.480 align:middle line:90%
be the local network.

00:03:01.480 --> 00:03:03.940 align:middle line:84%
So we don't do this
over the internet.

00:03:03.940 --> 00:03:08.980 align:middle line:84%
The IP and MAC address
mappings for some land nodes

00:03:08.980 --> 00:03:12.250 align:middle line:84%
would basically appear like
IP address, MAC address,

00:03:12.250 --> 00:03:13.760 align:middle line:90%
and a time to live.

00:03:13.760 --> 00:03:17.860 align:middle line:84%
So this would be the time after
which the address mapping would

00:03:17.860 --> 00:03:22.130 align:middle line:84%
get forgotten, typically
set to about 20 minutes.

00:03:22.130 --> 00:03:27.070 align:middle line:84%
So let's go over some
of the usage of the ARP

00:03:27.070 --> 00:03:28.480 align:middle line:90%
protocol on the same LAN.

00:03:28.480 --> 00:03:30.790 align:middle line:84%
So suppose A wants
to send information

00:03:30.790 --> 00:03:34.900 align:middle line:84%
to B. B's MAC address
is not in A's ARP table.

00:03:34.900 --> 00:03:39.910 align:middle line:84%
So what would occur is A would
broadcast an ARP query packet

00:03:39.910 --> 00:03:42.160 align:middle line:90%
containing B's IP address.

00:03:42.160 --> 00:03:44.350 align:middle line:84%
It would send it out
to the broadcast MAC

00:03:44.350 --> 00:03:46.510 align:middle line:90%
address, which is all Fs.

00:03:46.510 --> 00:03:49.510 align:middle line:84%
All the nodes on the LAN
would receive that query.

00:03:49.510 --> 00:03:51.910 align:middle line:84%
B would receive that
ARP packet as well,

00:03:51.910 --> 00:03:56.410 align:middle line:84%
and it would reply to
A with B's MAC address.

00:03:56.410 --> 00:04:00.160 align:middle line:84%
So that would be sent
to A's MAC address

00:04:00.160 --> 00:04:03.280 align:middle line:84%
because A had attached its
MAC address in that broadcast

00:04:03.280 --> 00:04:04.110 align:middle line:90%
query.

00:04:04.110 --> 00:04:08.500 align:middle line:84%
A would then cache the IP to MAC
address pair in its ARP table

00:04:08.500 --> 00:04:12.290 align:middle line:84%
until that information
expired or became old.

00:04:12.290 --> 00:04:16.209 align:middle line:84%
So ARP is plug-and-play, so the
nodes do create their own ARP

00:04:16.209 --> 00:04:21.769 align:middle line:84%
tables without intervention
from the network administrator.

00:04:21.769 --> 00:04:25.040 align:middle line:84%
So let's walk through an
example of how this would work.

00:04:25.040 --> 00:04:28.690 align:middle line:84%
So let's suppose we want
to send information from A

00:04:28.690 --> 00:04:32.260 align:middle line:84%
to B through router R. And
we're going to focus on all the

00:04:32.260 --> 00:04:35.770 align:middle line:84%
addressing aspects here, both
the IP addressing and the MAC

00:04:35.770 --> 00:04:38.170 align:middle line:90%
addressing portions.

00:04:38.170 --> 00:04:42.520 align:middle line:84%
So let's assume that A knows
B's IP address already.

00:04:42.520 --> 00:04:45.410 align:middle line:84%
Let's also assume that A knows
the IP address of the first hop

00:04:45.410 --> 00:04:49.070 align:middle line:84%
router, which could have been
determined, say, with DHCP.

00:04:49.070 --> 00:04:52.480 align:middle line:84%
Assume A also knows
R's MAC address,

00:04:52.480 --> 00:04:55.780 align:middle line:84%
which it could have already
discovered through that ARP

00:04:55.780 --> 00:04:59.000 align:middle line:90%
process that we just discussed.

00:04:59.000 --> 00:05:02.960 align:middle line:84%
So what would happen is A
would create a message or an IP

00:05:02.960 --> 00:05:07.250 align:middle line:84%
datagram with its source
A and its destination B

00:05:07.250 --> 00:05:08.760 align:middle line:90%
using those IP addresses.

00:05:08.760 --> 00:05:12.140 align:middle line:84%
So we have the IP address for
A is the source IP address.

00:05:12.140 --> 00:05:16.940 align:middle line:84%
The IP address for B is
the destination IP address.

00:05:16.940 --> 00:05:20.150 align:middle line:84%
Then what would happen is it
would create a link-layer frame

00:05:20.150 --> 00:05:21.830 align:middle line:90%
with R's MAC address.

00:05:21.830 --> 00:05:24.080 align:middle line:84%
That's the router we
need to route through

00:05:24.080 --> 00:05:25.760 align:middle line:90%
as the destination address.

00:05:25.760 --> 00:05:33.860 align:middle line:84%
And then the frame would contain
the A to B IP layer message.

00:05:33.860 --> 00:05:36.080 align:middle line:84%
So what we can see
here is the source

00:05:36.080 --> 00:05:39.060 align:middle line:84%
MAC address has been
set to A's MAC address.

00:05:39.060 --> 00:05:41.210 align:middle line:84%
The destination MAC
address has been

00:05:41.210 --> 00:05:44.460 align:middle line:84%
set to the incoming
link of router R,

00:05:44.460 --> 00:05:46.850 align:middle line:84%
so we can see this
E6 starting here.

00:05:46.850 --> 00:05:49.730 align:middle line:90%


00:05:49.730 --> 00:05:52.220 align:middle line:84%
So that frame would
get sent from A to R

00:05:52.220 --> 00:05:57.470 align:middle line:84%
over this lower-layer protocol,
the link and physical layer

00:05:57.470 --> 00:06:00.160 align:middle line:90%
protocols.

00:06:00.160 --> 00:06:06.920 align:middle line:84%
When that's received
by the router,

00:06:06.920 --> 00:06:09.080 align:middle line:90%
it would remove the datagram.

00:06:09.080 --> 00:06:11.030 align:middle line:84%
It would see that the
information was intended

00:06:11.030 --> 00:06:15.410 align:middle line:84%
for it because its destination
MAC address had been set to it.

00:06:15.410 --> 00:06:18.860 align:middle line:84%
Then it would pass this
information up to the IP layer.

00:06:18.860 --> 00:06:23.780 align:middle line:84%
We'd see the destination
address as 22 repeated.

00:06:23.780 --> 00:06:27.170 align:middle line:84%
We know that needs to be routed
out through this outgoing link

00:06:27.170 --> 00:06:29.670 align:middle line:84%
after we've constructed
a routing table.

00:06:29.670 --> 00:06:33.560 align:middle line:84%
R would then forward this
datagram or this message

00:06:33.560 --> 00:06:38.690 align:middle line:84%
with the IP source
as A's, so leaving

00:06:38.690 --> 00:06:41.000 align:middle line:84%
the IP message
basically the same

00:06:41.000 --> 00:06:46.060 align:middle line:84%
and leaving the destination
as B's IP address.

00:06:46.060 --> 00:06:49.310 align:middle line:84%
R would then prefix
in front of that--

00:06:49.310 --> 00:06:51.965 align:middle line:84%
the link-layer frame information
with B's MAC addresses

00:06:51.965 --> 00:06:54.300 align:middle line:90%
as the destination address--

00:06:54.300 --> 00:06:57.560 align:middle line:84%
so that this frame would now
contain the A to B datagram.

00:06:57.560 --> 00:07:01.220 align:middle line:84%
So what we can see is
that the source address

00:07:01.220 --> 00:07:05.600 align:middle line:84%
is this incoming from
the perspective of B.

00:07:05.600 --> 00:07:08.900 align:middle line:84%
It's this interface on
the router's MAC address.

00:07:08.900 --> 00:07:12.980 align:middle line:84%
And the destination MAC address
is the MAC address of B.

00:07:12.980 --> 00:07:14.630 align:middle line:84%
So in this way, the
information could

00:07:14.630 --> 00:07:19.640 align:middle line:84%
get sent over to B from A. And
the addressing all the way down

00:07:19.640 --> 00:07:21.980 align:middle line:84%
to the link-layer would
have been accommodated.

00:07:21.980 --> 00:07:24.920 align:middle line:84%
B would then strip off the
link-layer header information

00:07:24.920 --> 00:07:29.270 align:middle line:84%
and pull out the IP
layer information.

00:07:29.270 --> 00:07:32.180 align:middle line:84%
So that summarizes the
way that ARP works.

00:07:32.180 --> 00:07:34.250 align:middle line:84%
And again, what this
would do is come up

00:07:34.250 --> 00:07:37.580 align:middle line:84%
with the mapping between IP
addresses and MAC address

00:07:37.580 --> 00:07:38.240 align:middle line:90%
pairs.

00:07:38.240 --> 00:07:40.340 align:middle line:90%
It does this in the ARP table.

00:07:40.340 --> 00:07:44.720 align:middle line:84%
When a packet needs to be sent,
it would consult the ARP table

00:07:44.720 --> 00:07:48.110 align:middle line:84%
so that it could look up
the actual MAC address

00:07:48.110 --> 00:07:49.285 align:middle line:90%
of the destination.

00:07:49.285 --> 00:07:50.660 align:middle line:84%
And then it would
encapsulate it.

00:07:50.660 --> 00:07:52.730 align:middle line:84%
So this, again,
just would be put

00:07:52.730 --> 00:07:55.850 align:middle line:84%
in front of the packet
header of the IP header,

00:07:55.850 --> 00:07:59.340 align:middle line:90%
say, for the link-layer header.

00:07:59.340 --> 00:08:02.660 align:middle line:84%
So if we didn't have the
IP address in the table,

00:08:02.660 --> 00:08:05.660 align:middle line:84%
what would occur is the
sender would request,

00:08:05.660 --> 00:08:07.190 align:middle line:90%
who has that IP address?

00:08:07.190 --> 00:08:09.980 align:middle line:84%
The receiver would respond
back, and then the sender

00:08:09.980 --> 00:08:11.840 align:middle line:84%
would cache that
result. So there

00:08:11.840 --> 00:08:15.620 align:middle line:84%
are more details for
this link-layer protocol,

00:08:15.620 --> 00:08:19.460 align:middle line:84%
but it's necessary to be
able to connect things up

00:08:19.460 --> 00:08:23.050 align:middle line:84%
and to bootstrap
the IP connectivity.