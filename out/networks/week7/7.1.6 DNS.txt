So in our discussion of DNS, we're next going to cover some of the challenges and issues that can arise in making the domain name system work. The first challenge is just reliability. We've mentioned that the DNS servers are replicated in. The reason for this is, is that if we query one of these, the name service should be available, at least one of the replicas is up. The other reason for this would be for performance. So that queries could get load balance between different replicas.
So frequently you DP is used for performing these queries.
 However, I will get into how UDP Works in more depth than some future lectures, but i u d p is not reliable. So we would need to provide some reliability mechanisms on top of you. T P if we're going to use that the DNS specification could support TCP as well, but it's not always implemented.
 Other reliability concerns would be to try alternate server. So if there's a time out as a common mechanism to do that is so it's called exponential back off. If you're retrying the same server see basically weight exponentially increasing amounts of time to try to retry the same server, maybe query alternate Alternatives if a timeouts occurred.
 The other issue that could arise, if we have the same identifier for all the queries. We don't really care which server would respond.
 So how can we insert research, records into DNS? How do we add things to? Let's say, we created a startup called FUBAR. Just called and we want to register domain name like food or something. We get a block of address space from an IP ASP. So we'd be able to set up say a web server. Then we need to register that domain name with a domain name, registrar. So Network Solutions, as one example, we provide the registrar with the names and IP addresses of the authoritative name server within the organization. Then the registrar would insert. These resource record pairs into the Comm, top-level domain name server, right? So, this is why the process of registering a domain name. Takes a little bit of time, these updates need to occur. So, for example, that what this would look like, say fubar.com would be an alias for
 Did a Swan, Dive fubar.com and then the DNS one. Fubar.com would correspond to a particular, a name record or this IP address? Okay, so, that's what we'll get an insert it in. So, that now in the cam, top level domain name, server gets a query for fubar.com at knows how to respond to it. So it give it back that IP address. Then in your authoritative, serve for you to put in the a couple records for where the web server would be, maybe a male record for what the mail server is. If you're going to support mail on your own domain name, showing this it go into that host file on your authoritative server. So unless fubar.com DNS one server.
 So they're a couple more pieces to actually get that set up to her. You need to provide the reverse pointer binding so that we could map from the IP address to the domain name to go the opposite direction. So then normally do that reversing process. So a problem in doing this, as you don't run that domain name that domain name server. So this just has to do with you using a different block. So, in practice how that's done for their reverse lookups is the ISP would run this for you, but it's now more of a headache to keep this information up to date. And this is why the reverse lookups don't always work properly.
 So some other challenges that would arise or just security. So, what security issues could come up in domain names while we have a lot of degrees of freedom here. So, let's go through a couple possible examples. So, One initial problem is, since you're sitting saying Starbucks and browsing the web. How does your laptop find google.com?
 Well, it's going to ask the local domain name server. That would be assigned probably with DHCP. But that server is going to be run by Starbucks. Probably your contractor in reality and they could return anything they want. So this is a wide opening for a man-in-the-middle attack. That would forward your query to Google, get the reply, but then they could change anything they want any other direction. So if it wasn't google.com, it was your bank. Instead. This could be a big problem. So how do you know you're going to get the correct date on? When you do one of these queries, you can't really if you're using HTTP, that would help but the contractor or whoever's running that local domain name. Server could still lie and send you somewhere else, but there are some some security extensions this DNS SEC protocol that hopefully would fix some of this but this
 Still isn't completely widely deployed.
 A similar type of security problem is called Cash poisoning within this. If there's a bad guy that controls a name server for safe fubar.com. If you receive a request to results www.fubar.com, you could reply back with some additional information and lie to the user and instead direct anything that's intended for google.com to say a particular server that they control. So one of the issues here. So this would be that the computer run by the bad guy and not the actual google.com server. An issue that kind of rice with this, and why this can be difficult to detect is that the evidence of the attack can disappear very quickly, based on, that time to live field length. So say, a few seconds later. So, again, if it's banking information, let's say again. Google.com, but your bank, you could rout someone's traffic and
 For their Bank to a server that they control.
 So, how would you get them to look up a particular website in the first place? So, any domain name server could do that, right? To any of them, could lie with those sections with the Serta, Perfect records to send traffic to an intended, destinations. Well, there's some things you could do, you could send a request to their mail server, but then their mail server would look up this address. So that's one way. You could trick their name server into requesting this invalid domain name. Look up that we've been poison the cash, you could send them an email with a link in there to a particular URL if they clicked on it. Now, you could have perhaps poison the cash as well.
 With a single compromised nameserver, we could also lie about Pointer records of these reverse mapping. So if we are in control of managing these and you'll occasionally, see this happen where those are widespread DNS cache poisoning attack and all the traffic intended for something. It's Robin somewhere else. It's not too,, but it does happen on occasion.
 So let's look a little bit more cash poisoning. So suppose the bad guys at Starbucks and they can sniff for maybe gas, the identification field of the local server used in its next request. Remember the ID field within DNS correspondent to what request and reply are going to be linked together. So if they ask the local server for recursive, look up of google.com, they could then locally spoof the subsequent reply from the correct domain name server using that ID field, if they can figure out what it is, then if the bogus reply gets there sooner and it probably would because it's on the local network. The local server would cash the bogus reply. So now every future Starbucks customer would be served that bogus answer out of the local servers cash. And if you did, this probably would put in a large time to live so that it would cause this effect for a long time.
 So whenever anybody browse to a particular websites, a google.com, instead of a really going there, it would be routed to some server that's controlled by that person. For example.
 So it's just summarize what we've seen about DNS. Now we talked about some of the challenges just now. But what is DNS? Just remind you. It's a distributed and hierarchical database that needs to get replicated all over the world in Direction. Lets us use these human-readable names and also gives us the ability to change the underlying IP addresses that uses cashing to improve performance other that can lead to some security issues. And then we saw a little bit of how the DNS protocol would work using the big utility, the security issues that we've discussed the cash poisoning and what not arise due to not having any form of authentication. So we don't know if the reply is coming from the correct or legitimate Source. We don't know. If the truth is being told, there could be malicious information. Inserted. There could be bystanders that spoofed information. If they pick up with the DNS message, identifiers are
 And then playing with the the various cashing time to live life time to add power to these attacks. Either make them gone for a long time or to make them disappear quickly. So you don't know that they occurred.
 So that pretty much summarizes how the domain name system works. And again, the key reason we have, this is so that we don't have to remember IP addresses. And instead we can use the Mane human-readable names like google.com or vanderbilt.edu, instead of having to remember a long number corresponding to those organizations computer systems that we're trying to interact with.