00:00.300 --> 00:05.400
So now that we've introduced the reason for why we have the DNS system

00:05.400 --> 00:13.500
Let's talk a little bit about how it works and how we can work through this mechanism of mapping demonic names to IP addresses

00:13.500 --> 00:18.000
So just a few properties of DNS to start with

00:18.000 --> 00:21.200
So it is a hierarchical namespace divided into zones

00:21.200 --> 00:30.100
The new zones are distributed over a collection of DNS servers and wish us some examples of the shortly to clarify what those phones would mean

00:30.100 --> 00:32.500
losing a hierarchy of DNS servers

00:32.500 --> 00:38.900
Are there are some root DNS servers that are hardwired so that other service can connect to them

00:38.900 --> 00:43.500
They're also top-level domain or Tod servers and then finally

00:43.500 --> 00:43.900
they're all

00:43.900 --> 00:44.800
So authoritative

00:44.800 --> 00:45.800
DNS servers

00:47.200 --> 00:50.500
So where does the translation get performed

00:50.500 --> 00:59.500
So there can also be local DNS servers and with resolver software that would perform that look up to map a name into an IP address

00:59.500 --> 01:04.900
So it's like a little bit of how DNS would be organized and what it would look like

01:04.900 --> 01:06.500
roughly

01:06.500 --> 01:09.100
It would look like this for some example

01:09.100 --> 01:09.700
domains

01:09.700 --> 01:16.800
So we would have a root server then we would have top-level domain servers

01:16.800 --> 01:21.200
These are correspond to like come to you

01:21.200 --> 01:21.800
Org

01:21.800 --> 01:24.400
There could be those are generic remains

01:24.400 --> 01:27.000
There are many other domain such as country domains

01:27.000 --> 01:30.000
There may be other special-purpose demands like our pot

01:30.000 --> 01:32.800
So then Within These

01:32.800 --> 01:36.700
if we wanted to refer to a particular website

01:36.700 --> 01:38.600
let's say bar

01:38.600 --> 01:39.000
Edu

01:39.000 --> 01:42.100
it would then be organized below this

01:42.100 --> 01:47.200
Then if we had further subdomains or further prefixes in front

01:47.100 --> 01:57.200
Maybe we have one of these servers located on the west coast and other on the east coast and then Within These we can have some some further break down into this hierarchy

01:57.200 --> 02:03.800
So for example to figure out this name the my Dottie Stuttgart at you

02:03.800 --> 02:09.500
so we would read this from bottom to top following this tree

02:11.200 --> 02:12.400
brats and similarly

02:12.400 --> 02:13.700
for the other example

02:13.700 --> 02:15.200
so terminology wise

02:16.300 --> 02:18.900
The committee you or get such a servers

02:18.900 --> 02:23.100
These are called the top level domain servers

02:23.100 --> 02:28.000
or tlds are at the domain names when they are designated

02:28.000 --> 02:29.900
As that top-level entry

02:29.900 --> 02:31.600
It would be the top level domain name

02:32.600 --> 02:33.300
So where

02:33.300 --> 02:38.000
Where is the DNS root servers are so one is located in Virginia

02:38.000 --> 02:40.100
But how do we make it scale

02:41.100 --> 02:43.300
So there really is not just one

02:43.300 --> 02:44.700
They're 13

02:44.700 --> 02:45.400
Roughly

02:45.400 --> 02:47.700
the number of these can vary slightly

02:47.700 --> 02:51.700
but you can refer to the server

02:51.700 --> 02:55.100
Org website to see what were their allocated

02:55.100 --> 02:57.200
They're typically labeled a through M

02:57.200 --> 02:59.600
And this will help scale better

02:59.600 --> 03:02.000
If we geographically distributed all these servers

03:02.000 --> 03:02.800
So

03:02.800 --> 03:05.100
for example on the East Coast

03:05.100 --> 03:09.200
there would be several from organizations like verisign

03:09.200 --> 03:09.800
When my

03:09.800 --> 03:11.000
when is run by NASA

03:11.000 --> 03:15.900
then another country's there would be other DNS root servers

03:15.900 --> 03:18.500
So this way to help us scale a bit better

03:18.500 --> 03:20.000
However

03:20.000 --> 03:25.600
now we need to perform replication so that all of these servers will contain the same information

03:25.600 --> 03:26.700
so that

03:26.700 --> 03:29.300
if we look up an IP address or rather

03:29.300 --> 03:32.100
we look up a domain name to figure out what the IP address is

03:32.100 --> 03:35.200
no matter which one of these root servers will query

03:35.200 --> 03:36.900
we need to get back the same IP address

03:38.700 --> 03:41.800
That would correspond to that domain name

03:43.400 --> 03:43.900
So

03:43.900 --> 03:46.200
the tldr top-level domain servers

03:46.200 --> 03:46.600
Again

03:46.600 --> 03:47.400
these would host

03:47.400 --> 03:49.000
The generic domains country-specific

03:49.000 --> 03:50.000
domains

03:50.000 --> 03:51.200
Are there special domains

03:51.200 --> 03:54.700
Like arpa is a typically be managed professionally by companies

03:54.700 --> 03:56.100
Offer example

03:56.100 --> 03:57.100
Network Solutions

03:57.100 --> 03:59.200
maintain servers for cam

03:59.200 --> 04:02.200
educause maintain servers for EDU

04:03.600 --> 04:08.200
The last type of DNS server that we haven't discussed yet or authoritative DNS servers

04:08.200 --> 04:11.100
These would provide public records for hosted

04:11.100 --> 04:12.500
a particular organization

04:12.500 --> 04:15.500
These typically could be private records

04:15.500 --> 04:16.200
So

04:16.200 --> 04:22.800
if you want to refer to a printer by a name and not part of a sort of the original designers attend

04:22.800 --> 04:24.800
so it may not publish all of these around

04:24.800 --> 04:27.600
So this should be things for like organization

04:27.600 --> 04:28.100
Servers

04:28.100 --> 04:29.000
are other local things

04:29.000 --> 04:33.200
So these could be maintained locally or by a service provider

04:34.900 --> 04:36.400
Sabes quien es work

04:36.400 --> 04:43.300
So you typically have a local DNS server on your located near and toast that would connect to it

04:43.300 --> 04:51.500
Then the local hosts would be configured with that local server or would learn the server through a mechanism like DHCP

04:51.500 --> 04:52.900
which were going to talk about later

04:52.900 --> 04:53.700
So

04:53.700 --> 04:57.400
he'd know where the server is located and what its IP address is

04:57.400 --> 05:01.300
So we could talk to it the client application

05:01.300 --> 05:11.000
then it would extract the server name from a URL and do a get name to trigger the resolution of a domain name

05:11.000 --> 05:22.700
Then a server application would pull out the client IP address from a saw cutter from packets that are incoming in could translate that back into a name if necessary

05:22.700 --> 05:24.500
So it's just a little example

05:24.500 --> 05:26.700
So let's suppose a host

05:26.700 --> 05:29.000
She is Polly

05:29.000 --> 05:31.800
Edu wants to get the IP address for Gaia

05:31.800 --> 05:33.600
CS at UMass study to you

05:33.600 --> 05:34.700
So this is the request

05:34.900 --> 05:38.800
and this is the host

05:38.800 --> 05:40.800
we want to figure out the IP address for

05:42.000 --> 05:47.800
So the requesting horse would carry the local DNS server to say a DNS stop Polly

05:47.800 --> 05:48.100
Edu

05:48.100 --> 05:51.800
That could query the root DNS server to say

05:51.800 --> 06:02.000
Where is this located after responding back with what top-level domain name server to look

06:02.000 --> 06:07.100
The edu information up at a response back from that

06:09.400 --> 06:16.100
Then after we figured out what the authoritative DNS server is

06:16.100 --> 06:20.700
for this particular host that we're trying to figure out the IP address of

06:20.700 --> 06:26.600
we would query the authoritative DNS server at that organization

06:26.600 --> 06:30.000
It would then respond back to the local DNS server

06:30.000 --> 06:34.200
and then finally send the information to the original requesting host

06:35.500 --> 06:36.800
That's roughly how it would work

06:36.800 --> 06:37.400
So

06:37.400 --> 06:40.000
how did we know the routes server IP address

06:40.000 --> 06:40.900
Well

06:40.900 --> 06:41.700
that's hard to code

06:41.700 --> 06:41.800
it

06:41.800 --> 06:42.400
essentially

06:42.400 --> 06:44.500
so there can be some issues with that

06:44.500 --> 06:46.400
If it does change

06:46.400 --> 06:50.700
if the IP addresses have the root server service change their own

06:50.700 --> 06:53.800
typically be some major announcements like that

06:53.800 --> 06:54.200
For this

06:54.200 --> 06:55.100
Remember

06:55.100 --> 06:56.300
they're labeled a through M

06:56.300 --> 06:59.200
So if the D route changed its IP address there

06:59.200 --> 07:00.500
be announcements about this

07:00.500 --> 07:01.500
All right

07:01.500 --> 07:08.400
so that the correct information could get hard-coated appropriately so that these look up switch would proceed and work properly

07:09.900 --> 07:12.900
There are a couple different kinds of queries

07:12.900 --> 07:17.900
What we saw an example of essentially was sort of a recursive query sweet ass

07:17.900 --> 07:20.200
the server to figure out the answer for it

07:20.200 --> 07:24.300
So this would look like that request one in response to 8

07:24.300 --> 07:27.800
So I'd say the host would say to its local

07:27.800 --> 07:29.000
DNS server find me

07:29.000 --> 07:35.300
this IP address for this host and alternative mechanism for how that could work is through an iterative query

07:35.300 --> 07:39.900
where you could ask the local DNS server

07:39.900 --> 07:42.800
who the next server is to ask

07:42.800 --> 07:50.900
So that all of these other request response Paris essentially would be at heard of

07:50.900 --> 07:51.600
So

07:51.600 --> 07:53.600
this local DNS server

07:53.600 --> 07:54.900
Had asked the routine s server

07:54.900 --> 07:55.100
Who do

07:55.100 --> 07:55.300
I ask

07:55.300 --> 08:02.900
And then the TLD Cerberus would ask next and then it asked the authoritative DNS server and then got back with this response

08:04.000 --> 08:10.200
So sometimes we also need to go the other direction from an IP address to a corresponding hostname

08:10.200 --> 08:11.200
So

08:11.200 --> 08:13.500
the address is already have a natural higher key

08:13.500 --> 08:18.800
That's a little bit similar looking to the dots between domain name the portions

08:18.800 --> 08:24.300
but the squad notation has the most significant higher key elements on the left

08:24.300 --> 08:26.300
the 12 appearing here

08:26.300 --> 08:31.100
while CNN.com Hazard on the rights and that would be the cam top-level domain

08:31.100 --> 08:37.100
So an idea would be to reverse the quads and then start the look up in DNS

08:37.100 --> 08:39.500
So we'll go over little bit of how that would work

08:39.500 --> 08:44.000
But basically the way this should work under a particular top-level domain

08:44.000 --> 08:48.500
It would look something like this where you can see we've flipped

08:48.500 --> 08:54.000
We just reverse this string corresponding to the IP address and then

08:55.800 --> 09:00.000
A prefix stepped on this convention say

09:00.000 --> 09:04.100
for something that's inside of the carpet top-level domain

09:06.000 --> 09:06.500
All right

09:06.500 --> 09:10.600
and pictorial a with that reverse type of look up would be something like this

09:10.600 --> 09:18.700
Where the if we were to read now from the bottom

09:18.700 --> 09:21.600
We would see that encoding of zero is not shown here

09:21.600 --> 09:22.600
but the 56th

09:22.600 --> 09:23.400
and the 34th

09:23.400 --> 09:27.200
and the 12, then the end address than are at the top level domain

09:28.400 --> 09:39.400
So that all summarize a bit about the high-level overview of how DNS works and the next we're going to talk about a few more details in terms of how the DNS system

09:39.400 --> 09:45.300
Overall operate sensor performance mechanisms as well as some challenges that arise