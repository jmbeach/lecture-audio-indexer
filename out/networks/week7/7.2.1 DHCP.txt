The next topic World discuss is how we assign IP addresses. So how do we first come up with an IP address for a particular interface? So, for particular computer, so there are a few mechanisms for this. Typically, it's done through a bootstrap anger startup process. There are two mechanisms will discuss that accomplish. This one is called DHCP, which anode wood used to learn a ton configuration parameters. There is another process to learn the link layer, address to serve other nodes, which is done with ARP. So, first talk primarily about DHCP.
So for example, what IP address, if we've added a new host to a network, what IP address should that hose to use what DNS server should it use, how can it disambiguation, which destinations are local versus on some external network? How could we address to those destinations if they are local? And then how do we send packets out to remote destination? Typically through some Gateway router. So those are the problems were going to try to address. So we'd prefer not to just in code all of this information manually, that would be one solution, but it'll be pretty brittle and it wouldn't scale. Well, so DHCP stands for the dynamic host configuration protocol, and with this each and host, would learn how to send Pockets. So basically it would learn IP addresses, DNS servers, Gateway node, to send information out through two other networks and what it what the address is our local.
In the address resolution protocol ARP. This is for a local destinations. This would discover the mapping between IP addresses that are used at the network layer and Mac address for this, which are used at the link layer. So a lower-level addressing.
 So for both Protocols are a few key ideas out of the first is broadcasting. So if you don't know something, shout to get the answer, the broadcast query would be sent to All hosts in the local area networks, and the land that you're connected to and this is what you do. If you don't know how to identify the correct other hosts cashing will also be incorporated in these protocols, to remember a past information for a while so store what you learn to reduce overhead and having to send too many requests for information and also to store your own address and other hosts addresses.
 So this casting process is also a form of soft States. We'd eventually, forget the past. So you'd associate sometime to live with that information. And then either refresher discard information if it times out and this is important for robustness, in case of unpredictable changes.
 So, what's the MAC address versus an IP address? So the MAC address is something that's hard-coded. Whereas the IP addresses is something that would be configured or learned dynamically. So, you can sort of, think of a MAC address like a social security number and an IP address, like a postal mailing address number. So, you can if you move probably you keep the same social security number, but you might wind up with a new postal address Mac addresses or a flat namespace of 48 bits. So that typically be written in Acts and looks something like this.
 Are they be portable and they could stay the same as a host would move around and this is what to use that the link later to get packets between interfaces on the network. And contrast, as we've already seen IP addresses, are hierarchical namespace using 32 bits. So that dotted quad notation is, wouldn't necessarily be portable. It would depend on where the host is attached. But this is what to use for doing the network layer, the internet level routing to figure out destination, IP subnet.
 So the bootstrap problem is that when a host gets connected to a network or turns on, it doesn't have an IP address yet. So it doesn't know what source address to use to send information out using the IP protocol.
 It also doesn't know who to ask for an IP address. So what it'll do it first to be able to figure out what destination? Addresses would make sense. And what's worse address. It's been a sign. Is it would send out a broadcast to discover a server that can help? So I broadcast out of server Discovery message to this special Mac address, then the server or possibly servers running. Say, DHCP would respond back offering an address.
 So the response from the DHCP server, I would consist of an offer this, it have configuration parameters like the proposed IP address mask information, a Gateway router IP address DNS server IPs at cetera. It also include a lease time, which should be the duration for which that IP address would remain valid. Several servers could respond. There might be multiple DHCP server is on the same broadcast network. They could each respond, but you should probably just pick one of them. Otherwise, your IP address wouldn't be unique. The client would send the request act when the parameters back to accept an offer and the DHCP server would respond with an acknowledgement and the other DHCP server. So if there are multiple offers, they would see that they weren't chosen.
 The roughly. This is what I run of the protocol would look like a DHCP. Discover get sent to sent out through the broadcast mechanism. So that all computers are all things attached to the network. It would offer an IP address Gateway information at cetera to the client. If the client could broadcast back sending a request that, okay, I'll take that and then the DHCP server would acknowledge back. So why do we incorporate a least? I'm so, so that information can be forgotten. So the client could request release of the IP address to get a new IP address where this could occur if the client shuts down. However, the client might not release the address. So I suppose the computer crashes. If you don't release the address and have a timeout then that address would have been allocated forever and we want to avoid that scenario. So there can be some performance trade-off.
 With these least. I'm, so if it's a short leash time, the address that's been allocated what time out quickly. But if it's long, you would avoid the silver had a frequent renewal, but it would increase potentially the chance of running out of IP addresses to another host has information like what the IP addresses that it's been assigned with the network mask is or what the subnet information is. What a Gateway is and what DNS servers are. So now it could send out packets to other IP address, but how come the local or can we use the local network to accomplish this?
 So how would I know to figure out if it's sending something locally versus remotely. So there's two cases for this, right? If the destinations on the local network, you can go ahead and address it directly. If it's not, then you need to figure out where to send it through, which typically would be the Gateway router.
 So if it's on the local network, you can determine that by comparing the mask.
 That's been assigned. So if you take the destination address and can jump it with the mask and then if you get back the same value as when the host's own addresses mask, then you know, it's local. So for example, if this host wanted to send something to this host and it took the mask of this and make it back something like 1.2.3, and it would know that. Okay, the. 7 is awesome. The same local network.
 So if it's a remote, though, we need to look up the first stop on the local routing table. So that would be whatever. Gateway had been assigned. So then we would do the same thing for the local case for this Gateway rather than the ultimate ultimate to add destination IP address for the local case. We need to figure out the destinations Mac address. And the reason that we would need to do that is because sending packets over a link, the network interface cards on the understand Mac addresses. So that destination IP address needs to get translated into a MAC address. And what would occur is the IP packet would get encapsulated inside of a link level frame, right? So basically, we would prefix in front of it the link level information as we've seen some other earlier examples of