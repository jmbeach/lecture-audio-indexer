WEBVTT

1
00:00:00.000 --> 00:00:00.455 align:middle line:90%


2
00:00:00.455 --> 00:00:02.080 align:middle line:84%
We're now going to
go ahead and wrap up

3
00:00:02.080 --> 00:00:04.813 align:middle line:84%
our coverage of the Java
Completable Futures Framework

4
00:00:04.813 --> 00:00:06.730 align:middle line:84%
by talking about some
of the enhancements that

5
00:00:06.730 --> 00:00:08.790 align:middle line:90%
have been added recently--

6
00:00:08.790 --> 00:00:11.860 align:middle line:84%
recently being relative-- been
added since Java 8 came out.

7
00:00:11.860 --> 00:00:14.920 align:middle line:84%
So that could be a number
of years at this point.

8
00:00:14.920 --> 00:00:18.810 align:middle line:84%
So Java 9 provided a bunch
of enhancements to the Java 8

9
00:00:18.810 --> 00:00:21.453 align:middle line:84%
Completable Future framework,
and later versions of Java

10
00:00:21.453 --> 00:00:22.870 align:middle line:84%
have also added a
few more things.

11
00:00:22.870 --> 00:00:27.160 align:middle line:84%
But I wanted to focus on
these four properties most.

12
00:00:27.160 --> 00:00:30.640 align:middle line:84%
One of the things is you can
now have a defaultExecutor

13
00:00:30.640 --> 00:00:33.280 align:middle line:84%
method that will return
the defaultExecutor used

14
00:00:33.280 --> 00:00:35.080 align:middle line:90%
if you don't specify one.

15
00:00:35.080 --> 00:00:37.930 align:middle line:84%
Before you would always default
to the common ForkJoinPool,

16
00:00:37.930 --> 00:00:40.480 align:middle line:84%
but now you can override
that in subclasses

17
00:00:40.480 --> 00:00:42.890 align:middle line:90%
to give different behaviors.

18
00:00:42.890 --> 00:00:44.920 align:middle line:84%
There's a method
called completeAsync,

19
00:00:44.920 --> 00:00:48.108 align:middle line:84%
which can basically be the
async version of complete,

20
00:00:48.108 --> 00:00:49.900 align:middle line:84%
and it will complete
the Completable Future

21
00:00:49.900 --> 00:00:54.110 align:middle line:84%
asynchronously by using whatever
value is given by a supplier.

22
00:00:54.110 --> 00:00:57.220 align:middle line:84%
So you can leave that
as a runtime decision.

23
00:00:57.220 --> 00:01:00.480 align:middle line:84%
We'll actually look and see how
that code works in a second.

24
00:01:00.480 --> 00:01:03.510 align:middle line:84%
There's a very interesting
method called orTimeout

25
00:01:03.510 --> 00:01:07.500 align:middle line:84%
which will ensure that a
Completable Future finishes

26
00:01:07.500 --> 00:01:11.460 align:middle line:84%
within a certain time, and
if it doesn't, then a timeout

27
00:01:11.460 --> 00:01:13.045 align:middle line:90%
exception will be thrown.

28
00:01:13.045 --> 00:01:15.170 align:middle line:84%
And then the final method
we're going to talk about

29
00:01:15.170 --> 00:01:17.090 align:middle line:84%
is called
completeOnTimeout, which

30
00:01:17.090 --> 00:01:20.270 align:middle line:84%
says if the Completable Future
doesn't finish within a given

31
00:01:20.270 --> 00:01:24.950 align:middle line:84%
time, return this value
and use it as the value,

32
00:01:24.950 --> 00:01:29.550 align:middle line:84%
rather than waiting past
the time-out period.

33
00:01:29.550 --> 00:01:33.930 align:middle line:84%
Let's show how we can apply
orTimeout and completeOnTimeout

34
00:01:33.930 --> 00:01:34.980 align:middle line:90%
to a simple program.

35
00:01:34.980 --> 00:01:36.507 align:middle line:90%
It's actually kind of fun.

36
00:01:36.507 --> 00:01:37.840 align:middle line:90%
And you can take a look at this.

37
00:01:37.840 --> 00:01:43.050 align:middle line:84%
I have a variant of the program
implemented in my ex27 folder

38
00:01:43.050 --> 00:01:44.550 align:middle line:90%
in my GitHub account.

39
00:01:44.550 --> 00:01:48.420 align:middle line:84%
This example asynchronously
performs web services,

40
00:01:48.420 --> 00:01:52.690 align:middle line:84%
or emulated web services,
within a bounded amount of time.

41
00:01:52.690 --> 00:01:56.760 align:middle line:84%
And what it does is it first
tries to asynchronously find

42
00:01:56.760 --> 00:02:02.860 align:middle line:84%
the best price for a flight
from London to New York City.

43
00:02:02.860 --> 00:02:05.475 align:middle line:84%
And that, of course, will
use the defaultExecutor

44
00:02:05.475 --> 00:02:06.850 align:middle line:84%
which is the common
ForkJoinPool,

45
00:02:06.850 --> 00:02:11.220 align:middle line:84%
because [INAUDIBLE] supply async
with no executor parameter.

46
00:02:11.220 --> 00:02:13.815 align:middle line:84%
Then we also simultaneously
go on asynchronous

47
00:02:13.815 --> 00:02:16.612 align:middle line:84%
to try to find the
latest exchange rate.

48
00:02:16.612 --> 00:02:18.570 align:middle line:84%
So we want to find out
what's the exchange rate

49
00:02:18.570 --> 00:02:21.120 align:middle line:90%
for, say, pounds to dollars?

50
00:02:21.120 --> 00:02:24.790 align:middle line:84%
And that will also
run asynchronously.

51
00:02:24.790 --> 00:02:28.850 align:middle line:84%
If it turns out that that
exchange rate call takes

52
00:02:28.850 --> 00:02:31.610 align:middle line:84%
longer than 2
seconds, we're just

53
00:02:31.610 --> 00:02:33.360 align:middle line:90%
going to give the default rate.

54
00:02:33.360 --> 00:02:37.100 align:middle line:84%
So that's the
completeOnTimeout method.

55
00:02:37.100 --> 00:02:39.992 align:middle line:84%
When both of those
completable futures complete--

56
00:02:39.992 --> 00:02:42.575 align:middle line:84%
when we know the best price and
we know what the exchange rate

57
00:02:42.575 --> 00:02:44.840 align:middle line:84%
is, which could be the
default if it timed out--

58
00:02:44.840 --> 00:02:49.890 align:middle line:84%
we're then going to go ahead and
convert the dollars to pounds.

59
00:02:49.890 --> 00:02:52.780 align:middle line:90%
That's what convert does.

60
00:02:52.780 --> 00:02:56.730 align:middle line:84%
We then put the
orTimeout method in here,

61
00:02:56.730 --> 00:03:00.060 align:middle line:84%
and that basically says
throw a timeout exception

62
00:03:00.060 --> 00:03:03.180 align:middle line:84%
if everything you just did
takes longer than 3 seconds--

63
00:03:03.180 --> 00:03:05.430 align:middle line:84%
in particular if it took
longer than 3 seconds

64
00:03:05.430 --> 00:03:08.910 align:middle line:84%
to find the best price,
because the time to find

65
00:03:08.910 --> 00:03:12.590 align:middle line:84%
the exchange rate will
be bounded by 2 seconds.

66
00:03:12.590 --> 00:03:15.500 align:middle line:84%
When this completes,
no matter what

67
00:03:15.500 --> 00:03:17.720 align:middle line:84%
happens, whether we had
an exception or not,

68
00:03:17.720 --> 00:03:19.730 align:middle line:84%
we're going to go out
and see whether or not

69
00:03:19.730 --> 00:03:20.757 align:middle line:90%
we had an exception.

70
00:03:20.757 --> 00:03:22.340 align:middle line:84%
If we did not have
an exception, we'll

71
00:03:22.340 --> 00:03:26.552 align:middle line:84%
print the amount of
the price in pounds.

72
00:03:26.552 --> 00:03:28.010 align:middle line:84%
And if an exception
occurred, We'll

73
00:03:28.010 --> 00:03:31.700 align:middle line:84%
print out what the exception
was-- which will undoubtedly

74
00:03:31.700 --> 00:03:33.500 align:middle line:90%
be Timeout exception.

75
00:03:33.500 --> 00:03:37.370 align:middle line:84%
And the program itself that
you can run artificially

76
00:03:37.370 --> 00:03:40.460 align:middle line:84%
puts in timeouts
that are random.

77
00:03:40.460 --> 00:03:41.930 align:middle line:90%
So sometimes this will work.

78
00:03:41.930 --> 00:03:44.673 align:middle line:84%
Sometimes the exchange
rate will time out.

79
00:03:44.673 --> 00:03:46.340 align:middle line:84%
Sometimes the whole
thing will time out.

80
00:03:46.340 --> 00:03:48.230 align:middle line:84%
Sometimes everything
will work fine.

81
00:03:48.230 --> 00:03:51.260 align:middle line:84%
And so it's fun to run it, I
think if you run the program,

82
00:03:51.260 --> 00:03:54.033 align:middle line:84%
by default, it runs for
100 iterations or something

83
00:03:54.033 --> 00:03:55.700 align:middle line:84%
with random timeouts,
and you can really

84
00:03:55.700 --> 00:03:58.368 align:middle line:84%
see how the timeout
mechanisms work.

85
00:03:58.368 --> 00:03:59.910 align:middle line:84%
Of course, in order
for this to work,

86
00:03:59.910 --> 00:04:04.110 align:middle line:84%
you need to have Java 9 or
beyond, because otherwise

87
00:04:04.110 --> 00:04:10.223 align:middle line:84%
there's no support for orTimeout
or completeOnTimeout in Java 8.

88
00:04:10.223 --> 00:04:11.890 align:middle line:84%
The last thing I want
to talk about here

89
00:04:11.890 --> 00:04:16.269 align:middle line:84%
is showing how to apply
the completeAsync method

90
00:04:16.269 --> 00:04:18.860 align:middle line:90%
to our big fraction example.

91
00:04:18.860 --> 00:04:22.135 align:middle line:84%
So there's a method
called testFractionMult

92
00:04:22.135 --> 00:04:26.020 align:middle line:84%
iplicationCompleteAsync in
the ex8 folder in my GitHub

93
00:04:26.020 --> 00:04:26.865 align:middle line:90%
account.

94
00:04:26.865 --> 00:04:28.240 align:middle line:84%
And you can see
what this does is

95
00:04:28.240 --> 00:04:32.410 align:middle line:84%
it makes a string builder to
hold the intermediate results.

96
00:04:32.410 --> 00:04:36.850 align:middle line:84%
We then go ahead and define
a pair of big fractions.

97
00:04:36.850 --> 00:04:39.620 align:middle line:84%
We then create a completable
future that's empty.

98
00:04:39.620 --> 00:04:41.200 align:middle line:90%
So it has nothing to do yet.

99
00:04:41.200 --> 00:04:44.290 align:middle line:84%
We haven't given it
any computations.

100
00:04:44.290 --> 00:04:46.537 align:middle line:84%
We call a method
known as thenRun.

101
00:04:46.537 --> 00:04:48.370 align:middle line:84%
We haven't really talked
much about thenRun,

102
00:04:48.370 --> 00:04:50.037 align:middle line:84%
because it doesn't
get used a whole lot,

103
00:04:50.037 --> 00:04:51.820 align:middle line:84%
but this is a good
place to use it.

104
00:04:51.820 --> 00:04:55.540 align:middle line:84%
thenRun registers an
action that appends

105
00:04:55.540 --> 00:04:58.090 align:middle line:90%
a string when it's called.

106
00:04:58.090 --> 00:04:59.680 align:middle line:84%
And in this particular
case, thenRun

107
00:04:59.680 --> 00:05:01.810 align:middle line:84%
will be called in
the calling thread.

108
00:05:01.810 --> 00:05:04.300 align:middle line:84%
And when thenRun is
called, it will go ahead

109
00:05:04.300 --> 00:05:07.930 align:middle line:84%
and append the string
completeAsync result

110
00:05:07.930 --> 00:05:11.680 align:middle line:90%
= to the string buffer.

111
00:05:11.680 --> 00:05:14.620 align:middle line:84%
We then go ahead and
call completeAsync

112
00:05:14.620 --> 00:05:16.250 align:middle line:90%
on the completable future.

113
00:05:16.250 --> 00:05:19.310 align:middle line:84%
Now, remember, we gave
it no behavior before,

114
00:05:19.310 --> 00:05:21.280 align:middle line:84%
so we have to
complete it somehow.

115
00:05:21.280 --> 00:05:23.650 align:middle line:84%
If we just call it
complete, then it

116
00:05:23.650 --> 00:05:27.070 align:middle line:84%
would go ahead and synchronously
apply this expression

117
00:05:27.070 --> 00:05:30.250 align:middle line:84%
and get the results of
multiplying two big fractions.

118
00:05:30.250 --> 00:05:32.980 align:middle line:84%
By calling completeAsync,
that arranges

119
00:05:32.980 --> 00:05:36.310 align:middle line:84%
to run this supplier
lambda in a thread

120
00:05:36.310 --> 00:05:37.990 align:middle line:90%
in the common ForkJoinPool.

121
00:05:37.990 --> 00:05:42.320 align:middle line:84%
So this computation will
take place in the background.

122
00:05:42.320 --> 00:05:44.810 align:middle line:84%
And that will then set
all the wheels in motion.

123
00:05:44.810 --> 00:05:47.930 align:middle line:84%
So at that point, when
completeAsync is called,

124
00:05:47.930 --> 00:05:52.650 align:middle line:84%
that will run the
thenRun action to append

125
00:05:52.650 --> 00:05:55.250 align:middle line:84%
to completeAsync result
=, and that that'll

126
00:05:55.250 --> 00:05:57.680 align:middle line:84%
run in the main thread--
the calling thread.

127
00:05:57.680 --> 00:06:01.520 align:middle line:84%
The completeAsync operation will
take place in the background,

128
00:06:01.520 --> 00:06:05.630 align:middle line:84%
and then we will go ahead and
have the background thread

129
00:06:05.630 --> 00:06:08.720 align:middle line:84%
multiply the two big fraction
objects together and return

130
00:06:08.720 --> 00:06:13.320 align:middle line:84%
a result. The computations
between completeAsync

131
00:06:13.320 --> 00:06:14.790 align:middle line:84%
and when we get
the result and join

132
00:06:14.790 --> 00:06:18.840 align:middle line:84%
with it could run concurrently--
of course, as always.

133
00:06:18.840 --> 00:06:21.110 align:middle line:84%
Then the last thing we do
is we go ahead and call

134
00:06:21.110 --> 00:06:25.210 align:middle line:84%
the join method on
f, which will return

135
00:06:25.210 --> 00:06:28.920 align:middle line:84%
when the computation of
completeAsync has finished.

136
00:06:28.920 --> 00:06:31.410 align:middle line:84%
That will convert
to a mixed string

137
00:06:31.410 --> 00:06:34.350 align:middle line:84%
and append it to
the string buffer,

138
00:06:34.350 --> 00:06:37.740 align:middle line:84%
and then the last thing we do
is we display the string buffer

139
00:06:37.740 --> 00:06:40.660 align:middle line:84%
after first converting
it to a string.

140
00:06:40.660 --> 00:06:42.120 align:middle line:84%
So if you run this
example, you'll

141
00:06:42.120 --> 00:06:45.330 align:middle line:84%
see that it'll basically
say Starting test,

142
00:06:45.330 --> 00:06:47.850 align:middle line:84%
completeAsync result
=, and then it'll

143
00:06:47.850 --> 00:06:50.670 align:middle line:84%
go ahead and print the mixed
string of multiplying those two

144
00:06:50.670 --> 00:06:52.223 align:middle line:90%
big fractions together.

145
00:06:52.223 --> 00:06:53.640 align:middle line:84%
And so that's just
an illustration

146
00:06:53.640 --> 00:06:56.290 align:middle line:84%
of how the completeAsync
method could be used.

147
00:06:56.290 --> 00:06:58.060 align:middle line:84%
I don't find it to
be all that useful,

148
00:06:58.060 --> 00:07:00.660 align:middle line:84%
but it's just kind of an
interesting example of a newer

149
00:07:00.660 --> 00:07:03.990 align:middle line:84%
method that was added in the
later versions of the Java

150
00:07:03.990 --> 00:07:06.560 align:middle line:90%
Completable Futures framework.