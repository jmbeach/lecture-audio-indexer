WEBVTT

1
00:00:00.000 --> 00:00:00.660 align:middle line:90%


2
00:00:00.660 --> 00:00:03.030 align:middle line:84%
So now that I've
given you an overview

3
00:00:03.030 --> 00:00:06.840 align:middle line:84%
of the completable futures
version of the ImageStreamGang

4
00:00:06.840 --> 00:00:09.990 align:middle line:84%
example, let's start talking
about how we can actually

5
00:00:09.990 --> 00:00:15.000 align:middle line:84%
apply completable futures in
order to do the processing.

6
00:00:15.000 --> 00:00:18.690 align:middle line:84%
And so I'll show
you basically, layer

7
00:00:18.690 --> 00:00:20.760 align:middle line:84%
by layer, or
intermediate operation

8
00:00:20.760 --> 00:00:23.880 align:middle line:84%
by intermediate operation, and
terminal operation as well,

9
00:00:23.880 --> 00:00:27.390 align:middle line:84%
how we can apply the completable
futures mechanisms to make

10
00:00:27.390 --> 00:00:30.950 align:middle line:90%
this example really scream.

11
00:00:30.950 --> 00:00:36.080 align:middle line:84%
So as always, the entry point
into this ImageStreamGang

12
00:00:36.080 --> 00:00:38.840 align:middle line:84%
will be the processStream
hook method,

13
00:00:38.840 --> 00:00:41.180 align:middle line:84%
just like it was
for the version we

14
00:00:41.180 --> 00:00:43.650 align:middle line:84%
looked at that was implemented
using parallel streams.

15
00:00:43.650 --> 00:00:46.080 align:middle line:84%
And if you look carefully
at the bottom of the slide,

16
00:00:46.080 --> 00:00:49.700 align:middle line:84%
you'll see that the file that
this implementation comes from

17
00:00:49.700 --> 00:00:53.330 align:middle line:84%
is called
ImageStreamCompletableFuture1.

18
00:00:53.330 --> 00:00:56.690 align:middle line:84%
And the reason that it's called
ImageStreamComputableFuture1

19
00:00:56.690 --> 00:01:00.050 align:middle line:84%
is that there's also an
ImageStreamCompletableFuture2

20
00:01:00.050 --> 00:01:03.560 align:middle line:84%
implementation looking
in that folder.

21
00:01:03.560 --> 00:01:06.287 align:middle line:84%
And so perhaps in a
synchronous session

22
00:01:06.287 --> 00:01:08.870 align:middle line:84%
we'll have a chance to look at
the alternative implementation,

23
00:01:08.870 --> 00:01:10.745 align:middle line:84%
but I just wanted to
focus on this one first.

24
00:01:10.745 --> 00:01:13.010 align:middle line:90%
It's pretty cool.

25
00:01:13.010 --> 00:01:14.960 align:middle line:84%
The first thing we
do is exactly like we

26
00:01:14.960 --> 00:01:17.090 align:middle line:84%
do with the parallel
streams version.

27
00:01:17.090 --> 00:01:19.040 align:middle line:90%
We get the list of URLs.

28
00:01:19.040 --> 00:01:22.700 align:middle line:84%
And again, that was provided
by the user through a GUI,

29
00:01:22.700 --> 00:01:26.750 align:middle line:84%
through command line, through
precompiled files that we use

30
00:01:26.750 --> 00:01:28.910 align:middle line:90%
for testing purposes, whatever.

31
00:01:28.910 --> 00:01:32.100 align:middle line:84%
That's just, the input
comes from somewhere.

32
00:01:32.100 --> 00:01:34.680 align:middle line:84%
Once we have that
list of URLs, we

33
00:01:34.680 --> 00:01:39.030 align:middle line:84%
combine the Java streams with
completable futures, which

34
00:01:39.030 --> 00:01:43.320 align:middle line:84%
are lurking behind those
behaviors we're passing

35
00:01:43.320 --> 00:01:46.440 align:middle line:84%
into the intermediate
operations of the stream

36
00:01:46.440 --> 00:01:49.855 align:middle line:84%
in order to be able to
carry out the computations.

37
00:01:49.855 --> 00:01:51.230 align:middle line:84%
The first thing
we do, of course,

38
00:01:51.230 --> 00:01:53.770 align:middle line:84%
is, we take the URLs
list, and we convert it

39
00:01:53.770 --> 00:01:57.480 align:middle line:90%
into a stream of URLs.

40
00:01:57.480 --> 00:01:59.520 align:middle line:84%
From here on out,
everything is very

41
00:01:59.520 --> 00:02:02.070 align:middle line:84%
different from the parallel
streams implementation,

42
00:02:02.070 --> 00:02:07.020 align:middle line:84%
even though the overall flow of
control looks roughly similar.

43
00:02:07.020 --> 00:02:09.990 align:middle line:84%
But the implementations
are wildly different.

44
00:02:09.990 --> 00:02:11.490 align:middle line:84%
So the first thing
we're going to do

45
00:02:11.490 --> 00:02:13.115 align:middle line:84%
is, we're going to
asynchronously check

46
00:02:13.115 --> 00:02:17.130 align:middle line:84%
to see if images have already
been downloaded and cached

47
00:02:17.130 --> 00:02:18.180 align:middle line:90%
locally.

48
00:02:18.180 --> 00:02:21.270 align:middle line:84%
And what happens here-- and
we'll look at this in a bit

49
00:02:21.270 --> 00:02:24.270 align:middle line:84%
more detail, but what
map() is doing is,

50
00:02:24.270 --> 00:02:28.890 align:middle line:84%
it's converting a stream of URLs
into a stream of completable

51
00:02:28.890 --> 00:02:32.370 align:middle line:90%
futures to optional URLs.

52
00:02:32.370 --> 00:02:34.095 align:middle line:84%
Now, that's a bit of
a mouthful, and I'll

53
00:02:34.095 --> 00:02:35.970 align:middle line:84%
explain why we're doing
all this stuff later.

54
00:02:35.970 --> 00:02:37.590 align:middle line:90%
It's really pretty cool.

55
00:02:37.590 --> 00:02:39.660 align:middle line:84%
But it has to do a lot
with the differences

56
00:02:39.660 --> 00:02:42.270 align:middle line:84%
between synchronous and
asynchronous processing

57
00:02:42.270 --> 00:02:45.600 align:middle line:90%
in the context of Java streams.

58
00:02:45.600 --> 00:02:47.700 align:middle line:84%
We'll look shortly
at the implementation

59
00:02:47.700 --> 00:02:55.380 align:middle line:84%
of the checkUrlCacheAsync method
reference we're showing here.

60
00:02:55.380 --> 00:02:57.660 align:middle line:84%
What comes out of
this, of course,

61
00:02:57.660 --> 00:03:02.670 align:middle line:84%
will be a stream of completable
futures to optional URLs.

62
00:03:02.670 --> 00:03:08.320 align:middle line:84%
That stream then gets fed into
the next map in the pipeline.

63
00:03:08.320 --> 00:03:12.210 align:middle line:84%
And this map will call the
downloadImageAsync method

64
00:03:12.210 --> 00:03:16.860 align:middle line:84%
reference in order to be able
to asynchronously download

65
00:03:16.860 --> 00:03:20.930 align:middle line:84%
each non-cached image
at the given URL.

66
00:03:20.930 --> 00:03:22.430 align:middle line:84%
So that's basically
what we're going

67
00:03:22.430 --> 00:03:23.610 align:middle line:90%
to do there at a high level.

68
00:03:23.610 --> 00:03:25.260 align:middle line:84%
And of course, we'll
look at this code

69
00:03:25.260 --> 00:03:27.750 align:middle line:84%
here shortly, so you're
not mystified for too

70
00:03:27.750 --> 00:03:30.340 align:middle line:90%
long as how this really works.

71
00:03:30.340 --> 00:03:34.530 align:middle line:84%
This call to map()
converts these URLs,

72
00:03:34.530 --> 00:03:40.040 align:middle line:84%
this stream of
futures, to URLs--

73
00:03:40.040 --> 00:03:41.930 align:middle line:84%
that are optional, of
course, as you'll see--

74
00:03:41.930 --> 00:03:44.870 align:middle line:84%
to a stream of
image futures that

75
00:03:44.870 --> 00:03:47.192 align:middle line:84%
are in the process
of downloading.

76
00:03:47.192 --> 00:03:48.650 align:middle line:84%
So what's going to
happen there is,

77
00:03:48.650 --> 00:03:54.175 align:middle line:84%
we're going to take in
a stream of URL futures.

78
00:03:54.175 --> 00:03:55.550 align:middle line:84%
And as they
complete, we're going

79
00:03:55.550 --> 00:03:58.280 align:middle line:84%
to end up with an output
stream of image futures

80
00:03:58.280 --> 00:04:02.560 align:middle line:84%
that are in the
process of downloading.

81
00:04:02.560 --> 00:04:10.360 align:middle line:84%
That stream of completable
futures to optional images

82
00:04:10.360 --> 00:04:14.230 align:middle line:90%
will then be piped into flatMap.

83
00:04:14.230 --> 00:04:16.070 align:middle line:84%
And flatMap, map
as you may recall,

84
00:04:16.070 --> 00:04:18.160 align:middle line:84%
is this really interesting
intermediate operation

85
00:04:18.160 --> 00:04:20.890 align:middle line:84%
that can return less
than, greater than,

86
00:04:20.890 --> 00:04:24.520 align:middle line:84%
or equal to the number of stream
elements it gets in its input

87
00:04:24.520 --> 00:04:26.920 align:middle line:90%
stream in its output stream.

88
00:04:26.920 --> 00:04:28.720 align:middle line:84%
And what this
flatMap method will

89
00:04:28.720 --> 00:04:30.580 align:middle line:84%
do, this intermediate
operation, is

90
00:04:30.580 --> 00:04:36.040 align:middle line:84%
it will invoke the
applyFiltersAsync behavior

91
00:04:36.040 --> 00:04:38.920 align:middle line:84%
through the applyFiltersAsync
method reference.

92
00:04:38.920 --> 00:04:42.790 align:middle line:84%
And that will asynchronously
filter and store

93
00:04:42.790 --> 00:04:46.000 align:middle line:84%
the downloaded images
onto the local file system

94
00:04:46.000 --> 00:04:47.533 align:middle line:90%
when they're done downloading.

95
00:04:47.533 --> 00:04:48.950 align:middle line:84%
So the behaviors
there, of course,

96
00:04:48.950 --> 00:04:51.250 align:middle line:84%
won't do anything-- the
processing won't happen

97
00:04:51.250 --> 00:04:54.910 align:middle line:90%
until the image is downloaded.

98
00:04:54.910 --> 00:04:58.360 align:middle line:84%
flatMap will convert
the image futures

99
00:04:58.360 --> 00:05:02.680 align:middle line:84%
as they complete to a
filtered set of image futures

100
00:05:02.680 --> 00:05:06.600 align:middle line:84%
that are in the process of
transforming and storing.

101
00:05:06.600 --> 00:05:10.380 align:middle line:84%
Now, what we end
up here is a stream

102
00:05:10.380 --> 00:05:15.060 align:middle line:84%
of completable futures
to optional images

103
00:05:15.060 --> 00:05:17.400 align:middle line:84%
that are in the process of
being transformed and stored.

104
00:05:17.400 --> 00:05:18.942 align:middle line:84%
And they may actually
be downloading,

105
00:05:18.942 --> 00:05:20.700 align:middle line:90%
for all we know, at this point.

106
00:05:20.700 --> 00:05:23.240 align:middle line:84%
So what we're going to do is,
we're going to call collect.

107
00:05:23.240 --> 00:05:26.420 align:middle line:84%
And collect is going to
trigger everything else we just

108
00:05:26.420 --> 00:05:28.460 align:middle line:84%
talked about, set all
the wheels in motion,

109
00:05:28.460 --> 00:05:31.310 align:middle line:84%
start doing all the
asynchronous processing,

110
00:05:31.310 --> 00:05:35.780 align:middle line:84%
and it will use the
toFuture factory method

111
00:05:35.780 --> 00:05:39.020 align:middle line:84%
to create a single completable
future that will then

112
00:05:39.020 --> 00:05:43.130 align:middle line:84%
be used to logically
wait for all

113
00:05:43.130 --> 00:05:45.350 align:middle line:84%
the asynchronous
operations, associated

114
00:05:45.350 --> 00:05:46.790 align:middle line:84%
with all the string
of futures it

115
00:05:46.790 --> 00:05:51.450 align:middle line:84%
gets, to finish their
processing in the background.

116
00:05:51.450 --> 00:05:53.990 align:middle line:84%
So again, we're getting a
single completable future

117
00:05:53.990 --> 00:05:57.290 align:middle line:84%
that we're going to be able to
use to reactively do something

118
00:05:57.290 --> 00:05:58.890 align:middle line:84%
when all of the
asynchrony is done.

119
00:05:58.890 --> 00:06:01.307 align:middle line:84%
And believe me, there's a lot
of asynchrony running around

120
00:06:01.307 --> 00:06:03.230 align:middle line:90%
at this point.

121
00:06:03.230 --> 00:06:06.140 align:middle line:84%
After that
[? CompletableFuture ?]

122
00:06:06.140 --> 00:06:07.910 align:middle line:84%
triggers, meaning
that everything's

123
00:06:07.910 --> 00:06:10.520 align:middle line:84%
done running asynchronously,
at that point,

124
00:06:10.520 --> 00:06:15.290 align:middle line:84%
we're going to go ahead and log
the results and basically say,

125
00:06:15.290 --> 00:06:18.710 align:middle line:84%
we got this many
images with this size

126
00:06:18.710 --> 00:06:20.220 align:middle line:90%
and so on and so forth.

127
00:06:20.220 --> 00:06:24.700 align:middle line:84%
So this will log the results
after everything is done.

128
00:06:24.700 --> 00:06:30.160 align:middle line:84%
And the final method in this
long, fluent chain of calls

129
00:06:30.160 --> 00:06:31.548 align:middle line:90%
will be the join method.

130
00:06:31.548 --> 00:06:33.590 align:middle line:84%
Now, this is interesting,
because all the methods

131
00:06:33.590 --> 00:06:35.200 align:middle line:90%
ahead of this--

132
00:06:35.200 --> 00:06:38.440 align:middle line:84%
well, at least stream, map,
map, flatMap, and collect--

133
00:06:38.440 --> 00:06:41.070 align:middle line:90%
those are all streams methods.

134
00:06:41.070 --> 00:06:44.530 align:middle line:84%
Then apply and join are
completable futures methods.

135
00:06:44.530 --> 00:06:46.350 align:middle line:84%
So we're going to
use join in order

136
00:06:46.350 --> 00:06:50.640 align:middle line:84%
to block until everything has
been checked for whether it's

137
00:06:50.640 --> 00:06:55.380 align:middle line:84%
cached, downloaded, if it
wasn't processed, and stored.

138
00:06:55.380 --> 00:06:57.630 align:middle line:84%
This is the one and
only call to join

139
00:06:57.630 --> 00:07:00.420 align:middle line:84%
in the entire implementation
strategy, which

140
00:07:00.420 --> 00:07:03.420 align:middle line:84%
is a huge win, because it
means we can let everything

141
00:07:03.420 --> 00:07:06.990 align:middle line:84%
run in parallel asynchronously
in the background

142
00:07:06.990 --> 00:07:10.110 align:middle line:84%
and not artificially slow
things down by trying

143
00:07:10.110 --> 00:07:11.990 align:middle line:90%
to synchronize prematurely.

144
00:07:11.990 --> 00:07:15.720 align:middle line:84%
So big no-no in the context
of completable futures

145
00:07:15.720 --> 00:07:18.170 align:middle line:90%
if you want them to run fast.