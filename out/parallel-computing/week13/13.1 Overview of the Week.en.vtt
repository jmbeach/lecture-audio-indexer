WEBVTT

1
00:00:00.000 --> 00:00:00.730 align:middle line:90%


2
00:00:00.730 --> 00:00:02.410 align:middle line:84%
Welcome to the next
week of our course

3
00:00:02.410 --> 00:00:05.180 align:middle line:84%
on parallel functional
programming with Java.

4
00:00:05.180 --> 00:00:07.220 align:middle line:84%
This week's lessons
continue our coverage

5
00:00:07.220 --> 00:00:09.990 align:middle line:84%
of Java's completable
futures framework.

6
00:00:09.990 --> 00:00:13.350 align:middle line:84%
As discussed last week, the
completable future class itself

7
00:00:13.350 --> 00:00:15.630 align:middle line:84%
consists of over
60 public methods.

8
00:00:15.630 --> 00:00:17.960 align:middle line:84%
And it also has two
dozen nested classes

9
00:00:17.960 --> 00:00:20.640 align:middle line:84%
that provide a wide range
of features, some of which

10
00:00:20.640 --> 00:00:23.850 align:middle line:84%
are basic, and some of
which are more advanced.

11
00:00:23.850 --> 00:00:25.770 align:middle line:84%
We start by discussing
the basic features

12
00:00:25.770 --> 00:00:28.260 align:middle line:90%
of Java completable future.

13
00:00:28.260 --> 00:00:31.070 align:middle line:84%
These basic features are nearly
identical to those defined

14
00:00:31.070 --> 00:00:33.360 align:middle line:84%
by the Java future
interface, which

15
00:00:33.360 --> 00:00:36.360 align:middle line:84%
the completable future class
implements and augments

16
00:00:36.360 --> 00:00:38.130 align:middle line:90%
slightly.

17
00:00:38.130 --> 00:00:41.100 align:middle line:84%
After describing these basic
completable future features

18
00:00:41.100 --> 00:00:44.010 align:middle line:84%
and showing an example of
how to apply them to develop

19
00:00:44.010 --> 00:00:47.130 align:middle line:84%
a simple asynchronous
program, we turn our attention

20
00:00:47.130 --> 00:00:50.150 align:middle line:84%
to the advanced completable
future features,

21
00:00:50.150 --> 00:00:52.610 align:middle line:84%
including factory
methods which initiate

22
00:00:52.610 --> 00:00:56.120 align:middle line:84%
asynchronous two-way or one-way
computations without requiring

23
00:00:56.120 --> 00:00:58.720 align:middle line:84%
programmers to use
threads explicitly,

24
00:00:58.720 --> 00:01:01.090 align:middle line:84%
completion stage
methods which chain

25
00:01:01.090 --> 00:01:03.147 align:middle line:84%
together dependent
actions that process

26
00:01:03.147 --> 00:01:05.230 align:middle line:84%
the results of asynchronous
computations when they

27
00:01:05.230 --> 00:01:09.960 align:middle line:84%
complete, exception methods
which gracefully handle errors

28
00:01:09.960 --> 00:01:12.720 align:middle line:84%
that arise during
asynchronous processing,

29
00:01:12.720 --> 00:01:15.090 align:middle line:84%
and arbitrary-arity
methods which

30
00:01:15.090 --> 00:01:17.310 align:middle line:84%
return a single
completable future that

31
00:01:17.310 --> 00:01:19.950 align:middle line:84%
can be used to wait for any
or all completable futures

32
00:01:19.950 --> 00:01:23.470 align:middle line:84%
in an array to complete
their processing.

33
00:01:23.470 --> 00:01:26.830 align:middle line:84%
Since completion stage
methods constitute roughly 2/3

34
00:01:26.830 --> 00:01:29.650 align:middle line:84%
of the 60 plus public methods
in the Java completable futures

35
00:01:29.650 --> 00:01:32.620 align:middle line:84%
framework, we devote the
bulk of our time this week

36
00:01:32.620 --> 00:01:35.268 align:middle line:90%
to exploring them.

37
00:01:35.268 --> 00:01:36.810 align:middle line:84%
These methods can
be grouped together

38
00:01:36.810 --> 00:01:39.180 align:middle line:84%
based on how a
stage is triggered

39
00:01:39.180 --> 00:01:41.610 align:middle line:90%
by one or more previous stages.

40
00:01:41.610 --> 00:01:44.160 align:middle line:84%
In particular, some
completion stage methods

41
00:01:44.160 --> 00:01:47.730 align:middle line:84%
are triggered upon completion
of a single previous stage.

42
00:01:47.730 --> 00:01:49.500 align:middle line:84%
Others are triggered
upon completion

43
00:01:49.500 --> 00:01:52.770 align:middle line:84%
of both of two previous
stages, and yet, others

44
00:01:52.770 --> 00:01:57.400 align:middle line:84%
are triggered upon completion of
either of two previous stages.

45
00:01:57.400 --> 00:01:59.410 align:middle line:84%
Getting a handle
on all the methods

46
00:01:59.410 --> 00:02:03.460 align:middle line:84%
in the completable future
API takes time and patience.

47
00:02:03.460 --> 00:02:06.680 align:middle line:84%
So we present plenty of
small, yet complete examples

48
00:02:06.680 --> 00:02:08.949 align:middle line:84%
to illustrate the
structure and functionality

49
00:02:08.949 --> 00:02:12.110 align:middle line:84%
of many key completable
future methods.

50
00:02:12.110 --> 00:02:15.680 align:middle line:84%
These examples are all available
in my open source GitHub

51
00:02:15.680 --> 00:02:16.880 align:middle line:90%
repository.

52
00:02:16.880 --> 00:02:20.270 align:middle line:84%
So I strongly encourage you to
inspect and run them carefully

53
00:02:20.270 --> 00:02:22.077 align:middle line:84%
to ensure you
understand how they work

54
00:02:22.077 --> 00:02:23.660 align:middle line:84%
and how you can apply
them effectively

55
00:02:23.660 --> 00:02:26.270 align:middle line:84%
in practice, both through
your programming assignments

56
00:02:26.270 --> 00:02:27.970 align:middle line:90%
and beyond.