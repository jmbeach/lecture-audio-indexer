WEBVTT

1
00:00:00.000 --> 00:00:00.930 align:middle line:90%


2
00:00:00.930 --> 00:00:04.470 align:middle line:84%
We're now ready to start talking
about more advanced completion

3
00:00:04.470 --> 00:00:05.107 align:middle line:90%
stage methods.

4
00:00:05.107 --> 00:00:06.690 align:middle line:84%
These are the
completion stage methods

5
00:00:06.690 --> 00:00:12.600 align:middle line:84%
that can be triggered when both
or either of previous stages

6
00:00:12.600 --> 00:00:14.160 align:middle line:90%
complete.

7
00:00:14.160 --> 00:00:16.280 align:middle line:84%
We're going to start
by talking about the

8
00:00:16.280 --> 00:00:21.700 align:middle line:84%
And variant of the two-stage
completion stage methods.

9
00:00:21.700 --> 00:00:23.570 align:middle line:84%
So as we talked
about before, there

10
00:00:23.570 --> 00:00:25.308 align:middle line:90%
are different types of methods.

11
00:00:25.308 --> 00:00:26.850 align:middle line:84%
The methods we're
about to talk about

12
00:00:26.850 --> 00:00:30.240 align:middle line:84%
are ones that are triggered
when both of two previous stages

13
00:00:30.240 --> 00:00:31.015 align:middle line:90%
complete.

14
00:00:31.015 --> 00:00:33.390 align:middle line:84%
And the method we're going to
focus on for our discussion

15
00:00:33.390 --> 00:00:35.085 align:middle line:90%
is thenCombine.

16
00:00:35.085 --> 00:00:36.960 align:middle line:84%
And you can basically
think about thenCombine

17
00:00:36.960 --> 00:00:38.670 align:middle line:90%
as a simple form of reduction.

18
00:00:38.670 --> 00:00:43.680 align:middle line:84%
It takes two tasks, or two
asynchronous flows, and then

19
00:00:43.680 --> 00:00:46.170 align:middle line:84%
it combines them together
to a single flow.

20
00:00:46.170 --> 00:00:49.760 align:middle line:84%
So it's basically a
Join, if you will.

21
00:00:49.760 --> 00:00:53.390 align:middle line:84%
This applies its
BiFunction action

22
00:00:53.390 --> 00:00:57.480 align:middle line:84%
to the results of
both previous stages.

23
00:00:57.480 --> 00:00:59.910 align:middle line:84%
So it's basically this
concept of a conjunction.

24
00:00:59.910 --> 00:01:04.019 align:middle line:84%
It's when both things
occur, this gets done.

25
00:01:04.019 --> 00:01:07.220 align:middle line:84%
And as you can see here,
it takes a BiFunction,

26
00:01:07.220 --> 00:01:09.680 align:middle line:84%
and that's exactly what
it needs in order to run.

27
00:01:09.680 --> 00:01:13.380 align:middle line:84%
It's going to take two inputs
and produce one output.

28
00:01:13.380 --> 00:01:16.610 align:middle line:84%
There's a pair of
futures used here.

29
00:01:16.610 --> 00:01:19.930 align:middle line:84%
The future that's used
to invoke thenCombine,

30
00:01:19.930 --> 00:01:22.490 align:middle line:84%
which you don't see here,
but of course, since it's not

31
00:01:22.490 --> 00:01:25.820 align:middle line:84%
a static method, we need an
object, a CompletableFuture

32
00:01:25.820 --> 00:01:29.030 align:middle line:84%
to call it, and
the other future,

33
00:01:29.030 --> 00:01:34.700 align:middle line:84%
which is passed as the first
parameter to thenCombine.

34
00:01:34.700 --> 00:01:38.580 align:middle line:84%
As you can see, other
is the first parameter.

35
00:01:38.580 --> 00:01:40.350 align:middle line:84%
It returns a future
that contains

36
00:01:40.350 --> 00:01:44.160 align:middle line:90%
the result of the action.

37
00:01:44.160 --> 00:01:46.767 align:middle line:84%
So you can basically think
of it as performing a Join

38
00:01:46.767 --> 00:01:47.850 align:middle line:90%
or performing a reduction.

39
00:01:47.850 --> 00:01:53.850 align:middle line:84%
It's reducing something from
two flows into a single flow.

40
00:01:53.850 --> 00:01:58.230 align:middle line:84%
We can use thenCombine to
join two paths of asynchronous

41
00:01:58.230 --> 00:02:01.480 align:middle line:84%
execution to produce
a single result.

42
00:02:01.480 --> 00:02:03.750 align:middle line:84%
So let's take a look
at an example, which

43
00:02:03.750 --> 00:02:07.140 align:middle line:84%
also comes out of
my ex 8 folder,

44
00:02:07.140 --> 00:02:09.830 align:middle line:90%
to illustrate how this works.

45
00:02:09.830 --> 00:02:11.330 align:middle line:84%
What we're going
to do here is we're

46
00:02:11.330 --> 00:02:17.540 align:middle line:84%
going to asynchronously multiply
and asynchronously divide

47
00:02:17.540 --> 00:02:18.990 align:middle line:90%
big fractions.

48
00:02:18.990 --> 00:02:23.030 align:middle line:84%
So the first
computation, the compF1

49
00:02:23.030 --> 00:02:27.050 align:middle line:84%
is going to asynchronously
multiply two big fractions.

50
00:02:27.050 --> 00:02:30.590 align:middle line:84%
The second computation
compF2 will asynchronously

51
00:02:30.590 --> 00:02:33.370 align:middle line:90%
divide two big fractions.

52
00:02:33.370 --> 00:02:35.770 align:middle line:84%
And we will then
call thenCombine.

53
00:02:35.770 --> 00:02:42.550 align:middle line:84%
And thenCombine is designed
so that when compF1 completes

54
00:02:42.550 --> 00:02:46.990 align:middle line:84%
and compF2 completes,
then the big fraction

55
00:02:46.990 --> 00:02:50.690 align:middle line:90%
add action will be performed.

56
00:02:50.690 --> 00:02:53.230 align:middle line:84%
So a big fraction
add is an action that

57
00:02:53.230 --> 00:02:56.110 align:middle line:84%
will be registered
and called back when

58
00:02:56.110 --> 00:02:58.753 align:middle line:90%
both previous stages complete.

59
00:02:58.753 --> 00:03:00.920 align:middle line:84%
So it won't be called until
everything else is done.

60
00:03:00.920 --> 00:03:03.170 align:middle line:84%
And then, of course, we're
going to go ahead and print

61
00:03:03.170 --> 00:03:04.050 align:middle line:90%
the results out.