WEBVTT

1
00:00:00.000 --> 00:00:00.500 align:middle line:90%


2
00:00:00.500 --> 00:00:03.330 align:middle line:84%
Now that I've given you an
overview of the complete Java

3
00:00:03.330 --> 00:00:05.370 align:middle line:84%
completable future
API, we'll start

4
00:00:05.370 --> 00:00:08.100 align:middle line:84%
walking through each of
its groupings of methods

5
00:00:08.100 --> 00:00:10.960 align:middle line:84%
and showing how they can
be applied in practice.

6
00:00:10.960 --> 00:00:13.720 align:middle line:84%
We'll start with the
basic features in the Java

7
00:00:13.720 --> 00:00:16.550 align:middle line:90%
completable futures framework.

8
00:00:16.550 --> 00:00:19.750 align:middle line:84%
There's a number of basic
completable futures features.

9
00:00:19.750 --> 00:00:24.230 align:middle line:84%
Naturally these largely
support the future API,

10
00:00:24.230 --> 00:00:28.050 align:middle line:84%
which a completable
future class implements.

11
00:00:28.050 --> 00:00:32.369 align:middle line:84%
So, for example, we can
time block and poll.

12
00:00:32.369 --> 00:00:36.050 align:middle line:84%
We can cancel and test to see
if completable futures are

13
00:00:36.050 --> 00:00:38.240 align:middle line:90%
canceled and done.

14
00:00:38.240 --> 00:00:40.520 align:middle line:84%
Strangely enough
cancel doesn't actually

15
00:00:40.520 --> 00:00:42.333 align:middle line:90%
interrupt the computation.

16
00:00:42.333 --> 00:00:44.750 align:middle line:84%
You can take a look at the
link at the bottom of this page

17
00:00:44.750 --> 00:00:46.110 align:middle line:90%
for more discussion about this.

18
00:00:46.110 --> 00:00:47.397 align:middle line:90%
It's very peculiar.

19
00:00:47.397 --> 00:00:49.730 align:middle line:84%
There are ways of making it
work, but it doesn't do it--

20
00:00:49.730 --> 00:00:52.220 align:middle line:84%
it doesn't do this
by default. So

21
00:00:52.220 --> 00:00:55.820 align:middle line:84%
as a consequence calling
cancel on a completable future

22
00:00:55.820 --> 00:00:59.060 align:middle line:84%
will cause the completable
future to ignore

23
00:00:59.060 --> 00:01:01.550 align:middle line:84%
the results of the computation,
but the computation

24
00:01:01.550 --> 00:01:05.030 align:middle line:84%
will still keep running,
which is a little bit wacky.

25
00:01:05.030 --> 00:01:07.030 align:middle line:84%
There's also a few extra
things have been added.

26
00:01:07.030 --> 00:01:09.322 align:middle line:84%
They're still in the same
spirit of the basic features,

27
00:01:09.322 --> 00:01:11.410 align:middle line:84%
but they take away
some of the downsides

28
00:01:11.410 --> 00:01:15.460 align:middle line:84%
with the earlier versions
of the future interface.

29
00:01:15.460 --> 00:01:18.370 align:middle line:84%
One such method is
the join method.

30
00:01:18.370 --> 00:01:20.710 align:middle line:84%
And this method
behaves like the get

31
00:01:20.710 --> 00:01:23.980 align:middle line:84%
method on the future
interface, but it does not

32
00:01:23.980 --> 00:01:26.020 align:middle line:90%
use checked exceptions.

33
00:01:26.020 --> 00:01:27.880 align:middle line:84%
And therefore you can
use it very nicely

34
00:01:27.880 --> 00:01:31.610 align:middle line:84%
as a method reference in a
Java stream as I show here.

35
00:01:31.610 --> 00:01:34.000 align:middle line:84%
So you might have
a futures list.

36
00:01:34.000 --> 00:01:36.220 align:middle line:84%
We turn it into a
stream of futures.

37
00:01:36.220 --> 00:01:39.010 align:middle line:84%
We may end up going
ahead and joining

38
00:01:39.010 --> 00:01:41.170 align:middle line:84%
all of those completable
futures in order

39
00:01:41.170 --> 00:01:43.030 align:middle line:84%
to be able to get
their actual results

40
00:01:43.030 --> 00:01:45.520 align:middle line:84%
and then collect those
results into a list.

41
00:01:45.520 --> 00:01:47.320 align:middle line:90%
So that's really clean.

42
00:01:47.320 --> 00:01:50.530 align:middle line:84%
In contrast, if you tried
to use the future get

43
00:01:50.530 --> 00:01:53.030 align:middle line:84%
method or the completable
future get method,

44
00:01:53.030 --> 00:01:54.800 align:middle line:84%
it would look
something like this.

45
00:01:54.800 --> 00:01:58.300 align:middle line:84%
It would require the use of
explicit try catch exceptions

46
00:01:58.300 --> 00:01:59.980 align:middle line:84%
to deal with a
checked exception.

47
00:01:59.980 --> 00:02:02.960 align:middle line:84%
And that's very ugly
in a Java stream.

48
00:02:02.960 --> 00:02:05.722 align:middle line:84%
There are ways
around this by using

49
00:02:05.722 --> 00:02:07.930 align:middle line:84%
type laundering and exceptional
laundering and so on,

50
00:02:07.930 --> 00:02:10.639 align:middle line:84%
but it's really not
worth it a lot of times

51
00:02:10.639 --> 00:02:12.950 align:middle line:90%
unless you're really desperate.

52
00:02:12.950 --> 00:02:16.610 align:middle line:84%
There's also oddly enough
no timed version of join.

53
00:02:16.610 --> 00:02:19.940 align:middle line:84%
So unlike get, where there's
a timed version of get,

54
00:02:19.940 --> 00:02:22.112 align:middle line:90%
there's no time version of join.

55
00:02:22.112 --> 00:02:23.570 align:middle line:84%
Not quite sure why
but there isn't.

56
00:02:23.570 --> 00:02:26.463 align:middle line:84%
So if you need time outs
and time out support,

57
00:02:26.463 --> 00:02:28.130 align:middle line:84%
you're going to have
to go back to using

58
00:02:28.130 --> 00:02:33.040 align:middle line:84%
get with its checked
exception wackiness.

59
00:02:33.040 --> 00:02:36.100 align:middle line:84%
You can also explicitly
complete a completable future.

60
00:02:36.100 --> 00:02:38.410 align:middle line:84%
I showed you an example
of how to do that earlier.

61
00:02:38.410 --> 00:02:39.880 align:middle line:84%
Here's that example
again just very

62
00:02:39.880 --> 00:02:42.070 align:middle line:84%
quickly where you can
go ahead and create

63
00:02:42.070 --> 00:02:46.090 align:middle line:84%
a completed future that has no
computation associated with it.

64
00:02:46.090 --> 00:02:48.850 align:middle line:84%
You could create
and start a thread

65
00:02:48.850 --> 00:02:52.200 align:middle line:84%
to run some operation
in the background.

66
00:02:52.200 --> 00:02:54.850 align:middle line:84%
In parallel to that, you
could run some other code.

67
00:02:54.850 --> 00:02:57.190 align:middle line:84%
And then when the background
computation was finished,

68
00:02:57.190 --> 00:02:59.890 align:middle line:84%
you could explicitly
complete the future,

69
00:02:59.890 --> 00:03:02.725 align:middle line:84%
which means that any
calls to join will unblock

70
00:03:02.725 --> 00:03:04.350 align:middle line:84%
or would never block
in the first place

71
00:03:04.350 --> 00:03:06.677 align:middle line:90%
if they haven't been called yet.

72
00:03:06.677 --> 00:03:08.010 align:middle line:90%
There are some uses of complete.

73
00:03:08.010 --> 00:03:10.140 align:middle line:84%
We'll see later that
it's often better

74
00:03:10.140 --> 00:03:12.750 align:middle line:84%
to use other features
than this simple feature,

75
00:03:12.750 --> 00:03:15.730 align:middle line:90%
but it does, in fact, work.

76
00:03:15.730 --> 00:03:17.730 align:middle line:84%
One of the things you can
also do, which is fun,

77
00:03:17.730 --> 00:03:20.940 align:middle line:84%
is there's a method called
completed future, where

78
00:03:20.940 --> 00:03:24.150 align:middle line:84%
you can give it a value
and it creates a completed

79
00:03:24.150 --> 00:03:29.460 align:middle line:84%
future from the value, which is
done as far as we're concerned.

80
00:03:29.460 --> 00:03:32.040 align:middle line:84%
So anytime you go ahead
and call join on it,

81
00:03:32.040 --> 00:03:34.710 align:middle line:84%
it will just go ahead
and return instantly

82
00:03:34.710 --> 00:03:37.020 align:middle line:90%
and will not end up blocking.

83
00:03:37.020 --> 00:03:40.020 align:middle line:84%
So this actually turns out to
be somewhat useful for creating

84
00:03:40.020 --> 00:03:42.600 align:middle line:84%
various constant
completable futures

85
00:03:42.600 --> 00:03:46.560 align:middle line:84%
like a completable future
that represents the value 0.

86
00:03:46.560 --> 00:03:49.890 align:middle line:84%
And we'll actually see a use of
this in one of our example case

87
00:03:49.890 --> 00:03:53.930 align:middle line:84%
study programs called
the image counter later.