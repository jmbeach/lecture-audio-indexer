WEBVTT

1
00:00:00.000 --> 00:00:00.800 align:middle line:90%


2
00:00:00.800 --> 00:00:04.670 align:middle line:84%
Now that talked about forEach
and Collect, let's go ahead

3
00:00:04.670 --> 00:00:08.400 align:middle line:84%
and talk about the reduce
terminal operation.

4
00:00:08.400 --> 00:00:12.000 align:middle line:84%
This is another very
common terminal operation

5
00:00:12.000 --> 00:00:16.380 align:middle line:84%
that gets used with various
Java streams operations.

6
00:00:16.380 --> 00:00:17.880 align:middle line:84%
As before, we're
going to use reduce

7
00:00:17.880 --> 00:00:21.780 align:middle line:84%
in the context of
our Hamlet program.

8
00:00:21.780 --> 00:00:23.320 align:middle line:84%
Reduce is a terminal
operation that

9
00:00:23.320 --> 00:00:26.210 align:middle line:84%
returns a primitive,
unlike collect,

10
00:00:26.210 --> 00:00:29.620 align:middle line:84%
which as that name suggested,
returns a collection rather

11
00:00:29.620 --> 00:00:31.470 align:middle line:90%
than the primitive.

12
00:00:31.470 --> 00:00:34.650 align:middle line:84%
This particular
approach will be used

13
00:00:34.650 --> 00:00:36.160 align:middle line:90%
in a couple of different ways.

14
00:00:36.160 --> 00:00:39.720 align:middle line:84%
We're going to use
it by creating a--

15
00:00:39.720 --> 00:00:42.810 align:middle line:84%
first we're going to go ahead
and create a matching character

16
00:00:42.810 --> 00:00:46.680 align:middle line:84%
map, which is going to
be a map that associates

17
00:00:46.680 --> 00:00:48.480 align:middle line:84%
the names of the
Hamlet characters

18
00:00:48.480 --> 00:00:50.520 align:middle line:90%
with their name lengths.

19
00:00:50.520 --> 00:00:54.090 align:middle line:84%
So of course, Hamlet
will be length 6

20
00:00:54.090 --> 00:00:58.315 align:middle line:84%
and Laertes will
also be named 6 or 7,

21
00:00:58.315 --> 00:00:59.940 align:middle line:84%
I can't remember how
you spell Laertes.

22
00:00:59.940 --> 00:01:02.610 align:middle line:84%
But basically it's going
to have the lengths

23
00:01:02.610 --> 00:01:06.750 align:middle line:84%
in the value part of the map
and the name of the character

24
00:01:06.750 --> 00:01:08.280 align:middle line:90%
being the key.

25
00:01:08.280 --> 00:01:10.530 align:middle line:84%
What we're then going to do
is we're going to go ahead

26
00:01:10.530 --> 00:01:15.510 align:middle line:84%
and take the values portion
of the matching character map,

27
00:01:15.510 --> 00:01:19.560 align:middle line:84%
so that'll be all the lengths,
and when we say .value

28
00:01:19.560 --> 00:01:24.390 align:middle line:84%
on the matching character
map, that will create a data

29
00:01:24.390 --> 00:01:26.440 align:middle line:84%
structure that contains
all the values.

30
00:01:26.440 --> 00:01:29.100 align:middle line:84%
We then go ahead and
convert that list of values

31
00:01:29.100 --> 00:01:32.012 align:middle line:90%
into a stream of long values.

32
00:01:32.012 --> 00:01:33.720 align:middle line:84%
And then we're going
to go ahead and call

33
00:01:33.720 --> 00:01:36.150 align:middle line:90%
the reduce terminal operation.

34
00:01:36.150 --> 00:01:38.460 align:middle line:84%
And what the terminal
operation reduced will do is,

35
00:01:38.460 --> 00:01:41.850 align:middle line:84%
it's going to sum up the
lengths of all the character

36
00:01:41.850 --> 00:01:43.860 align:middle line:90%
names in the play Hamlet.

37
00:01:43.860 --> 00:01:47.310 align:middle line:84%
And that'll end up with the
sum of name lengths variable

38
00:01:47.310 --> 00:01:49.240 align:middle line:90%
that you see here.

39
00:01:49.240 --> 00:01:51.450 align:middle line:84%
Now reduce takes a
couple of parameters.

40
00:01:51.450 --> 00:01:53.700 align:middle line:84%
There's actually several
different overloaded variants

41
00:01:53.700 --> 00:01:54.990 align:middle line:90%
of reduce.

42
00:01:54.990 --> 00:01:58.620 align:middle line:84%
This particular version of
reduce takes two parameters.

43
00:01:58.620 --> 00:02:00.240 align:middle line:84%
And the first
parameter is what's

44
00:02:00.240 --> 00:02:04.710 align:middle line:84%
called the identity value, and
this kind of has two roles.

45
00:02:04.710 --> 00:02:08.669 align:middle line:84%
First, it's the initial
value of the reduction.

46
00:02:08.669 --> 00:02:11.440 align:middle line:84%
And it's also the default
result if there are, in fact,

47
00:02:11.440 --> 00:02:12.910 align:middle line:90%
no elements in the string.

48
00:02:12.910 --> 00:02:15.060 align:middle line:84%
So if for some reason we
ended up with a stream

49
00:02:15.060 --> 00:02:18.480 align:middle line:84%
with no elements
whatsoever, then we

50
00:02:18.480 --> 00:02:21.640 align:middle line:90%
would simply get the value 0.

51
00:02:21.640 --> 00:02:25.960 align:middle line:84%
We'll also talk more about
what identity is shortly.

52
00:02:25.960 --> 00:02:29.200 align:middle line:84%
The second parameter
that's passed in to reduce

53
00:02:29.200 --> 00:02:31.660 align:middle line:84%
is an accumulator,
which is designed

54
00:02:31.660 --> 00:02:34.240 align:middle line:84%
to be a stateless
function that combines

55
00:02:34.240 --> 00:02:39.520 align:middle line:84%
two values into a single,
immutable reduced value.

56
00:02:39.520 --> 00:02:41.170 align:middle line:84%
And by immutable,
I mean, once it's

57
00:02:41.170 --> 00:02:43.790 align:middle line:84%
created it's not going
to be changeable.

58
00:02:43.790 --> 00:02:46.930 align:middle line:84%
You can only read it, you
can't write to it or modify it.

59
00:02:46.930 --> 00:02:49.930 align:middle line:84%
And of course, along,
in this particular case,

60
00:02:49.930 --> 00:02:51.510 align:middle line:90%
is in that property.

61
00:02:51.510 --> 00:02:53.260 align:middle line:84%
We're not going to
write to it, we're just

62
00:02:53.260 --> 00:02:55.800 align:middle line:90%
going to read it once it's set.

63
00:02:55.800 --> 00:02:59.830 align:middle line:84%
In this particular case, we're
going to use the sum method

64
00:02:59.830 --> 00:03:02.560 align:middle line:84%
reference as the accumulator
because it takes two parameters

65
00:03:02.560 --> 00:03:07.270 align:middle line:84%
and returns a single
immutable reduced value.

66
00:03:07.270 --> 00:03:09.500 align:middle line:84%
We could also use a
lambda expression here.

67
00:03:09.500 --> 00:03:12.190 align:middle line:84%
So rather than using
sum we could also

68
00:03:12.190 --> 00:03:14.950 align:middle line:84%
be a bit more
verbose and write out

69
00:03:14.950 --> 00:03:18.100 align:middle line:84%
the code using the following
lambda expression that I show

70
00:03:18.100 --> 00:03:24.850 align:middle line:84%
you here, which takes two
long parameters, x and y,

71
00:03:24.850 --> 00:03:27.910 align:middle line:84%
and then simply adds
x plus y, and then

72
00:03:27.910 --> 00:03:31.060 align:middle line:84%
that's what will be
accumulated every time

73
00:03:31.060 --> 00:03:32.260 align:middle line:90%
the reduction takes place.

74
00:03:32.260 --> 00:03:34.810 align:middle line:90%


75
00:03:34.810 --> 00:03:38.060 align:middle line:84%
There's also, interestingly
enough, a three parameter

76
00:03:38.060 --> 00:03:39.830 align:middle line:90%
version of reduce.

77
00:03:39.830 --> 00:03:43.910 align:middle line:84%
And this is designed to be
used with parallel streams.

78
00:03:43.910 --> 00:03:46.167 align:middle line:84%
You wouldn't really use
it with sequential streams

79
00:03:46.167 --> 00:03:48.500 align:middle line:84%
you'd, use it with parallel
streams and I'll explain why

80
00:03:48.500 --> 00:03:50.480 align:middle line:90%
in a moment.

81
00:03:50.480 --> 00:03:52.450 align:middle line:84%
So what we're going to
do here again, as usual,

82
00:03:52.450 --> 00:03:56.050 align:middle line:84%
is we're going to generate
a list of the consistently

83
00:03:56.050 --> 00:03:58.480 align:middle line:84%
capitalized and sorted
names of Hamlet characters,

84
00:03:58.480 --> 00:04:02.420 align:middle line:84%
starting with the letter H,
Horatio, Hamlet, and so on,

85
00:04:02.420 --> 00:04:04.420 align:middle line:84%
and then we're going to
take that character list

86
00:04:04.420 --> 00:04:07.210 align:middle line:84%
and we're going to convert
it into a parallel stream.

87
00:04:07.210 --> 00:04:09.100 align:middle line:84%
Now I should probably
hasten to add

88
00:04:09.100 --> 00:04:11.742 align:middle line:84%
that converting this list
into a parallel stream

89
00:04:11.742 --> 00:04:13.450 align:middle line:84%
is probably overkill
because there's only

90
00:04:13.450 --> 00:04:15.490 align:middle line:84%
a handful of
characters in Hamlet

91
00:04:15.490 --> 00:04:18.279 align:middle line:84%
that start with letter
H, but this point

92
00:04:18.279 --> 00:04:20.860 align:middle line:84%
generalizes to other
programs that are perhaps

93
00:04:20.860 --> 00:04:24.340 align:middle line:90%
more suitable for paralyzation.

94
00:04:24.340 --> 00:04:27.800 align:middle line:84%
We then call the reduce
terminal operation.

95
00:04:27.800 --> 00:04:31.280 align:middle line:84%
And, as you of course know, that
will start the wheels in motion

96
00:04:31.280 --> 00:04:33.190 align:middle line:84%
because it's a
terminal operation.

97
00:04:33.190 --> 00:04:35.980 align:middle line:84%
This is another one of those
interesting streams that

98
00:04:35.980 --> 00:04:40.090 align:middle line:84%
basically has a factory method,
no intermediate operations,

99
00:04:40.090 --> 00:04:41.750 align:middle line:90%
and a terminal operation.

100
00:04:41.750 --> 00:04:45.085 align:middle line:84%
So we're going to go ahead and
take the list of characters,

101
00:04:45.085 --> 00:04:49.720 align:middle line:84%
and in parallel, we're
going to go ahead and start

102
00:04:49.720 --> 00:04:52.450 align:middle line:90%
with an initial value of 0.

103
00:04:52.450 --> 00:04:54.400 align:middle line:84%
And then this is
the accumulator,

104
00:04:54.400 --> 00:04:58.040 align:middle line:84%
and this is the method, this
is the behavior, if you will,

105
00:04:58.040 --> 00:05:00.730 align:middle line:84%
that gets run in
each of the threads

106
00:05:00.730 --> 00:05:03.160 align:middle line:84%
in the pool of threads
that are running

107
00:05:03.160 --> 00:05:06.405 align:middle line:84%
in the background in the
[INAUDIBLE] join pool.

108
00:05:06.405 --> 00:05:07.780 align:middle line:84%
And, as you can
see, what it does

109
00:05:07.780 --> 00:05:10.120 align:middle line:84%
is it starts with
the value 0, which

110
00:05:10.120 --> 00:05:12.550 align:middle line:84%
would be the initial
value of the sum,

111
00:05:12.550 --> 00:05:15.820 align:middle line:84%
and then it keeps a running sum
where we take the current sum

112
00:05:15.820 --> 00:05:18.250 align:middle line:84%
and we add the
length of the string,

113
00:05:18.250 --> 00:05:20.130 align:middle line:90%
and that becomes the new sum.

114
00:05:20.130 --> 00:05:22.870 align:middle line:84%
And that gets done in
the background threads.

115
00:05:22.870 --> 00:05:25.300 align:middle line:84%
And then after the processing
is done in the background

116
00:05:25.300 --> 00:05:27.160 align:middle line:90%
threads, when we reach to the--

117
00:05:27.160 --> 00:05:29.590 align:middle line:84%
that's the apply phase, if
you will, in the parallel

118
00:05:29.590 --> 00:05:30.750 align:middle line:90%
streams model.

119
00:05:30.750 --> 00:05:33.860 align:middle line:84%
When we get to
the combine phase,

120
00:05:33.860 --> 00:05:37.330 align:middle line:84%
then the reduce operation,
which in this particular case

121
00:05:37.330 --> 00:05:40.930 align:middle line:84%
is simply the long
sum method reference,

122
00:05:40.930 --> 00:05:46.290 align:middle line:84%
is used to add the various
parts back together.

123
00:05:46.290 --> 00:05:50.440 align:middle line:84%
There is also another way to
do this, which uses the sum

124
00:05:50.440 --> 00:05:51.950 align:middle line:90%
terminal operation.

125
00:05:51.950 --> 00:05:55.387 align:middle line:84%
So if you don't want to have to
use reduce for whatever reason,

126
00:05:55.387 --> 00:05:57.220 align:middle line:84%
mostly for aesthetics
because they're really

127
00:05:57.220 --> 00:05:58.870 align:middle line:84%
the same thing
under the hood, you

128
00:05:58.870 --> 00:06:02.680 align:middle line:84%
could instead write the
code this way using sum.

129
00:06:02.680 --> 00:06:04.750 align:middle line:84%
So sum is a terminal
operation that

130
00:06:04.750 --> 00:06:09.110 align:middle line:84%
basically does what reduce does
if you're going to be summing.

131
00:06:09.110 --> 00:06:11.260 align:middle line:84%
So in this particular
case, for this example,

132
00:06:11.260 --> 00:06:15.580 align:middle line:84%
we once again have
our map of characters

133
00:06:15.580 --> 00:06:18.490 align:middle line:84%
that correspond to the
names of Hamlet characters

134
00:06:18.490 --> 00:06:20.800 align:middle line:90%
and the length of their names.

135
00:06:20.800 --> 00:06:25.040 align:middle line:84%
We convert that into a
list of just the values.

136
00:06:25.040 --> 00:06:27.590 align:middle line:90%
We then turn that into a stream.

137
00:06:27.590 --> 00:06:32.200 align:middle line:84%
And then we call the mapToLong
intermediate operation.

138
00:06:32.200 --> 00:06:36.310 align:middle line:84%
If you recall, we had looked at
mapToInt in an earlier lesson.

139
00:06:36.310 --> 00:06:38.350 align:middle line:84%
mapToLong long is
the same basic idea,

140
00:06:38.350 --> 00:06:40.960 align:middle line:84%
except that rather than
mapping the input to ints,

141
00:06:40.960 --> 00:06:44.090 align:middle line:84%
maps it to longs,
surprise, surprise.

142
00:06:44.090 --> 00:06:45.730 align:middle line:84%
And so what it does
here is it maps

143
00:06:45.730 --> 00:06:49.690 align:middle line:84%
the stream of long
objects, which

144
00:06:49.690 --> 00:06:52.690 align:middle line:84%
is what we would have
had here, into a stream

145
00:06:52.690 --> 00:06:54.460 align:middle line:90%
of long primitives.

146
00:06:54.460 --> 00:06:56.680 align:middle line:84%
And the way it works
is it basically passes

147
00:06:56.680 --> 00:07:03.580 align:middle line:84%
in the Long::longValue factory
method that takes a long

148
00:07:03.580 --> 00:07:07.020 align:middle line:84%
integer and convert it
into a long primitive.

149
00:07:07.020 --> 00:07:10.600 align:middle line:84%
So mapToLong will then
create a stream of longs,

150
00:07:10.600 --> 00:07:14.470 align:middle line:84%
and then we can go ahead and sum
that stream of long primitives

151
00:07:14.470 --> 00:07:16.690 align:middle line:90%
into a single long result.

152
00:07:16.690 --> 00:07:18.280 align:middle line:90%
So not that much different.

153
00:07:18.280 --> 00:07:22.070 align:middle line:84%
I bet it performs pretty much
exactly the same as this code.

154
00:07:22.070 --> 00:07:25.000 align:middle line:84%
It just is perhaps a little
bit more obvious to look at it

155
00:07:25.000 --> 00:07:26.715 align:middle line:90%
that it's summing the results.

156
00:07:26.715 --> 00:07:28.090 align:middle line:84%
Whereas, with this
code, you have

157
00:07:28.090 --> 00:07:31.390 align:middle line:84%
to kind of look a little closer
and go, what is that doing?

158
00:07:31.390 --> 00:07:32.710 align:middle line:90%
Is it creating the product?

159
00:07:32.710 --> 00:07:34.330 align:middle line:90%
Is it creating the sum?

160
00:07:34.330 --> 00:07:39.910 align:middle line:84%
In this case, it says sum
so we without any confusion

161
00:07:39.910 --> 00:07:45.940 align:middle line:84%
or any ambiguity that it's in
fact doing the sum operation.

162
00:07:45.940 --> 00:07:48.160 align:middle line:84%
You can also,
interestingly enough,

163
00:07:48.160 --> 00:07:51.040 align:middle line:84%
use the collect
terminal operation

164
00:07:51.040 --> 00:07:52.750 align:middle line:90%
to return a primitive value.

165
00:07:52.750 --> 00:07:55.660 align:middle line:84%
This isn't the most
common use of collect,

166
00:07:55.660 --> 00:07:57.550 align:middle line:90%
but it certainly works.

167
00:07:57.550 --> 00:07:59.800 align:middle line:84%
And what we're going to
do in this particular case

168
00:07:59.800 --> 00:08:02.650 align:middle line:84%
is we're going to
call collect, which

169
00:08:02.650 --> 00:08:06.640 align:middle line:84%
is going to trigger the stream
processing, that's no surprise,

170
00:08:06.640 --> 00:08:10.450 align:middle line:84%
and then we're going to use
the summingLong collector.

171
00:08:10.450 --> 00:08:12.820 align:middle line:84%
So summingLong is
the factory method

172
00:08:12.820 --> 00:08:17.230 align:middle line:84%
to find on the Collectors
utility class that goes

173
00:08:17.230 --> 00:08:20.800 align:middle line:90%
ahead and creates a collector.

174
00:08:20.800 --> 00:08:23.050 align:middle line:84%
And this collector
will then produce

175
00:08:23.050 --> 00:08:27.130 align:middle line:84%
the sum of the long
value function that's

176
00:08:27.130 --> 00:08:29.660 align:middle line:84%
applied to all the input
elements in the stream.

177
00:08:29.660 --> 00:08:32.110 align:middle line:84%
So what happens there is
that the input elements

178
00:08:32.110 --> 00:08:35.049 align:middle line:84%
in the stream, which
of course are longs,

179
00:08:35.049 --> 00:08:40.059 align:middle line:84%
as in capital L-o-n-g objects,
those will then be converted

180
00:08:40.059 --> 00:08:44.320 align:middle line:84%
by this long value
function, long::longValue,

181
00:08:44.320 --> 00:08:47.020 align:middle line:84%
they'll be converted into
long primitives and then those

182
00:08:47.020 --> 00:08:51.190 align:middle line:84%
things will then be summed up
by the summingLong collector,

183
00:08:51.190 --> 00:08:55.060 align:middle line:84%
which of course, will ultimately
return a single result,

184
00:08:55.060 --> 00:08:57.350 align:middle line:84%
which is the sum
of name lengths,

185
00:08:57.350 --> 00:08:59.050 align:middle line:90%
which is a primitive law.

186
00:08:59.050 --> 00:09:03.670 align:middle line:84%
So hopefully that's pretty
clear from looking at the code.

187
00:09:03.670 --> 00:09:07.400 align:middle line:84%
As a general rule of thumb, any
of these things work just fine.

188
00:09:07.400 --> 00:09:10.670 align:middle line:84%
It's probably a little bit
more intuitive arguably,

189
00:09:10.670 --> 00:09:15.190 align:middle line:84%
to use this code than to
use this code, if you're

190
00:09:15.190 --> 00:09:19.870 align:middle line:84%
summing of course, or this
code, but it's up to you.

191
00:09:19.870 --> 00:09:22.090 align:middle line:84%
A good Java Streams
programmer should

192
00:09:22.090 --> 00:09:24.640 align:middle line:84%
be able to understand any of
those different approaches

193
00:09:24.640 --> 00:09:26.890 align:middle line:84%
that we just talked
about without having

194
00:09:26.890 --> 00:09:29.540 align:middle line:90%
to scratch their head too long.