WEBVTT

1
00:00:00.000 --> 00:00:01.090 align:middle line:90%


2
00:00:01.090 --> 00:00:04.630 align:middle line:84%
Now that we've talked about
collect and reduce, let's

3
00:00:04.630 --> 00:00:07.420 align:middle line:84%
take a step back and compare
and contrast these two terminal

4
00:00:07.420 --> 00:00:10.210 align:middle line:84%
operations because they
have some things in common,

5
00:00:10.210 --> 00:00:13.630 align:middle line:84%
but they also have some
important differences.

6
00:00:13.630 --> 00:00:18.290 align:middle line:84%
So terminal operations produce
the results in different ways.

7
00:00:18.290 --> 00:00:22.010 align:middle line:84%
Now, for sequential streams,
it's not really a big deal.

8
00:00:22.010 --> 00:00:25.130 align:middle line:84%
But for parallel streams
as we'll cover later,

9
00:00:25.130 --> 00:00:27.530 align:middle line:84%
it's a really big deal
whether you use collect

10
00:00:27.530 --> 00:00:29.122 align:middle line:90%
or you use reduce.

11
00:00:29.122 --> 00:00:30.580 align:middle line:84%
But for right now,
we're just going

12
00:00:30.580 --> 00:00:32.600 align:middle line:84%
to talk about their
properties and not

13
00:00:32.600 --> 00:00:34.850 align:middle line:84%
worry too much about the
parallelism aspects, which

14
00:00:34.850 --> 00:00:37.440 align:middle line:90%
will be covered shortly.

15
00:00:37.440 --> 00:00:40.880 align:middle line:84%
So the two key ways in
which they differ is reduce

16
00:00:40.880 --> 00:00:43.167 align:middle line:84%
creates something known
as an immutable value.

17
00:00:43.167 --> 00:00:45.500 align:middle line:84%
Or it should create something
that's an immutable value.

18
00:00:45.500 --> 00:00:47.960 align:middle line:84%
It's expecting to create
an immutable value.

19
00:00:47.960 --> 00:00:50.420 align:middle line:84%
And that simply means
that once it's created,

20
00:00:50.420 --> 00:00:51.780 align:middle line:90%
it's not going to be changed.

21
00:00:51.780 --> 00:00:53.620 align:middle line:90%
It's only going to be read.

22
00:00:53.620 --> 00:00:56.470 align:middle line:84%
So here's a very simple
example to illustrate this.

23
00:00:56.470 --> 00:00:59.140 align:middle line:84%
This is the
factorial method that

24
00:00:59.140 --> 00:01:03.960 align:middle line:84%
uses a stream to compute the
nth factorial using reduce.

25
00:01:03.960 --> 00:01:06.690 align:middle line:84%
And I've kind of visualized
this a little bit

26
00:01:06.690 --> 00:01:11.530 align:middle line:84%
just to make it somewhat
easier to get your head around.

27
00:01:11.530 --> 00:01:15.810 align:middle line:84%
So we're going to start out by
using the rangeClosed method

28
00:01:15.810 --> 00:01:18.510 align:middle line:90%
on the LongStream interface.

29
00:01:18.510 --> 00:01:22.440 align:middle line:84%
So LongStream, of course, is
a specialization of stream

30
00:01:22.440 --> 00:01:23.970 align:middle line:90%
that works for longs.

31
00:01:23.970 --> 00:01:29.340 align:middle line:84%
And rangeClosed will generate a
stream of longs from one to n.

32
00:01:29.340 --> 00:01:32.513 align:middle line:84%
So just to make this simple,
let's say we give n to be 4.

33
00:01:32.513 --> 00:01:33.930 align:middle line:84%
So on the right-hand
side, you can

34
00:01:33.930 --> 00:01:39.550 align:middle line:84%
see we start out with a
range of longs from 1 to 4.

35
00:01:39.550 --> 00:01:43.070 align:middle line:84%
Then what happens is the
reductions take place.

36
00:01:43.070 --> 00:01:45.370 align:middle line:84%
And so the code that
you see in red here,

37
00:01:45.370 --> 00:01:52.750 align:middle line:84%
which is reduce open paren
1 comma open paren a comma b

38
00:01:52.750 --> 00:01:55.450 align:middle line:84%
closed paren arrow
a times b, that

39
00:01:55.450 --> 00:01:59.210 align:middle line:84%
is the lambda expression
that's passed in to reduce.

40
00:01:59.210 --> 00:02:02.530 align:middle line:84%
I'm going to visualize what
actually happened step by step.

41
00:02:02.530 --> 00:02:03.940 align:middle line:84%
And so what reduce
is going to do

42
00:02:03.940 --> 00:02:07.240 align:middle line:84%
is it's going to walk
through that range of longs.

43
00:02:07.240 --> 00:02:11.340 align:middle line:84%
And it's going to combine
two immutable values,

44
00:02:11.340 --> 00:02:12.870 align:middle line:84%
in this case by
multiplying them,

45
00:02:12.870 --> 00:02:15.920 align:middle line:84%
to produce a new immutable
value, which is the result.

46
00:02:15.920 --> 00:02:17.670 align:middle line:84%
So as you can see here,
the way this works

47
00:02:17.670 --> 00:02:21.240 align:middle line:84%
is we start out with the value
1 because that was passed in

48
00:02:21.240 --> 00:02:24.420 align:middle line:84%
is the seed value, the
initial value for reduce.

49
00:02:24.420 --> 00:02:27.970 align:middle line:84%
And then we multiply 1
by 1, which equals 1.

50
00:02:27.970 --> 00:02:32.850 align:middle line:84%
And then we multiply that
value 1 by the next element

51
00:02:32.850 --> 00:02:35.040 align:middle line:90%
in the stream, which is 2.

52
00:02:35.040 --> 00:02:41.010 align:middle line:84%
And that yields 3, and
then we multiply the 3

53
00:02:41.010 --> 00:02:43.780 align:middle line:90%
by the next value in the stream.

54
00:02:43.780 --> 00:02:47.130 align:middle line:84%
And so 2 times 3
is going to be 6.

55
00:02:47.130 --> 00:02:48.900 align:middle line:84%
And then we're
going to multiply 6

56
00:02:48.900 --> 00:02:51.270 align:middle line:84%
by the next value in
the stream, which is 4

57
00:02:51.270 --> 00:02:52.358 align:middle line:90%
and we'll end up with 24.

58
00:02:52.358 --> 00:02:54.900 align:middle line:84%
So you can see how these things
just kind of work through one

59
00:02:54.900 --> 00:02:59.152 align:middle line:84%
at a time, taking the values
and multiplying them together,

60
00:02:59.152 --> 00:03:00.610 align:middle line:84%
this particular
example, of course,

61
00:03:00.610 --> 00:03:03.330 align:middle line:84%
being a sequential
implementation, as opposed

62
00:03:03.330 --> 00:03:05.920 align:middle line:90%
to a parallel implementation.

63
00:03:05.920 --> 00:03:08.410 align:middle line:84%
So that's effectively
how reduce works.

64
00:03:08.410 --> 00:03:10.410 align:middle line:84%
And as you can see, at
every step along the way,

65
00:03:10.410 --> 00:03:13.360 align:middle line:84%
the values that are
created are immutable.

66
00:03:13.360 --> 00:03:16.350 align:middle line:84%
They're only read and used
for the next processing

67
00:03:16.350 --> 00:03:20.560 align:middle line:90%
phase in the stream for reduce.

68
00:03:20.560 --> 00:03:26.930 align:middle line:84%
In contrast, collect
mutates an existing value.

69
00:03:26.930 --> 00:03:29.875 align:middle line:84%
So let's take a look
at another example.

70
00:03:29.875 --> 00:03:31.750 align:middle line:84%
This is actually a fairly
interesting example

71
00:03:31.750 --> 00:03:35.920 align:middle line:84%
that we're going to see to
illustrate how mutable result

72
00:03:35.920 --> 00:03:39.400 align:middle line:84%
containers are
used with collect.

73
00:03:39.400 --> 00:03:42.820 align:middle line:84%
This particular example
is in my ex14 folder

74
00:03:42.820 --> 00:03:44.463 align:middle line:90%
in the GitHub repository.

75
00:03:44.463 --> 00:03:45.880 align:middle line:84%
And what we're
going to do here is

76
00:03:45.880 --> 00:03:50.470 align:middle line:84%
we're going to create a
set of all the unique words

77
00:03:50.470 --> 00:03:53.028 align:middle line:90%
in the works of Shakespeare.

78
00:03:53.028 --> 00:03:54.820 align:middle line:84%
For some reason, I'm
a big Shakespeare fan.

79
00:03:54.820 --> 00:03:57.640 align:middle line:84%
So lots of my examples work
on works of Shakespeare

80
00:03:57.640 --> 00:04:01.060 align:middle line:84%
if for no other reason that
I can get open source access

81
00:04:01.060 --> 00:04:03.190 align:middle line:84%
to all the text of the
works of Shakespeare.

82
00:04:03.190 --> 00:04:07.060 align:middle line:84%
And it's fairly large, some
800,000 words I believe.

83
00:04:07.060 --> 00:04:09.760 align:middle line:84%
So it gives us something
interesting to process

84
00:04:09.760 --> 00:04:11.955 align:middle line:90%
and do text analysis on.

85
00:04:11.955 --> 00:04:13.330 align:middle line:84%
So in this particular
case, we're

86
00:04:13.330 --> 00:04:18.279 align:middle line:84%
going to end up ultimately with
a set of strings or character

87
00:04:18.279 --> 00:04:21.543 align:middle line:84%
sequences, which are the
unique words in Shakespeare.

88
00:04:21.543 --> 00:04:22.460 align:middle line:90%
Here's how this works.

89
00:04:22.460 --> 00:04:24.850 align:middle line:84%
We're first going to call
this method called getInput.

90
00:04:24.850 --> 00:04:27.430 align:middle line:84%
And all that thing
does is it opens up

91
00:04:27.430 --> 00:04:30.370 align:middle line:84%
a file, which in this case
contains the complete works

92
00:04:30.370 --> 00:04:31.720 align:middle line:90%
of Shakespeare.

93
00:04:31.720 --> 00:04:35.110 align:middle line:84%
And it splits that
file up by word.

94
00:04:35.110 --> 00:04:42.950 align:middle line:84%
So we're going to end up with
basically a list of words

95
00:04:42.950 --> 00:04:45.320 align:middle line:84%
that correspond to all
the words in Shakespeare.

96
00:04:45.320 --> 00:04:47.330 align:middle line:84%
This is not taking into
account duplicates.

97
00:04:47.330 --> 00:04:50.000 align:middle line:84%
It's just all the
words in Shakespeare.

98
00:04:50.000 --> 00:04:51.950 align:middle line:84%
We then go ahead and
convert that list

99
00:04:51.950 --> 00:04:56.840 align:middle line:84%
of words of Shakespeare into a
stream of words of Shakespeare.

100
00:04:56.840 --> 00:05:00.835 align:middle line:84%
And then we're going to go ahead
and lowercase all the words.

101
00:05:00.835 --> 00:05:02.210 align:middle line:84%
So we're going to
take each word.

102
00:05:02.210 --> 00:05:03.980 align:middle line:84%
We're going to
convert it to a string

103
00:05:03.980 --> 00:05:06.100 align:middle line:84%
because it comes in as
a character sequence.

104
00:05:06.100 --> 00:05:08.700 align:middle line:84%
And then we're going to
lowercase that string.

105
00:05:08.700 --> 00:05:10.820 align:middle line:84%
So the result of
this map operation

106
00:05:10.820 --> 00:05:17.600 align:middle line:84%
is now a stream of lowercased,
potentially duplicated versions

107
00:05:17.600 --> 00:05:20.000 align:middle line:90%
of words in Shakespeare.

108
00:05:20.000 --> 00:05:21.500 align:middle line:84%
And the last thing
we're going to do

109
00:05:21.500 --> 00:05:25.520 align:middle line:84%
is we're going to go ahead
and collect this whole stream

110
00:05:25.520 --> 00:05:26.942 align:middle line:90%
into a collection.

111
00:05:26.942 --> 00:05:29.150 align:middle line:84%
And the particular collection
we're going to use here

112
00:05:29.150 --> 00:05:31.550 align:middle line:90%
will be a HashSet.

113
00:05:31.550 --> 00:05:34.610 align:middle line:84%
And a HashSet, as
you may know, is

114
00:05:34.610 --> 00:05:40.430 align:middle line:84%
going to have unique
keys because it's a set.

115
00:05:40.430 --> 00:05:42.223 align:middle line:90%
So sets have no duplicates.

116
00:05:42.223 --> 00:05:43.640 align:middle line:84%
It just happens
to be a set that's

117
00:05:43.640 --> 00:05:45.433 align:middle line:90%
implemented as a hash table.

118
00:05:45.433 --> 00:05:47.600 align:middle line:84%
We could obviously also use
a tree set here as well.

119
00:05:47.600 --> 00:05:51.410 align:middle line:84%
It wouldn't change the
analysis that we're doing.

120
00:05:51.410 --> 00:05:54.110 align:middle line:84%
So what we're doing here is
we're accumulating the stream

121
00:05:54.110 --> 00:05:54.950 align:middle line:90%
elements into it.

122
00:05:54.950 --> 00:05:57.620 align:middle line:84%
And what we end up with
at the end of all this

123
00:05:57.620 --> 00:06:00.890 align:middle line:90%
will be a set of unique words.

124
00:06:00.890 --> 00:06:03.260 align:middle line:84%
Now, the thing to note
is as this program

125
00:06:03.260 --> 00:06:06.350 align:middle line:84%
is running, what we're
doing is we're accumulating

126
00:06:06.350 --> 00:06:11.210 align:middle line:84%
the elements in the stream
into this HashSet, which

127
00:06:11.210 --> 00:06:14.978 align:middle line:84%
is known as the mutable
result container.

128
00:06:14.978 --> 00:06:16.520 align:middle line:84%
And when we talk a
little bit further

129
00:06:16.520 --> 00:06:18.050 align:middle line:84%
about collectors
in detail, you'll

130
00:06:18.050 --> 00:06:19.490 align:middle line:90%
see why it's called that.

131
00:06:19.490 --> 00:06:22.520 align:middle line:84%
But basically, it's updating
the HashSet every time

132
00:06:22.520 --> 00:06:24.290 align:middle line:90%
a new element is added to it.

133
00:06:24.290 --> 00:06:28.220 align:middle line:84%
And that's very different from
reduce, which would simply

134
00:06:28.220 --> 00:06:30.770 align:middle line:84%
create immutable values and
then do something to them,

135
00:06:30.770 --> 00:06:34.370 align:middle line:84%
like multiply them, or add
them, or something, in order

136
00:06:34.370 --> 00:06:37.400 align:middle line:84%
to be able to end up
with a single value

137
00:06:37.400 --> 00:06:39.430 align:middle line:90%
when everything was finished.