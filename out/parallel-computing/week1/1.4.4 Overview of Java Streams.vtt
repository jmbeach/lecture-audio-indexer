WEBVTT

1
00:00:00.000 --> 00:00:00.500 align:middle line:90%


2
00:00:00.500 --> 00:00:03.390 align:middle line:84%
Now that we've talked about
the phases in Java Streams

3
00:00:03.390 --> 00:00:06.120 align:middle line:84%
and we've had a chance to
visualize how they work,

4
00:00:06.120 --> 00:00:09.510 align:middle line:84%
let's talk about the differences
between sequential and parallel

5
00:00:09.510 --> 00:00:10.620 align:middle line:90%
streams.

6
00:00:10.620 --> 00:00:13.110 align:middle line:84%
And you'll see this is one
of the most powerful features

7
00:00:13.110 --> 00:00:16.710 align:middle line:84%
of the Java Streams framework
is the ability to automatically

8
00:00:16.710 --> 00:00:19.230 align:middle line:84%
move from a sequential
processing model

9
00:00:19.230 --> 00:00:21.270 align:middle line:84%
to a parallel processing
model with very

10
00:00:21.270 --> 00:00:24.410 align:middle line:90%
little effort on your part.

11
00:00:24.410 --> 00:00:27.860 align:middle line:84%
So by default, operations in
a stream run sequentially.

12
00:00:27.860 --> 00:00:31.160 align:middle line:84%
All the examples we've looked
at so far either use the of()

13
00:00:31.160 --> 00:00:34.522 align:middle line:84%
method or use the
.stream method.

14
00:00:34.522 --> 00:00:36.230 align:middle line:84%
And that's what we're
going to cover here

15
00:00:36.230 --> 00:00:38.290 align:middle line:90%
in the first several weeks.

16
00:00:38.290 --> 00:00:41.380 align:middle line:84%
It's trivial, however, to
convert a stream to run

17
00:00:41.380 --> 00:00:45.250 align:middle line:84%
in parallel simply by
saying parallel stream,

18
00:00:45.250 --> 00:00:49.030 align:middle line:84%
or .parallel as we'll see
later, instead of saying stream.

19
00:00:49.030 --> 00:00:51.460 align:middle line:84%
Now we're going to cover
parallel streams extensively

20
00:00:51.460 --> 00:00:52.310 align:middle line:90%
later in the course.

21
00:00:52.310 --> 00:00:54.730 align:middle line:84%
But I want to give you a
quick summary of what's

22
00:00:54.730 --> 00:00:59.770 align:middle line:84%
coming so you'll see the big
picture of why Java streams is

23
00:00:59.770 --> 00:01:02.530 align:middle line:84%
so relevant in the context
of parallel functional

24
00:01:02.530 --> 00:01:04.400 align:middle line:90%
programming.

25
00:01:04.400 --> 00:01:07.220 align:middle line:84%
A parallel stream
splits the elements up

26
00:01:07.220 --> 00:01:10.010 align:middle line:84%
into multiple
chunks and then uses

27
00:01:10.010 --> 00:01:13.190 align:middle line:84%
something called the common
fork-join-pool to process

28
00:01:13.190 --> 00:01:16.310 align:middle line:90%
these chunks independently.

29
00:01:16.310 --> 00:01:18.870 align:middle line:84%
And we'll talk at length about
the common fork-join-pool.

30
00:01:18.870 --> 00:01:21.140 align:middle line:84%
But think of it at the
moment as a pool of threads

31
00:01:21.140 --> 00:01:24.980 align:middle line:84%
that very efficiently can
process tasks or subtasks that

32
00:01:24.980 --> 00:01:28.200 align:middle line:84%
are given to it to
run in parallel.

33
00:01:28.200 --> 00:01:31.950 align:middle line:84%
As we'll also see, the reason
for using parallel streams

34
00:01:31.950 --> 00:01:34.920 align:middle line:84%
is that it typically ends up
running much more efficiently

35
00:01:34.920 --> 00:01:38.580 align:middle line:84%
and much more scalability on
modern multicore processors

36
00:01:38.580 --> 00:01:42.810 align:middle line:84%
than simply using a sequential
stream with one thread.

37
00:01:42.810 --> 00:01:48.210 align:middle line:84%
And in fact, we'll take a look
at this SearchStreamGang case

38
00:01:48.210 --> 00:01:51.370 align:middle line:84%
study app over and over
again throughout this course.

39
00:01:51.370 --> 00:01:54.630 align:middle line:84%
And you'll see very quickly that
the sequential versions take

40
00:01:54.630 --> 00:01:57.482 align:middle line:84%
much longer to run than
the parallel versions,

41
00:01:57.482 --> 00:01:59.190 align:middle line:84%
because the parallel
versions, of course,

42
00:01:59.190 --> 00:02:02.130 align:middle line:84%
are able to leverage the
multiple processor cores.

43
00:02:02.130 --> 00:02:04.890 align:middle line:84%
This particular
set of results were

44
00:02:04.890 --> 00:02:09.000 align:middle line:84%
achieved on a quad
core laptop I have

45
00:02:09.000 --> 00:02:10.995 align:middle line:90%
that has 32 gigabytes of RAM.

46
00:02:10.995 --> 00:02:12.990 align:middle line:90%
It's a pretty powerful machine.

47
00:02:12.990 --> 00:02:15.570 align:middle line:84%
And it actually has
eight effective cores,

48
00:02:15.570 --> 00:02:18.420 align:middle line:84%
because each of the cores
in the quad core part

49
00:02:18.420 --> 00:02:19.410 align:middle line:90%
are hyperthreaded.

50
00:02:19.410 --> 00:02:23.220 align:middle line:84%
And I'll talk more about the
configuration a bit later.

51
00:02:23.220 --> 00:02:26.940 align:middle line:84%
Ideally the output of
a behavior in a stream

52
00:02:26.940 --> 00:02:31.537 align:middle line:84%
should only depend on the
arguments it gets as its input.

53
00:02:31.537 --> 00:02:33.120 align:middle line:84%
And this is just a
fancy way of saying

54
00:02:33.120 --> 00:02:34.860 align:middle line:84%
that you don't want
to have behaviors

55
00:02:34.860 --> 00:02:36.660 align:middle line:90%
that have side effects.

56
00:02:36.660 --> 00:02:40.440 align:middle line:84%
You just want them to take their
input and then produce output.

57
00:02:40.440 --> 00:02:43.410 align:middle line:84%
Here's a very simple
example of a method that

58
00:02:43.410 --> 00:02:45.850 align:middle line:90%
abides by those constraints.

59
00:02:45.850 --> 00:02:47.850 align:middle line:84%
This is the capitalize
method that we've been

60
00:02:47.850 --> 00:02:50.870 align:middle line:90%
showing in our Hamlet example.

61
00:02:50.870 --> 00:02:54.650 align:middle line:84%
And as you can see, it
takes a string as input.

62
00:02:54.650 --> 00:02:57.050 align:middle line:84%
And then it goes ahead and
consistently capitalizes

63
00:02:57.050 --> 00:02:57.700 align:middle line:90%
that string.

64
00:02:57.700 --> 00:02:59.780 align:middle line:84%
So the first
character's uppercased,

65
00:02:59.780 --> 00:03:02.360 align:middle line:84%
and all the subsequent
characters are lowercased.

66
00:03:02.360 --> 00:03:04.640 align:middle line:84%
So that's an example
of a method that

67
00:03:04.640 --> 00:03:07.040 align:middle line:84%
has no side effects other than
returning an output, which

68
00:03:07.040 --> 00:03:09.670 align:middle line:90%
isn't really a side effect.

69
00:03:09.670 --> 00:03:12.250 align:middle line:84%
The reason why we're
cautious with side effects

70
00:03:12.250 --> 00:03:14.620 align:middle line:84%
is that behaviors
with side effects

71
00:03:14.620 --> 00:03:19.270 align:middle line:84%
can incur race conditions
when used in parallel streams.

72
00:03:19.270 --> 00:03:21.490 align:middle line:84%
And you may recall
from other discussions

73
00:03:21.490 --> 00:03:24.100 align:middle line:84%
we've had in earlier
courses about concurrency

74
00:03:24.100 --> 00:03:28.540 align:middle line:84%
and synchronization that a race
condition is a bug or a defect

75
00:03:28.540 --> 00:03:31.390 align:middle line:84%
or a hazard that can
arise in software when

76
00:03:31.390 --> 00:03:35.620 align:middle line:84%
an application depends on the
sequence or timing of threads

77
00:03:35.620 --> 00:03:37.780 align:middle line:84%
in order for it to
operate properly.

78
00:03:37.780 --> 00:03:39.550 align:middle line:84%
So we don't want
race conditions.

79
00:03:39.550 --> 00:03:41.800 align:middle line:84%
And one of the easiest ways
to avoid race conditions

80
00:03:41.800 --> 00:03:45.230 align:middle line:84%
is to have behaviors
with no side effects.

81
00:03:45.230 --> 00:03:47.110 align:middle line:84%
Let's take a look at an
example to illustrate

82
00:03:47.110 --> 00:03:51.070 align:middle line:84%
a buggy program that
has side effects that

83
00:03:51.070 --> 00:03:54.760 align:middle line:84%
will cause chaos and insanity
when run in parallel.

84
00:03:54.760 --> 00:03:57.580 align:middle line:84%
This little code
snippet, which you

85
00:03:57.580 --> 00:04:01.330 align:middle line:84%
can find in my ex16 folder
in my GitHub account,

86
00:04:01.330 --> 00:04:04.930 align:middle line:84%
tries to compute
the nth factorial.

87
00:04:04.930 --> 00:04:08.950 align:middle line:84%
And the way it does it is it
makes one instance of a helper

88
00:04:08.950 --> 00:04:10.880 align:middle line:90%
class called Total.

89
00:04:10.880 --> 00:04:13.540 align:middle line:84%
As you can see here,
Total keeps a field

90
00:04:13.540 --> 00:04:16.329 align:middle line:84%
called mTotal,
which is effectively

91
00:04:16.329 --> 00:04:18.370 align:middle line:90%
shared mutable state.

92
00:04:18.370 --> 00:04:21.970 align:middle line:84%
And that's because anytime
the mult method is called,

93
00:04:21.970 --> 00:04:26.530 align:middle line:84%
the mult method will
multiply mTotal by n

94
00:04:26.530 --> 00:04:28.630 align:middle line:90%
and update the value mTotal.

95
00:04:28.630 --> 00:04:31.690 align:middle line:84%
So there's only one
instance of mTotal.

96
00:04:31.690 --> 00:04:34.970 align:middle line:84%
And that instance is
shared by multiple threads.

97
00:04:34.970 --> 00:04:38.720 align:middle line:84%
So that makes it shared mutable
state, because it changes.

98
00:04:38.720 --> 00:04:40.220 align:middle line:84%
Here's what the
program tries to do.

99
00:04:40.220 --> 00:04:45.770 align:middle line:84%
We go ahead and create a stream
of longs between the range of 1

100
00:04:45.770 --> 00:04:47.750 align:middle line:90%
to n inclusively.

101
00:04:47.750 --> 00:04:50.830 align:middle line:84%
That's what the
rangeClosed method does.

102
00:04:50.830 --> 00:04:53.080 align:middle line:84%
And then in
parallel, we're going

103
00:04:53.080 --> 00:04:56.500 align:middle line:84%
to multiply each
of those elements.

104
00:04:56.500 --> 00:04:58.420 align:middle line:84%
And what that's going
to try to do is it's

105
00:04:58.420 --> 00:05:01.000 align:middle line:84%
going to try to update
the mTotal method

106
00:05:01.000 --> 00:05:04.750 align:middle line:84%
in the Total class by
multiplying it by n.

107
00:05:04.750 --> 00:05:08.050 align:middle line:84%
Now, the problem is, when
you run this in parallel,

108
00:05:08.050 --> 00:05:10.720 align:middle line:84%
you'll have multiple
threads simultaneously

109
00:05:10.720 --> 00:05:13.630 align:middle line:90%
updating the value of mTotal.

110
00:05:13.630 --> 00:05:16.270 align:middle line:84%
And that, of course, will
lead to chaos and insanity

111
00:05:16.270 --> 00:05:17.210 align:middle line:90%
in race conditions.

112
00:05:17.210 --> 00:05:20.460 align:middle line:84%
And you'll get very
strange results.

113
00:05:20.460 --> 00:05:25.170 align:middle line:84%
These results occur because
the update to the mTotal field

114
00:05:25.170 --> 00:05:27.660 align:middle line:84%
is not protected by any
kind of synchronizer

115
00:05:27.660 --> 00:05:30.840 align:middle line:84%
or any kind of compare-and-swap
operation or anything.

116
00:05:30.840 --> 00:05:34.140 align:middle line:90%
So it'll end up being corrupted.

117
00:05:34.140 --> 00:05:36.000 align:middle line:84%
There's also other
problems here having

118
00:05:36.000 --> 00:05:38.970 align:middle line:84%
to do with inconsistent
memory visibility.

119
00:05:38.970 --> 00:05:41.250 align:middle line:84%
The bottom line is, this
program is full of bugs.

120
00:05:41.250 --> 00:05:44.040 align:middle line:84%
And this is not the way you
should write parallel code.

121
00:05:44.040 --> 00:05:47.670 align:middle line:84%
So I'm using this as a counter
example of what not to do.

122
00:05:47.670 --> 00:05:49.560 align:middle line:84%
Keep in mind that
only you can prevent

123
00:05:49.560 --> 00:05:51.210 align:middle line:90%
these concurrency hazards.

124
00:05:51.210 --> 00:05:52.980 align:middle line:90%
The compiler won't save you.

125
00:05:52.980 --> 00:05:56.310 align:middle line:84%
The Java execution environment,
or JVM, won't save you.

126
00:05:56.310 --> 00:05:58.590 align:middle line:84%
You have to learn how
to use the parallel

127
00:05:58.590 --> 00:06:01.830 align:middle line:84%
streams processing mechanisms
to do this correctly.

128
00:06:01.830 --> 00:06:04.910 align:middle line:84%
And of course, I'll show
you later how to do this.