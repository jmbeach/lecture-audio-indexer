WEBVTT

1
00:00:00.000 --> 00:00:00.790 align:middle line:90%


2
00:00:00.790 --> 00:00:03.940 align:middle line:84%
Now that we've given an overview
of the concepts of parallelism,

3
00:00:03.940 --> 00:00:06.160 align:middle line:84%
some of the parallels
and frameworks in Java,

4
00:00:06.160 --> 00:00:08.690 align:middle line:84%
and the case studies
we'll be using,

5
00:00:08.690 --> 00:00:10.870 align:middle line:84%
let's start diving into
the first major topic

6
00:00:10.870 --> 00:00:14.520 align:middle line:84%
of the course, which
is Java streams.

7
00:00:14.520 --> 00:00:18.030 align:middle line:84%
In this part of the lesson,
I'll explain the Java streams

8
00:00:18.030 --> 00:00:21.750 align:middle line:84%
structure and functionality,
starting with the fundamentals

9
00:00:21.750 --> 00:00:23.100 align:middle line:90%
of streams.

10
00:00:23.100 --> 00:00:26.400 align:middle line:84%
And then we'll also talk about
the three streams phases, which

11
00:00:26.400 --> 00:00:29.970 align:middle line:84%
we outlined earlier, which
involve splitting, applying,

12
00:00:29.970 --> 00:00:32.759 align:middle line:90%
and combining.

13
00:00:32.759 --> 00:00:34.980 align:middle line:84%
Java streams are a
framework that was first

14
00:00:34.980 --> 00:00:38.280 align:middle line:84%
introduced into the Java
class library in Java 8,

15
00:00:38.280 --> 00:00:40.367 align:middle line:90%
which was in 2014.

16
00:00:40.367 --> 00:00:42.450 align:middle line:84%
And of course, it's been
evolved and improved ever

17
00:00:42.450 --> 00:00:44.480 align:middle line:90%
since that point.

18
00:00:44.480 --> 00:00:46.800 align:middle line:84%
The different versions
of this framework

19
00:00:46.800 --> 00:00:49.270 align:middle line:84%
can be seen in a
number of places.

20
00:00:49.270 --> 00:00:50.880 align:middle line:84%
This book, Modern
Java in Action,

21
00:00:50.880 --> 00:00:54.150 align:middle line:84%
gives you a nice description
of how it's evolved over time.

22
00:00:54.150 --> 00:00:55.650 align:middle line:84%
The links at the
bottom of the slide

23
00:00:55.650 --> 00:00:57.567 align:middle line:84%
here also give you some
examples of new things

24
00:00:57.567 --> 00:01:00.440 align:middle line:84%
have been added
in later versions.

25
00:01:00.440 --> 00:01:02.110 align:middle line:90%
So what is a stream?

26
00:01:02.110 --> 00:01:04.640 align:middle line:84%
A stream is
essentially a pipeline

27
00:01:04.640 --> 00:01:07.280 align:middle line:84%
of so-called
aggregate operations

28
00:01:07.280 --> 00:01:10.400 align:middle line:84%
that process a sequence of
elements, which we sometimes

29
00:01:10.400 --> 00:01:14.210 align:middle line:90%
call values or data.

30
00:01:14.210 --> 00:01:15.880 align:middle line:84%
You can think of an
aggregate operation

31
00:01:15.880 --> 00:01:19.210 align:middle line:84%
as essentially something known
as a higher-order function.

32
00:01:19.210 --> 00:01:21.310 align:middle line:84%
And a higher-order
function is just a function

33
00:01:21.310 --> 00:01:22.880 align:middle line:90%
that applies a function.

34
00:01:22.880 --> 00:01:24.940 align:middle line:84%
And in this case, the
higher-order functions

35
00:01:24.940 --> 00:01:29.260 align:middle line:84%
apply behavior parameters
to every element

36
00:01:29.260 --> 00:01:32.930 align:middle line:84%
that's in a stream
that flows through it.

37
00:01:32.930 --> 00:01:35.210 align:middle line:84%
The use of these
behaviors enables

38
00:01:35.210 --> 00:01:38.630 align:middle line:84%
what's known as behavioral
parameterization, which

39
00:01:38.630 --> 00:01:42.080 align:middle line:84%
helps us to simplify coping
with changing requirements

40
00:01:42.080 --> 00:01:45.950 align:middle line:84%
because we don't have to change
the overall pipeline per se.

41
00:01:45.950 --> 00:01:48.440 align:middle line:84%
We simply change the behaviors
that are passed in in order

42
00:01:48.440 --> 00:01:53.540 align:middle line:84%
to modify what the
pipeline's output will be.

43
00:01:53.540 --> 00:01:57.620 align:middle line:84%
In theory, a stream is
conceptually unbounded.

44
00:01:57.620 --> 00:01:59.780 align:middle line:84%
Although in practice,
it's almost always bounded

45
00:01:59.780 --> 00:02:01.070 align:middle line:90%
by various constraints.

46
00:02:01.070 --> 00:02:04.340 align:middle line:84%
You don't have unlimited
input from files.

47
00:02:04.340 --> 00:02:06.660 align:middle line:84%
You don't have unlimited
input from, say,

48
00:02:06.660 --> 00:02:09.590 align:middle line:84%
a Java collection like an
array list or a hash map.

49
00:02:09.590 --> 00:02:11.990 align:middle line:84%
So instead, you typically
have practical constraints

50
00:02:11.990 --> 00:02:14.810 align:middle line:84%
that bound the amount of
processing that a stream does.

51
00:02:14.810 --> 00:02:16.508 align:middle line:84%
But in theory, it
could run forever.

52
00:02:16.508 --> 00:02:18.050 align:middle line:84%
In fact, we'll show
you some examples

53
00:02:18.050 --> 00:02:22.280 align:middle line:84%
of ways of creating unbounded
streams here shortly.

54
00:02:22.280 --> 00:02:24.942 align:middle line:84%
We're going to use a very
simple case study example

55
00:02:24.942 --> 00:02:26.150 align:middle line:90%
throughout this introduction.

56
00:02:26.150 --> 00:02:28.910 align:middle line:84%
This is actually not one of
the more sophisticated examples

57
00:02:28.910 --> 00:02:30.710 align:middle line:90%
we talked about before.

58
00:02:30.710 --> 00:02:33.050 align:middle line:84%
This particular example
is going to take

59
00:02:33.050 --> 00:02:36.740 align:middle line:84%
a list of the
names of characters

60
00:02:36.740 --> 00:02:39.140 align:middle line:90%
from Shakespeare's play Hamlet.

61
00:02:39.140 --> 00:02:43.550 align:middle line:84%
And it's going to only select
ones whose first letter is

62
00:02:43.550 --> 00:02:46.070 align:middle line:90%
an uppercase or lowercase h.

63
00:02:46.070 --> 00:02:49.670 align:middle line:84%
It will then capitalize the
first letter consistently

64
00:02:49.670 --> 00:02:51.560 align:middle line:84%
and the rest of the
letters consistently.

65
00:02:51.560 --> 00:02:54.542 align:middle line:84%
It will sort them in ascending
order and then print them out.

66
00:02:54.542 --> 00:02:56.000 align:middle line:84%
So that's basically
what this does.

67
00:02:56.000 --> 00:02:58.467 align:middle line:84%
And you can see it's done
with several elements

68
00:02:58.467 --> 00:03:00.050 align:middle line:84%
in a stream that
will give us a chance

69
00:03:00.050 --> 00:03:04.820 align:middle line:84%
to talk about various
aggregate operations.

70
00:03:04.820 --> 00:03:06.710 align:middle line:84%
So let's start by
talking about the three

71
00:03:06.710 --> 00:03:09.080 align:middle line:90%
key phases in a stream.

72
00:03:09.080 --> 00:03:11.300 align:middle line:84%
The first phase is
the split phase,

73
00:03:11.300 --> 00:03:14.840 align:middle line:84%
where you have a source of
data such as what's provided

74
00:03:14.840 --> 00:03:16.770 align:middle line:90%
by an array, as shown here.

75
00:03:16.770 --> 00:03:18.440 align:middle line:84%
As you can see here,
we have an array

76
00:03:18.440 --> 00:03:21.890 align:middle line:84%
of names of characters from the
Hamlet play by Shakespeare--

77
00:03:21.890 --> 00:03:24.560 align:middle line:84%
Horatio, Laertes,
Hamlet, and so on.

78
00:03:24.560 --> 00:03:27.980 align:middle line:84%
And we use the of factory
method on the stream interface

79
00:03:27.980 --> 00:03:31.710 align:middle line:84%
to go ahead and create a
stream of those elements.

80
00:03:31.710 --> 00:03:34.432 align:middle line:84%
Another way to do this is
to create some kind of list.

81
00:03:34.432 --> 00:03:36.140 align:middle line:84%
Here, we'd go ahead
and explicitly create

82
00:03:36.140 --> 00:03:40.490 align:middle line:84%
a list of characters using
the as list factory method

83
00:03:40.490 --> 00:03:44.510 align:middle line:84%
to convert the array of
character names into a list.

84
00:03:44.510 --> 00:03:47.270 align:middle line:84%
And then we say
characters that stream.

85
00:03:47.270 --> 00:03:52.060 align:middle line:84%
So that's a factory method that
creates a stream from a list.

86
00:03:52.060 --> 00:03:54.520 align:middle line:84%
Once we've got the
source of data split up

87
00:03:54.520 --> 00:03:57.370 align:middle line:84%
into the elements in the
stream, the next phase

88
00:03:57.370 --> 00:03:59.830 align:middle line:84%
is the apply phase,
where we process the data

89
00:03:59.830 --> 00:04:03.762 align:middle line:84%
through a pipeline of so-called
intermediate operations.

90
00:04:03.762 --> 00:04:06.220 align:middle line:84%
And there's a bunch of examples
of intermediate operations.

91
00:04:06.220 --> 00:04:07.750 align:middle line:90%
I show some of them here.

92
00:04:07.750 --> 00:04:12.010 align:middle line:84%
As you can see here, we're
going to filter the elements

93
00:04:12.010 --> 00:04:15.490 align:middle line:84%
in the stream to only
allow character names that

94
00:04:15.490 --> 00:04:16.480 align:middle line:90%
start with h.

95
00:04:16.480 --> 00:04:20.740 align:middle line:84%
We will then map those
elements in the stream

96
00:04:20.740 --> 00:04:22.780 align:middle line:90%
to consistently capitalize them.

97
00:04:22.780 --> 00:04:25.223 align:middle line:84%
And then we take the output
of that and we sort it.

98
00:04:25.223 --> 00:04:27.640 align:middle line:84%
You can see here that each of
these intermediate operation

99
00:04:27.640 --> 00:04:30.730 align:middle line:84%
maps an input stream
to an output stream

100
00:04:30.730 --> 00:04:33.100 align:middle line:84%
doing something to the
data-- either filtering

101
00:04:33.100 --> 00:04:36.570 align:middle line:84%
it or transforming it or
sorting it or whatnot.

102
00:04:36.570 --> 00:04:39.580 align:middle line:84%
And then the third and
final phase in a stream

103
00:04:39.580 --> 00:04:41.440 align:middle line:90%
is the combined phase.

104
00:04:41.440 --> 00:04:43.300 align:middle line:84%
And this always
finishes with something

105
00:04:43.300 --> 00:04:46.600 align:middle line:84%
known as a terminal
operation that yields

106
00:04:46.600 --> 00:04:50.170 align:middle line:84%
a non-stream result. So the
main difference between combine

107
00:04:50.170 --> 00:04:52.710 align:middle line:84%
and apply is that these
intermediate operations in

108
00:04:52.710 --> 00:04:56.830 align:middle line:84%
apply take an input stream
and produce an output stream,

109
00:04:56.830 --> 00:05:00.580 align:middle line:84%
whereas the combined phase has
a single terminal operation that

110
00:05:00.580 --> 00:05:04.270 align:middle line:84%
takes a stream and yields
a non-stream result.

111
00:05:04.270 --> 00:05:06.290 align:middle line:84%
As you can see in
this simple example,

112
00:05:06.290 --> 00:05:09.970 align:middle line:84%
the non-stream result is simply
the side effect of printing

113
00:05:09.970 --> 00:05:15.520 align:middle line:84%
every consistently capitalized
character in the play Hamlet

114
00:05:15.520 --> 00:05:19.210 align:middle line:90%
whose first letter is an h.

115
00:05:19.210 --> 00:05:21.340 align:middle line:84%
A terminal operation
does several things.

116
00:05:21.340 --> 00:05:24.460 align:middle line:84%
Most importantly, it
triggers the processing

117
00:05:24.460 --> 00:05:26.980 align:middle line:84%
of the intermediate
operations in the stream

118
00:05:26.980 --> 00:05:30.063 align:middle line:84%
and then will yield
some kind of result.

119
00:05:30.063 --> 00:05:31.480 align:middle line:84%
And we'll talk
about various types

120
00:05:31.480 --> 00:05:34.190 align:middle line:90%
of results we can have later.

121
00:05:34.190 --> 00:05:39.765 align:middle line:84%
Each stream must have one and
only one terminal operation.

122
00:05:39.765 --> 00:05:42.140 align:middle line:84%
We'll talk about this when we
talk later about frequently

123
00:05:42.140 --> 00:05:43.485 align:middle line:90%
made mistakes with streams.

124
00:05:43.485 --> 00:05:45.110 align:middle line:84%
Forgetting to have
a terminal operation

125
00:05:45.110 --> 00:05:47.900 align:middle line:84%
is a classic example of
a commonly made mistake

126
00:05:47.900 --> 00:05:51.220 align:middle line:84%
when you're first learning to
program with the streams model.