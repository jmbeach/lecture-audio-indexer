WEBVTT

1
00:00:00.000 --> 00:00:01.020 align:middle line:90%


2
00:00:01.020 --> 00:00:03.360 align:middle line:84%
Now that I've shown you
some examples of streams

3
00:00:03.360 --> 00:00:06.060 align:middle line:84%
at the source code
level, let's visualize

4
00:00:06.060 --> 00:00:08.039 align:middle line:90%
how streams work in action.

5
00:00:08.039 --> 00:00:09.850 align:middle line:84%
And I do this for a
number of reasons.

6
00:00:09.850 --> 00:00:12.720 align:middle line:84%
I typically find it useful to
see the bigger-picture view

7
00:00:12.720 --> 00:00:13.473 align:middle line:90%
sometimes.

8
00:00:13.473 --> 00:00:14.640 align:middle line:90%
You can look at source code.

9
00:00:14.640 --> 00:00:16.585 align:middle line:84%
Source code is
obviously ground truth.

10
00:00:16.585 --> 00:00:17.960 align:middle line:84%
But sometimes it
helps to sort of

11
00:00:17.960 --> 00:00:21.380 align:middle line:84%
be able to see, literally,
what's going on.

12
00:00:21.380 --> 00:00:23.130 align:middle line:84%
So the starting point
for this, of course,

13
00:00:23.130 --> 00:00:26.340 align:middle line:84%
is just reiterating the
fact that streams give you

14
00:00:26.340 --> 00:00:29.130 align:middle line:84%
this processing
pipeline that could

15
00:00:29.130 --> 00:00:32.670 align:middle line:84%
be used to flexibly compose
multiple aggregate operations

16
00:00:32.670 --> 00:00:33.220 align:middle line:90%
together.

17
00:00:33.220 --> 00:00:35.310 align:middle line:84%
That's kind of the
big-picture view, where

18
00:00:35.310 --> 00:00:38.340 align:middle line:84%
each aggregate operation
will filter or transform

19
00:00:38.340 --> 00:00:40.880 align:middle line:84%
the stream in one
way or another.

20
00:00:40.880 --> 00:00:44.120 align:middle line:84%
Let's now take a look at
how we might visualize

21
00:00:44.120 --> 00:00:47.270 align:middle line:84%
our simple program
here, which can

22
00:00:47.270 --> 00:00:51.920 align:middle line:84%
be found in the EX12 folder
in my GitHub repository.

23
00:00:51.920 --> 00:00:54.370 align:middle line:84%
So what's going to happen
here on the left-hand side,

24
00:00:54.370 --> 00:00:55.870 align:middle line:84%
I'm going to show
you sort of what's

25
00:00:55.870 --> 00:00:57.140 align:middle line:90%
happening at a visual level.

26
00:00:57.140 --> 00:00:58.515 align:middle line:84%
On the right-hand
side, I'm going

27
00:00:58.515 --> 00:01:01.320 align:middle line:84%
to kind of show you the steps
involved in the source code.

28
00:01:01.320 --> 00:01:03.660 align:middle line:84%
So we start out first
with a list of names.

29
00:01:03.660 --> 00:01:05.690 align:middle line:84%
These are the
characters in Hamlet.

30
00:01:05.690 --> 00:01:08.630 align:middle line:84%
And then we use the
of factory method

31
00:01:08.630 --> 00:01:13.890 align:middle line:84%
in order to convert that list
of names into a stream of names.

32
00:01:13.890 --> 00:01:16.190 align:middle line:84%
So there will be a
stream of strings,

33
00:01:16.190 --> 00:01:19.370 align:middle line:84%
one for every element
in the original list.

34
00:01:19.370 --> 00:01:21.920 align:middle line:84%
We then go ahead and
filter out the elements

35
00:01:21.920 --> 00:01:25.190 align:middle line:84%
that start without H
as their first letter.

36
00:01:25.190 --> 00:01:27.440 align:middle line:84%
So we're basically
only allowing things

37
00:01:27.440 --> 00:01:28.563 align:middle line:90%
through that start with H.

38
00:01:28.563 --> 00:01:30.980 align:middle line:84%
As you can see here on the
left-hand side, what that means

39
00:01:30.980 --> 00:01:35.330 align:middle line:84%
is that any of the character
names like Laertes or Gertrude

40
00:01:35.330 --> 00:01:37.430 align:middle line:84%
or Claudius that
don't start with H

41
00:01:37.430 --> 00:01:39.950 align:middle line:84%
will no longer be in
the output stream that

42
00:01:39.950 --> 00:01:43.500 align:middle line:84%
comes out from the filter
intermediate operation.

43
00:01:43.500 --> 00:01:45.000 align:middle line:84%
So we end up with
a stream of names

44
00:01:45.000 --> 00:01:48.450 align:middle line:84%
that start with an
uppercase or lowercase H.

45
00:01:48.450 --> 00:01:51.180 align:middle line:84%
The next thing we do is
we go ahead and pipe that

46
00:01:51.180 --> 00:01:53.570 align:middle line:84%
through the map
intermediate operation.

47
00:01:53.570 --> 00:01:55.860 align:middle line:84%
And we give it the
capitalized behavior.

48
00:01:55.860 --> 00:01:58.440 align:middle line:84%
As you can see if you look
closely at the slides,

49
00:01:58.440 --> 00:02:00.480 align:middle line:84%
that means that all
of our characters

50
00:02:00.480 --> 00:02:03.360 align:middle line:84%
now have a capital H at
the beginning of the name,

51
00:02:03.360 --> 00:02:05.635 align:middle line:90%
followed by lowercase letters.

52
00:02:05.635 --> 00:02:07.010 align:middle line:84%
And then the final
thing we do is

53
00:02:07.010 --> 00:02:10.340 align:middle line:84%
we take the stream of
capitalized names starting

54
00:02:10.340 --> 00:02:12.610 align:middle line:90%
with H and then we sort that.

55
00:02:12.610 --> 00:02:15.110 align:middle line:84%
And we'll end up
with a sorted output

56
00:02:15.110 --> 00:02:19.448 align:middle line:84%
of names that are consistently
capitalized starting with H.

57
00:02:19.448 --> 00:02:21.990 align:middle line:84%
So that's just kind of showing
you visually what's happening.

58
00:02:21.990 --> 00:02:25.100 align:middle line:84%
And I'll show this oftentimes
as we go through the examples,

59
00:02:25.100 --> 00:02:26.990 align:middle line:84%
because I find it's
a good way to see,

60
00:02:26.990 --> 00:02:31.210 align:middle line:84%
at a high level, what's really
happening underneath the hood.