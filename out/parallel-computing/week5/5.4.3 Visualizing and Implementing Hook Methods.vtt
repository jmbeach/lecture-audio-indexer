WEBVTT

1
00:00:00.000 --> 00:00:00.950 align:middle line:90%


2
00:00:00.950 --> 00:00:04.070 align:middle line:84%
So now that we finished
talking about processStream

3
00:00:04.070 --> 00:00:09.500 align:middle line:84%
and processInput, let's talk
about how to visualize and then

4
00:00:09.500 --> 00:00:12.680 align:middle line:84%
subsequently implement
the printPhrases method.

5
00:00:12.680 --> 00:00:15.903 align:middle line:84%
I've referenced printPhrases
a couple of times and kind

6
00:00:15.903 --> 00:00:18.320 align:middle line:84%
of gave you a foreshadowing
that it does some cool things.

7
00:00:18.320 --> 00:00:22.140 align:middle line:84%
But we'll really get a chance to
see how it works here shortly.

8
00:00:22.140 --> 00:00:24.788 align:middle line:84%
This is what the bulk of the
printPhrases method does.

9
00:00:24.788 --> 00:00:27.080 align:middle line:84%
We're going to walk through
this in more detail in just

10
00:00:27.080 --> 00:00:30.630 align:middle line:90%
a moment, and see how it works.

11
00:00:30.630 --> 00:00:33.170 align:middle line:84%
So the purpose of
printPhrases is

12
00:00:33.170 --> 00:00:38.600 align:middle line:84%
to display the phrases that
were associated with each

13
00:00:38.600 --> 00:00:41.310 align:middle line:90%
of the works of Shakespeare.

14
00:00:41.310 --> 00:00:44.720 align:middle line:84%
So as you can see
here, what happens

15
00:00:44.720 --> 00:00:47.150 align:middle line:84%
when you call printPhrases
is it's going to go through

16
00:00:47.150 --> 00:00:51.680 align:middle line:84%
and it's going to print out
each play, or each work,

17
00:00:51.680 --> 00:00:52.610 align:middle line:90%
by its title--

18
00:00:52.610 --> 00:00:55.460 align:middle line:84%
like The Tragedy of
Hamlet, Prince of Denmark,

19
00:00:55.460 --> 00:00:58.160 align:middle line:90%
or The Tragedy of Julius Caesar.

20
00:00:58.160 --> 00:01:00.500 align:middle line:84%
There's lots of tragedies,
of course, in Shakespeare--

21
00:01:00.500 --> 00:01:02.940 align:middle line:84%
although a bunch of
comedies as well.

22
00:01:02.940 --> 00:01:06.830 align:middle line:84%
And so for each of
the works, if there

23
00:01:06.830 --> 00:01:10.250 align:middle line:84%
were any phrases that
matched, then printPhrases

24
00:01:10.250 --> 00:01:12.440 align:middle line:84%
will print the
phrases that matched

25
00:01:12.440 --> 00:01:16.550 align:middle line:84%
that corresponding work,
that corresponding play.

26
00:01:16.550 --> 00:01:18.250 align:middle line:84%
So as you can see
here, of course,

27
00:01:18.250 --> 00:01:21.290 align:middle line:84%
there's lots of famous quotes
and lots of famous phrases

28
00:01:21.290 --> 00:01:25.880 align:middle line:84%
from Hamlet, like, "Neither
a borrower or a lender be,"

29
00:01:25.880 --> 00:01:30.170 align:middle line:84%
or, "Brevity is the soul of
wit," or, "To be, or not to be?

30
00:01:30.170 --> 00:01:32.270 align:middle line:84%
That is the questio," and
all the famous cliches

31
00:01:32.270 --> 00:01:35.210 align:middle line:84%
that people talk about when
they mention Shakespeare.

32
00:01:35.210 --> 00:01:37.430 align:middle line:84%
There are also, of
course, many great quotes

33
00:01:37.430 --> 00:01:39.800 align:middle line:84%
from The Tragedy
of Julius Caesar

34
00:01:39.800 --> 00:01:43.970 align:middle line:84%
like, "Beware the Ides of
March," or, "Et tu, Brute?"

35
00:01:43.970 --> 00:01:45.590 align:middle line:90%
And so on, and so forth.

36
00:01:45.590 --> 00:01:47.090 align:middle line:84%
So this particular
example will show

37
00:01:47.090 --> 00:01:48.680 align:middle line:84%
how we write the
code that prints out

38
00:01:48.680 --> 00:01:51.500 align:middle line:84%
the phrases associated with
each of the titles of each

39
00:01:51.500 --> 00:01:53.750 align:middle line:84%
of the works, or
each of the plays.

40
00:01:53.750 --> 00:01:57.530 align:middle line:84%
And this will give us a chance
to really talk about flatMap

41
00:01:57.530 --> 00:02:01.820 align:middle line:84%
and see just how cool
it is in practice.

42
00:02:01.820 --> 00:02:05.482 align:middle line:84%
So one of the things we're
going to see here is that--

43
00:02:05.482 --> 00:02:07.190 align:middle line:84%
here's sort of the
visualization of this.

44
00:02:07.190 --> 00:02:10.539 align:middle line:84%
So we're going to end up
taking in a list of list

45
00:02:10.539 --> 00:02:12.460 align:middle line:90%
of search results.

46
00:02:12.460 --> 00:02:14.560 align:middle line:84%
And printPhrases will
then convert this

47
00:02:14.560 --> 00:02:19.120 align:middle line:84%
into a map that associates
the phrases with the works

48
00:02:19.120 --> 00:02:21.190 align:middle line:90%
where they were found.

49
00:02:21.190 --> 00:02:24.550 align:middle line:84%
Now something to remember that
we talked about when we discuss

50
00:02:24.550 --> 00:02:28.330 align:middle line:84%
the PrintStream method-- and
this applied both for the OO

51
00:02:28.330 --> 00:02:32.170 align:middle line:84%
version and the functional
programming streams version.

52
00:02:32.170 --> 00:02:35.590 align:middle line:84%
Some of the lists of search
results in the list of list

53
00:02:35.590 --> 00:02:38.550 align:middle line:84%
of search results
may actually be empty

54
00:02:38.550 --> 00:02:41.980 align:middle line:84%
if there were no phrases that
matched a given input string--

55
00:02:41.980 --> 00:02:43.302 align:middle line:90%
a given a work of Shakespeare.

56
00:02:43.302 --> 00:02:44.260 align:middle line:90%
No real surprise there.

57
00:02:44.260 --> 00:02:45.135 align:middle line:90%
That's not a problem.

58
00:02:45.135 --> 00:02:47.280 align:middle line:90%
It's just a reality.

59
00:02:47.280 --> 00:02:48.530 align:middle line:90%
Here's what we're going to do.

60
00:02:48.530 --> 00:02:51.410 align:middle line:84%
We're first going to
convert this list of list

61
00:02:51.410 --> 00:02:56.910 align:middle line:84%
of search results into a stream
of lists of search results.

62
00:02:56.910 --> 00:03:00.663 align:middle line:84%
So now we have a stream
of list of search results.

63
00:03:00.663 --> 00:03:02.330 align:middle line:84%
And what we're going
to do at this point

64
00:03:02.330 --> 00:03:04.200 align:middle line:90%
is we're going to apply flatMap.

65
00:03:04.200 --> 00:03:07.430 align:middle line:84%
So flatMap takes a stream
of lists of search results

66
00:03:07.430 --> 00:03:09.060 align:middle line:90%
as input.

67
00:03:09.060 --> 00:03:12.930 align:middle line:84%
And it flattens the stream
of list of search results

68
00:03:12.930 --> 00:03:16.265 align:middle line:84%
into just a stream
of search results.

69
00:03:16.265 --> 00:03:17.640 align:middle line:84%
And you can kind
of think of what

70
00:03:17.640 --> 00:03:19.050 align:middle line:90%
flatMap is really doing here.

71
00:03:19.050 --> 00:03:22.140 align:middle line:84%
It's basically taking each of
the lists of search results,

72
00:03:22.140 --> 00:03:23.640 align:middle line:84%
and then taking
each of the elements

73
00:03:23.640 --> 00:03:25.620 align:middle line:84%
of the lists of
the search results

74
00:03:25.620 --> 00:03:28.210 align:middle line:84%
and just making a new
stream that basically

75
00:03:28.210 --> 00:03:31.650 align:middle line:84%
works by concatenating in each
of the lists of search results

76
00:03:31.650 --> 00:03:34.110 align:middle line:84%
together into a big
stream of search results.

77
00:03:34.110 --> 00:03:37.830 align:middle line:90%


78
00:03:37.830 --> 00:03:39.470 align:middle line:84%
Now the other thing
that flatMap does--

79
00:03:39.470 --> 00:03:42.740 align:middle line:84%
and it's not really clear that
it does this unless you really

80
00:03:42.740 --> 00:03:46.130 align:middle line:84%
read the documentation carefully
and play around a little bit--

81
00:03:46.130 --> 00:03:49.580 align:middle line:84%
flatMap will also
remove empty lists.

82
00:03:49.580 --> 00:03:52.010 align:middle line:84%
So if there's a list in
there that was empty,

83
00:03:52.010 --> 00:03:55.562 align:middle line:84%
then you'll end up with
nothing in the output stream.

84
00:03:55.562 --> 00:03:57.020 align:middle line:84%
So we'll talk a
bit more about this

85
00:03:57.020 --> 00:03:59.062 align:middle line:84%
when we talk about the
implementation of flatMat.

86
00:03:59.062 --> 00:04:01.160 align:middle line:84%
If you recall,
remember, flatMap is

87
00:04:01.160 --> 00:04:03.710 align:middle line:84%
one of those curious
intermediate operations

88
00:04:03.710 --> 00:04:07.670 align:middle line:84%
whose output stream
can have more, less,

89
00:04:07.670 --> 00:04:11.750 align:middle line:84%
or the same number of
elements as its input stream.

90
00:04:11.750 --> 00:04:13.400 align:middle line:84%
And of course, we
will have empty lists

91
00:04:13.400 --> 00:04:15.942 align:middle line:84%
if there's no phrases that match
within a work of Shakespeare

92
00:04:15.942 --> 00:04:18.220 align:middle line:90%
in an input string.

93
00:04:18.220 --> 00:04:21.880 align:middle line:84%
So what we get is
the output of flatMap

94
00:04:21.880 --> 00:04:26.963 align:middle line:84%
is a stream of non-empty
search results.

95
00:04:26.963 --> 00:04:28.380 align:middle line:84%
And what we're
going to do then is

96
00:04:28.380 --> 00:04:30.940 align:middle line:84%
we're going to take that stream
of non-empty search results

97
00:04:30.940 --> 00:04:34.330 align:middle line:84%
and we're going to
feed it into collect.

98
00:04:34.330 --> 00:04:38.680 align:middle line:84%
So this will be a
terminal operation.

99
00:04:38.680 --> 00:04:41.260 align:middle line:84%
As always, collect
will trigger all

100
00:04:41.260 --> 00:04:42.750 align:middle line:90%
these intermediate operations.

101
00:04:42.750 --> 00:04:46.080 align:middle line:84%
It'll trigger stream to
run to get to the source.

102
00:04:46.080 --> 00:04:49.370 align:middle line:84%
It'll trigger flatMap,
and so on, and so forth.

103
00:04:49.370 --> 00:04:53.890 align:middle line:84%
And then it'll go ahead and
use the groupingBy collector

104
00:04:53.890 --> 00:04:58.270 align:middle line:84%
to create a map
that groups phrases

105
00:04:58.270 --> 00:05:02.050 align:middle line:84%
which will be the values
under the works, namely,

106
00:05:02.050 --> 00:05:03.830 align:middle line:90%
the names of the plays--

107
00:05:03.830 --> 00:05:06.920 align:middle line:84%
the works of Shakespeare--
which are the keys in the map.

108
00:05:06.920 --> 00:05:10.060 align:middle line:84%
So names of works
are the keys, values

109
00:05:10.060 --> 00:05:13.960 align:middle line:84%
are the phrases that
appeared under those works--

110
00:05:13.960 --> 00:05:16.980 align:middle line:84%
or with the works
with those names.