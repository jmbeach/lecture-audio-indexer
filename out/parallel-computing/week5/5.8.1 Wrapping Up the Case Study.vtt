WEBVTT

1
00:00:00.000 --> 00:00:00.690 align:middle line:90%


2
00:00:00.690 --> 00:00:02.700 align:middle line:84%
So believe it or
not, at long last,

3
00:00:02.700 --> 00:00:06.420 align:middle line:84%
we're done with our sequential
SearchStream example.

4
00:00:06.420 --> 00:00:09.420 align:middle line:84%
The search with
sequential streams class.

5
00:00:09.420 --> 00:00:11.460 align:middle line:84%
And what we're
going to do now here

6
00:00:11.460 --> 00:00:14.160 align:middle line:84%
to the end of this
week's lessons

7
00:00:14.160 --> 00:00:16.240 align:middle line:90%
are evaluate the pros and cons.

8
00:00:16.240 --> 00:00:17.740 align:middle line:84%
So you see there's
some good things,

9
00:00:17.740 --> 00:00:19.360 align:middle line:90%
there's some bad things.

10
00:00:19.360 --> 00:00:20.890 align:middle line:90%
Mostly good things, of course.

11
00:00:20.890 --> 00:00:25.360 align:middle line:84%
So there is a number of benefits
to using sequential streams

12
00:00:25.360 --> 00:00:27.760 align:middle line:84%
in contrast to using the
object oriented version we

13
00:00:27.760 --> 00:00:29.920 align:middle line:90%
talked about before.

14
00:00:29.920 --> 00:00:31.810 align:middle line:84%
In particular, we
see that streams

15
00:00:31.810 --> 00:00:34.900 align:middle line:84%
use these internal
iterations rather than

16
00:00:34.900 --> 00:00:37.360 align:middle line:84%
external iterators that are
used by the collections.

17
00:00:37.360 --> 00:00:39.070 align:middle line:84%
So our object oriented
implementation

18
00:00:39.070 --> 00:00:42.130 align:middle line:84%
had external iteration using
things like for-each loops,

19
00:00:42.130 --> 00:00:43.180 align:middle line:90%
and so on.

20
00:00:43.180 --> 00:00:46.840 align:middle line:90%
This approach is more concise.

21
00:00:46.840 --> 00:00:50.920 align:middle line:84%
It also shields
programmers and programs

22
00:00:50.920 --> 00:00:52.720 align:middle line:84%
from all the implementation
details of how

23
00:00:52.720 --> 00:00:53.920 align:middle line:90%
things work under the hood.

24
00:00:53.920 --> 00:00:57.700 align:middle line:84%
That's all hidden in
the implementation.

25
00:00:57.700 --> 00:01:00.210 align:middle line:84%
One of the nice things is
that everything's declarative.

26
00:01:00.210 --> 00:01:03.010 align:middle line:84%
You basically say what
you want to have done.

27
00:01:03.010 --> 00:01:05.340 align:middle line:84%
You don't have to
disclose how you do it.

28
00:01:05.340 --> 00:01:07.270 align:middle line:84%
Those could be left
to the behaviors,

29
00:01:07.270 --> 00:01:09.815 align:middle line:84%
and so on, and the
streams framework itself.

30
00:01:09.815 --> 00:01:11.940 align:middle line:84%
You'll also notice that
there's no explicit control

31
00:01:11.940 --> 00:01:14.550 align:middle line:84%
constructs or any memory
allocations in this pipeline.

32
00:01:14.550 --> 00:01:18.690 align:middle line:84%
It's all hidden for you
internally inside the bowels

33
00:01:18.690 --> 00:01:20.890 align:middle line:84%
of this streams framework
and the various behaviors

34
00:01:20.890 --> 00:01:23.400 align:middle line:90%
we're calling here.

35
00:01:23.400 --> 00:01:25.470 align:middle line:84%
A nice way to look at
this is that by using

36
00:01:25.470 --> 00:01:28.440 align:middle line:84%
streams and declarative
programming and the functional

37
00:01:28.440 --> 00:01:30.960 align:middle line:84%
features and so on
and so forth, we

38
00:01:30.960 --> 00:01:35.190 align:middle line:84%
can end up focusing on what
we want the operations to do

39
00:01:35.190 --> 00:01:38.670 align:middle line:84%
rather than on how they do it,
so it's the what versus the

40
00:01:38.670 --> 00:01:39.377 align:middle line:90%
how again.

41
00:01:39.377 --> 00:01:41.460 align:middle line:84%
And if you go back and
look at the object oriented

42
00:01:41.460 --> 00:01:42.877 align:middle line:84%
implementation,
you'll see there's

43
00:01:42.877 --> 00:01:46.737 align:middle line:84%
a lot more how that's
creeping in to the code, which

44
00:01:46.737 --> 00:01:49.070 align:middle line:84%
distracts from the essence
of what we're actually doing.

45
00:01:49.070 --> 00:01:53.090 align:middle line:84%
The actual computations
that we want to provide.

46
00:01:53.090 --> 00:01:55.233 align:middle line:84%
Another nice thing to
note is all the behaviors

47
00:01:55.233 --> 00:01:56.150 align:middle line:90%
that we're using here.

48
00:01:56.150 --> 00:01:59.510 align:middle line:84%
Things like search for
phrase in search results

49
00:01:59.510 --> 00:02:02.690 align:middle line:84%
is empty and then the gate
OR or the NOT operation.

50
00:02:02.690 --> 00:02:07.020 align:middle line:84%
All those things have no side
effects, so as a consequence,

51
00:02:07.020 --> 00:02:09.680 align:middle line:84%
it's very easy to
optimize the behavior.

52
00:02:09.680 --> 00:02:12.330 align:middle line:84%
We can turn this into a
parallel stream very easily.

53
00:02:12.330 --> 00:02:14.737 align:middle line:84%
It's also very simple to
reason about the behavior.

54
00:02:14.737 --> 00:02:16.820 align:middle line:84%
You don't have to go and
look inside those methods

55
00:02:16.820 --> 00:02:20.360 align:middle line:84%
and go, hmm, what
state do they affect

56
00:02:20.360 --> 00:02:23.390 align:middle line:84%
that might be modified such
that the next call will

57
00:02:23.390 --> 00:02:25.100 align:middle line:90%
have some different output?

58
00:02:25.100 --> 00:02:27.710 align:middle line:84%
Comes a lot easier to reason
about what your program is

59
00:02:27.710 --> 00:02:30.710 align:middle line:84%
trying to do, which is always
a win, especially if you end up

60
00:02:30.710 --> 00:02:33.578 align:middle line:84%
inheriting someone else's
code that you didn't write

61
00:02:33.578 --> 00:02:35.870 align:middle line:84%
and you have to try to figure
out what the heck it did.

62
00:02:35.870 --> 00:02:40.615 align:middle line:84%
Or is as often happens to
me, you wrote code 5, 10, 20,

63
00:02:40.615 --> 00:02:41.990 align:middle line:84%
30 years ago, and
now you go back

64
00:02:41.990 --> 00:02:44.240 align:middle line:84%
and you go, hmm, what
does that code do?

65
00:02:44.240 --> 00:02:45.560 align:middle line:90%
I can't remember.

66
00:02:45.560 --> 00:02:49.370 align:middle line:84%
Well, this helps make
things a lot cleaner.

67
00:02:49.370 --> 00:02:51.240 align:middle line:84%
But of course, as I
always like to say,

68
00:02:51.240 --> 00:02:53.930 align:middle line:84%
it's not all unicorns
and rainbows.

69
00:02:53.930 --> 00:02:57.890 align:middle line:84%
So let's talk about some of
the down sides of the search

70
00:02:57.890 --> 00:03:00.950 align:middle line:90%
with sequential streams class.

71
00:03:00.950 --> 00:03:04.370 align:middle line:84%
Most obviously, the
biggest downside of this

72
00:03:04.370 --> 00:03:06.680 align:middle line:84%
is that a sequential
implementation simply

73
00:03:06.680 --> 00:03:09.830 align:middle line:84%
can't take advantage of
multicore processors.

74
00:03:09.830 --> 00:03:12.110 align:middle line:84%
There's just nothing we
can do to speed it up,

75
00:03:12.110 --> 00:03:15.210 align:middle line:84%
other than by more memory
or something like that.

76
00:03:15.210 --> 00:03:18.120 align:middle line:84%
So there's one and only
one thing going on.

77
00:03:18.120 --> 00:03:21.050 align:middle line:84%
And as you can see, even
on my quad core hyper

78
00:03:21.050 --> 00:03:25.100 align:middle line:84%
threaded powerful laptop
with 32 gigs of RAM,

79
00:03:25.100 --> 00:03:27.290 align:middle line:84%
and so on and so
forth, what the heck.

80
00:03:27.290 --> 00:03:31.140 align:middle line:84%
It still doesn't get
where we need to be.

81
00:03:31.140 --> 00:03:34.080 align:middle line:84%
Parallel streams can often
provide significant performance

82
00:03:34.080 --> 00:03:36.840 align:middle line:84%
boost, and if you take a look
at those results shown here

83
00:03:36.840 --> 00:03:39.453 align:middle line:84%
on the slide, which we'll
cover in more detail later,

84
00:03:39.453 --> 00:03:41.370 align:middle line:84%
you'll see that the
parallel versions are way,

85
00:03:41.370 --> 00:03:43.200 align:middle line:84%
way faster than the
sequential version.

86
00:03:43.200 --> 00:03:46.993 align:middle line:84%
Way faster, and in many
cases, either a linear speed

87
00:03:46.993 --> 00:03:49.410 align:middle line:84%
up in the number of cores or
actually a super linear speed

88
00:03:49.410 --> 00:03:54.110 align:middle line:84%
up because they're threaded
course, so that's really great.

89
00:03:54.110 --> 00:03:57.160 align:middle line:84%
Another drawback here is this
particular example only used

90
00:03:57.160 --> 00:03:58.760 align:middle line:84%
a handful of
aggregate operations.

91
00:03:58.760 --> 00:04:01.640 align:middle line:84%
We talked about map
and filter and collect

92
00:04:01.640 --> 00:04:05.610 align:middle line:84%
and flat map and grouping by
and a couple other things,

93
00:04:05.610 --> 00:04:08.360 align:middle line:84%
but it wasn't showing
you every possible

94
00:04:08.360 --> 00:04:11.810 align:middle line:84%
feature every possible
operation defined in the stream

95
00:04:11.810 --> 00:04:13.600 align:middle line:90%
interface.

96
00:04:13.600 --> 00:04:15.570 align:middle line:90%
However-- this is important--

97
00:04:15.570 --> 00:04:17.459 align:middle line:84%
everything we
covered here is also

98
00:04:17.459 --> 00:04:20.070 align:middle line:84%
useful out of the box
for parallel streams

99
00:04:20.070 --> 00:04:21.570 align:middle line:84%
and you'll see when
we go to convert

100
00:04:21.570 --> 00:04:23.987 align:middle line:84%
from the sequential streams
to one of the parallel streams

101
00:04:23.987 --> 00:04:28.080 align:middle line:84%
versions, it's just
drop dead easy.

102
00:04:28.080 --> 00:04:30.360 align:middle line:84%
There are many, many other
aggregate operations that

103
00:04:30.360 --> 00:04:31.560 align:middle line:90%
are part of the stream API.

104
00:04:31.560 --> 00:04:33.582 align:middle line:90%
There's scores of them.

105
00:04:33.582 --> 00:04:35.040 align:middle line:84%
Sometimes people
ask me, how do you

106
00:04:35.040 --> 00:04:36.990 align:middle line:84%
tell when you look
at the streams API

107
00:04:36.990 --> 00:04:39.120 align:middle line:84%
which ones are the
intermediate operations

108
00:04:39.120 --> 00:04:41.098 align:middle line:84%
and which ones are the
terminal operations,

109
00:04:41.098 --> 00:04:43.390 align:middle line:84%
or which ones are the factory
methods, for that matter,

110
00:04:43.390 --> 00:04:44.932 align:middle line:84%
and it's actually
quite easy to tell.

111
00:04:44.932 --> 00:04:50.730 align:middle line:84%
The intermediate operations take
a stream and return a stream

112
00:04:50.730 --> 00:04:54.120 align:middle line:84%
or call it in the context of a
stream, they return a stream.

113
00:04:54.120 --> 00:04:55.710 align:middle line:84%
The terminal
operations are called

114
00:04:55.710 --> 00:04:58.440 align:middle line:84%
in the context of a stream
and don't return a stream,

115
00:04:58.440 --> 00:05:00.660 align:middle line:84%
and the [? factory ?]
methods will just

116
00:05:00.660 --> 00:05:05.720 align:middle line:90%
go ahead and create something.

117
00:05:05.720 --> 00:05:08.030 align:middle line:84%
We have other programs will
cover later, especially

118
00:05:08.030 --> 00:05:12.530 align:middle line:84%
in the context of parallel
streams and completable futures

119
00:05:12.530 --> 00:05:16.040 align:middle line:84%
that will demonstrate
more aggregate operations,

120
00:05:16.040 --> 00:05:19.850 align:middle line:84%
and so the really cool example
we'll see in upcoming weeks

121
00:05:19.850 --> 00:05:21.740 align:middle line:84%
when we talk about
parallel streams

122
00:05:21.740 --> 00:05:24.950 align:middle line:84%
is something we call the Java
parallel image stream gang

123
00:05:24.950 --> 00:05:25.670 align:middle line:90%
example.

124
00:05:25.670 --> 00:05:28.460 align:middle line:84%
And this is just a tour
de force of cool features

125
00:05:28.460 --> 00:05:34.270 align:middle line:84%
to illustrate how to download
images from remote sites,

126
00:05:34.270 --> 00:05:38.763 align:middle line:84%
transform or filter them, do
image processing operations,

127
00:05:38.763 --> 00:05:41.180 align:middle line:84%
store them in the file system,
and then ultimately display

128
00:05:41.180 --> 00:05:41.420 align:middle line:90%
them.

129
00:05:41.420 --> 00:05:43.212 align:middle line:84%
You can display them
through an Android app

130
00:05:43.212 --> 00:05:46.970 align:middle line:84%
or through some other means,
but it's a much cooler example

131
00:05:46.970 --> 00:05:49.790 align:middle line:84%
and really demonstrates
all the various mechanisms

132
00:05:49.790 --> 00:05:54.070 align:middle line:84%
that we've talked about so
far, which is really fun.