WEBVTT

1
00:00:00.000 --> 00:00:00.900 align:middle line:90%


2
00:00:00.900 --> 00:00:02.550 align:middle line:84%
So what we're going
to do now is I'm

3
00:00:02.550 --> 00:00:05.520 align:middle line:84%
going to give you
an overview of how

4
00:00:05.520 --> 00:00:09.480 align:middle line:84%
various predefined
non-concurrent Collectors are

5
00:00:09.480 --> 00:00:12.870 align:middle line:84%
implemented in the
Java class library,

6
00:00:12.870 --> 00:00:16.180 align:middle line:84%
in particular in the
Java Streams framework.

7
00:00:16.180 --> 00:00:18.198 align:middle line:84%
And as you'll see,
there's a bunch

8
00:00:18.198 --> 00:00:19.740 align:middle line:84%
of these things that
kind of come out

9
00:00:19.740 --> 00:00:24.990 align:middle line:84%
of the box as part of the
Collectors utility class.

10
00:00:24.990 --> 00:00:28.350 align:middle line:84%
So Collectors is a
utility class that

11
00:00:28.350 --> 00:00:30.480 align:middle line:84%
has a bunch of
factory methods that

12
00:00:30.480 --> 00:00:35.130 align:middle line:84%
are used to create collectors
for various common collection

13
00:00:35.130 --> 00:00:36.850 align:middle line:90%
types.

14
00:00:36.850 --> 00:00:38.650 align:middle line:84%
You probably recall
because I've talked

15
00:00:38.650 --> 00:00:42.670 align:middle line:84%
about this many times in other
videos and other courses.

16
00:00:42.670 --> 00:00:47.190 align:middle line:84%
A utility class in Java
is defined as final.

17
00:00:47.190 --> 00:00:49.750 align:middle line:84%
It means you can't
subclass it or extend it.

18
00:00:49.750 --> 00:00:52.550 align:middle line:90%
It only has static methods.

19
00:00:52.550 --> 00:00:58.330 align:middle line:84%
It has no non-static state, and
it has a private constructor

20
00:00:58.330 --> 00:01:01.327 align:middle line:84%
to ensure that you can't
make more than one instance

21
00:01:01.327 --> 00:01:01.910 align:middle line:90%
of this thing.

22
00:01:01.910 --> 00:01:02.980 align:middle line:84%
In fact, you can't
have any instances.

23
00:01:02.980 --> 00:01:05.260 align:middle line:84%
There's only-- it's
only used to get access

24
00:01:05.260 --> 00:01:09.430 align:middle line:84%
to its static methods,
which are basically

25
00:01:09.430 --> 00:01:13.300 align:middle line:84%
just kind of namespaced
functions, if you will.

26
00:01:13.300 --> 00:01:17.530 align:middle line:84%
It's kind of like a namespace
in a language like C++.

27
00:01:17.530 --> 00:01:20.470 align:middle line:90%


28
00:01:20.470 --> 00:01:25.040 align:middle line:84%
Now in the implementation
of Java Streams,

29
00:01:25.040 --> 00:01:28.590 align:middle line:84%
there's a class
called CollectorImpl,

30
00:01:28.590 --> 00:01:32.580 align:middle line:84%
and this is used to define
a very simple implementation

31
00:01:32.580 --> 00:01:34.590 align:middle line:90%
class for a Collector.

32
00:01:34.590 --> 00:01:37.230 align:middle line:84%
And you can see here
that what it does

33
00:01:37.230 --> 00:01:45.370 align:middle line:84%
is it's private to the
Collectors static class

34
00:01:45.370 --> 00:01:48.850 align:middle line:84%
and it implements the
Collector interface.

35
00:01:48.850 --> 00:01:52.780 align:middle line:84%
So CollectorImpl implements
the Collectors interface,

36
00:01:52.780 --> 00:01:58.643 align:middle line:84%
and it's then held privately to
the Collectors utility class.

37
00:01:58.643 --> 00:02:01.060 align:middle line:84%
Well, you might think, well,
fat lot of good that does me.

38
00:02:01.060 --> 00:02:05.190 align:middle line:84%
I can't get access to private
classes within the JDK.

39
00:02:05.190 --> 00:02:06.130 align:middle line:90%
They're hidden.

40
00:02:06.130 --> 00:02:10.520 align:middle line:84%
But hold on a second, we'll
deal with that, don't worry.

41
00:02:10.520 --> 00:02:14.150 align:middle line:84%
Now let's take a look at how the
CollectorImpl private class is

42
00:02:14.150 --> 00:02:19.970 align:middle line:84%
actually used by a bunch
of predefined methods

43
00:02:19.970 --> 00:02:24.230 align:middle line:84%
that appear in the
Collectors public interface.

44
00:02:24.230 --> 00:02:28.130 align:middle line:84%
So for example, here
is Collectors.toList.

45
00:02:28.130 --> 00:02:32.240 align:middle line:84%
This is that factor method
we've now seen used many times

46
00:02:32.240 --> 00:02:35.710 align:middle line:84%
by Collect in order
to be able to return

47
00:02:35.710 --> 00:02:40.220 align:middle line:84%
a non-concurrent Collector
that accumulates the input

48
00:02:40.220 --> 00:02:43.130 align:middle line:84%
elements in a stream
into a new list, which,

49
00:02:43.130 --> 00:02:46.858 align:middle line:84%
as you'll see here, is
implemented as an array list.

50
00:02:46.858 --> 00:02:49.400 align:middle line:84%
So let's kind of take a look at
this and we'll break it down.

51
00:02:49.400 --> 00:02:54.350 align:middle line:84%
So you can see toList is
a public static method,

52
00:02:54.350 --> 00:02:56.150 align:middle line:84%
so it's basically
a factory method,

53
00:02:56.150 --> 00:03:00.320 align:middle line:84%
and internally, it makes a new
instance of a CollectorImpl.

54
00:03:00.320 --> 00:03:02.570 align:middle line:84%
And of course, this works
just fine because collectors

55
00:03:02.570 --> 00:03:07.550 align:middle line:84%
is part of the JDK, so it can
access its private classes,

56
00:03:07.550 --> 00:03:10.190 align:middle line:90%
no problem.

57
00:03:10.190 --> 00:03:12.190 align:middle line:84%
As you can see here,
the very first parameter

58
00:03:12.190 --> 00:03:19.060 align:middle line:84%
passed into CollectorImpl is the
supplier constructor reference,

59
00:03:19.060 --> 00:03:22.630 align:middle line:84%
which, in this case, is
ArrayList, colon, colon, new.

60
00:03:22.630 --> 00:03:25.090 align:middle line:84%
So much like the example
we looked at before,

61
00:03:25.090 --> 00:03:27.580 align:middle line:84%
where we were kind of
walking through the elements

62
00:03:27.580 --> 00:03:32.440 align:middle line:84%
of the Collect API,
ArayList, colon, colon,

63
00:03:32.440 --> 00:03:40.430 align:middle line:84%
new is going to be used to make
the mutable result container.

64
00:03:40.430 --> 00:03:43.330 align:middle line:84%
OK, so that's the first
parameter that's passed in.

65
00:03:43.330 --> 00:03:46.690 align:middle line:84%
The second parameter that's
passed into CollectorImpl

66
00:03:46.690 --> 00:03:51.430 align:middle line:84%
is a method reference to
the needed or the desired

67
00:03:51.430 --> 00:03:54.220 align:middle line:84%
accumulator, which,
in this case, is List,

68
00:03:54.220 --> 00:03:55.680 align:middle line:90%
colon, colon, add.

69
00:03:55.680 --> 00:03:57.607 align:middle line:84%
All right, that looks
just like we did before.

70
00:03:57.607 --> 00:03:59.940 align:middle line:84%
Keep in mind, by the way,
that the code we're looking at

71
00:03:59.940 --> 00:04:05.270 align:middle line:84%
is actually the implementation
in the Java Streams package.

72
00:04:05.270 --> 00:04:09.020 align:middle line:84%
The next parameter here is a
combiner lambda expression,

73
00:04:09.020 --> 00:04:15.680 align:middle line:84%
which will basically append
the right list to the left list

74
00:04:15.680 --> 00:04:17.990 align:middle line:90%
and then return the left list.

75
00:04:17.990 --> 00:04:20.660 align:middle line:84%
As I mentioned before, this is
only used for parallel streams,

76
00:04:20.660 --> 00:04:22.983 align:middle line:84%
so it's not relevant for
this part of the course,

77
00:04:22.983 --> 00:04:24.400 align:middle line:84%
but it will be
quite relevant when

78
00:04:24.400 --> 00:04:26.810 align:middle line:84%
we talk later about how
parallel streams works.

79
00:04:26.810 --> 00:04:30.410 align:middle line:84%
In fact, this is the code
that's used for parallel streams

80
00:04:30.410 --> 00:04:35.440 align:middle line:84%
when you have a Collector
that's using a list.

81
00:04:35.440 --> 00:04:37.670 align:middle line:84%
And then the final parameter
that's passed in here

82
00:04:37.670 --> 00:04:41.270 align:middle line:84%
is the so-called characteristics
set, which, in this case,

83
00:04:41.270 --> 00:04:45.620 align:middle line:84%
is just basically like a
constant, a final field that's

84
00:04:45.620 --> 00:04:48.170 align:middle line:90%
defined as identity finish.

85
00:04:48.170 --> 00:04:53.900 align:middle line:84%
So CH_ID is just shorthand for
Characteristics.IDENTITY_FINISH,

86
00:04:53.900 --> 00:04:56.150 align:middle line:84%
and that indicates that this
particular Collector has

87
00:04:56.150 --> 00:04:57.060 align:middle line:90%
identity finish.

88
00:04:57.060 --> 00:05:00.260 align:middle line:84%
We don't care to do
anything special to it.

89
00:05:00.260 --> 00:05:05.000 align:middle line:84%
It doesn't-- it just accumulates
everything into its array list

90
00:05:05.000 --> 00:05:08.180 align:middle line:84%
mutable result container,
and when we're done,

91
00:05:08.180 --> 00:05:12.320 align:middle line:84%
that mutable result container
is the result of the collection,

92
00:05:12.320 --> 00:05:14.910 align:middle line:84%
so there's no need to do any
transformation in any other

93
00:05:14.910 --> 00:05:15.410 align:middle line:90%
way.

94
00:05:15.410 --> 00:05:18.330 align:middle line:90%


95
00:05:18.330 --> 00:05:20.447 align:middle line:84%
Now again, you're still
probably going, well,

96
00:05:20.447 --> 00:05:21.780 align:middle line:90%
what the heck good does this do?

97
00:05:21.780 --> 00:05:22.890 align:middle line:90%
This is a private thing.

98
00:05:22.890 --> 00:05:25.140 align:middle line:84%
Why are you showing me what
happens under the hood?

99
00:05:25.140 --> 00:05:26.760 align:middle line:90%
I can't make use of this.

100
00:05:26.760 --> 00:05:29.310 align:middle line:84%
Well, in fact, you
can make use of this,

101
00:05:29.310 --> 00:05:31.590 align:middle line:84%
and here's the thing
that's pretty cool.

102
00:05:31.590 --> 00:05:34.500 align:middle line:84%
Collector, the
interface, Collector,

103
00:05:34.500 --> 00:05:40.860 align:middle line:84%
actually defines a static method
called of(), which, of course,

104
00:05:40.860 --> 00:05:44.377 align:middle line:84%
makes it a factory method,
and that's a public method,

105
00:05:44.377 --> 00:05:45.960 align:middle line:84%
because, of course,
it's an interface,

106
00:05:45.960 --> 00:05:47.520 align:middle line:90%
so everything has to be public.

107
00:05:47.520 --> 00:05:55.400 align:middle line:84%
So this public factory method
of() uses the Collectors

108
00:05:55.400 --> 00:06:01.520 align:middle line:84%
CollectorImpl private class
in order to be able to create

109
00:06:01.520 --> 00:06:04.030 align:middle line:84%
a Collector, so
it's really cool.

110
00:06:04.030 --> 00:06:05.530 align:middle line:84%
So if you take a
look at this thing,

111
00:06:05.530 --> 00:06:09.050 align:middle line:84%
you can see that this
particular variant of

112
00:06:09.050 --> 00:06:11.390 align:middle line:84%
is passed four parameters,
where the last parameter's

113
00:06:11.390 --> 00:06:13.520 align:middle line:84%
optional, because its
Characteristics dot,

114
00:06:13.520 --> 00:06:16.910 align:middle line:84%
dot, dot, so that means
it's an optional parameter.

115
00:06:16.910 --> 00:06:19.490 align:middle line:84%
We'll see that there's also a
five-parameter version of as

116
00:06:19.490 --> 00:06:20.220 align:middle line:90%
well.

117
00:06:20.220 --> 00:06:22.160 align:middle line:84%
So these are some
other methods that

118
00:06:22.160 --> 00:06:24.890 align:middle line:84%
are defined above
and beyond what

119
00:06:24.890 --> 00:06:27.080 align:middle line:84%
we looked at before, with
supplier, accumulator,

120
00:06:27.080 --> 00:06:28.460 align:middle line:90%
and so on.

121
00:06:28.460 --> 00:06:30.960 align:middle line:84%
So you can see here that here's
the four-parameter, version,

122
00:06:30.960 --> 00:06:33.710 align:middle line:84%
and all it does is it just
takes the four parameters that

123
00:06:33.710 --> 00:06:36.860 align:middle line:84%
are passed in and
just passes them down

124
00:06:36.860 --> 00:06:40.290 align:middle line:84%
to new
Collectors.cCollectorImpl,

125
00:06:40.290 --> 00:06:44.510 align:middle line:84%
so it makes a new CollectorImpl
object passing in those four

126
00:06:44.510 --> 00:06:47.390 align:middle line:90%
parameters.

127
00:06:47.390 --> 00:06:50.060 align:middle line:90%
Here is the of() method.

128
00:06:50.060 --> 00:06:53.150 align:middle line:84%
It's an overloaded method
that's passed five parameters.

129
00:06:53.150 --> 00:06:55.520 align:middle line:84%
You can see the difference
is that this version does not

130
00:06:55.520 --> 00:06:59.450 align:middle line:84%
take a finisher, whereas this
version does take a finisher.

131
00:06:59.450 --> 00:07:01.650 align:middle line:84%
And again, because
Characteristics is optional,

132
00:07:01.650 --> 00:07:03.150 align:middle line:84%
you don't always
have to provide it.

133
00:07:03.150 --> 00:07:04.990 align:middle line:90%
You can leave it off.

134
00:07:04.990 --> 00:07:08.710 align:middle line:84%
OK, so that's basically
the of() methods,

135
00:07:08.710 --> 00:07:12.690 align:middle line:84%
and these are the public
methods that are exposed through

136
00:07:12.690 --> 00:07:16.230 align:middle line:84%
the Collector interface that
you can use in your programs

137
00:07:16.230 --> 00:07:20.830 align:middle line:90%
to create your own Collector.

138
00:07:20.830 --> 00:07:22.990 align:middle line:84%
And as I mentioned
before, both of them

139
00:07:22.990 --> 00:07:25.750 align:middle line:84%
internally use the private
CollectorImpl class,

140
00:07:25.750 --> 00:07:29.902 align:middle line:84%
which is perfectly copacetic
because the collector

141
00:07:29.902 --> 00:07:31.360 align:middle line:84%
interface is part
of the JDK, case,

142
00:07:31.360 --> 00:07:34.060 align:middle line:84%
so it can use those private
implementations that

143
00:07:34.060 --> 00:07:36.090 align:middle line:90%
are part of the same package.