WEBVTT

1
00:00:00.000 --> 00:00:00.990 align:middle line:90%


2
00:00:00.990 --> 00:00:04.260 align:middle line:84%
We'll begin our discussion
of Java Streams Internals

3
00:00:04.260 --> 00:00:07.605 align:middle line:84%
by focusing on the splitting
and combining phases.

4
00:00:07.605 --> 00:00:10.690 align:middle line:90%


5
00:00:10.690 --> 00:00:13.540 align:middle line:84%
One of the most important
things to understand in streams

6
00:00:13.540 --> 00:00:17.470 align:middle line:84%
is to know what aspects you can
change, the programmer who uses

7
00:00:17.470 --> 00:00:20.300 align:middle line:84%
streams, and what
aspects are simply fixed,

8
00:00:20.300 --> 00:00:22.000 align:middle line:84%
and you have to just
learn to live with.

9
00:00:22.000 --> 00:00:24.650 align:middle line:90%


10
00:00:24.650 --> 00:00:27.260 align:middle line:84%
Recall the different
phases of a stream.

11
00:00:27.260 --> 00:00:28.890 align:middle line:90%
There are three phases.

12
00:00:28.890 --> 00:00:30.950 align:middle line:84%
The first phase is
the splitting phase,

13
00:00:30.950 --> 00:00:33.770 align:middle line:84%
which uses a Spliterator
to convert a data

14
00:00:33.770 --> 00:00:36.290 align:middle line:90%
source into a stream.

15
00:00:36.290 --> 00:00:38.650 align:middle line:84%
The second phase is
the applying phase,

16
00:00:38.650 --> 00:00:42.230 align:middle line:84%
which processes the
elements in the stream.

17
00:00:42.230 --> 00:00:44.540 align:middle line:84%
We've talked about before
that a sequential stream

18
00:00:44.540 --> 00:00:45.643 align:middle line:90%
runs things in one thread.

19
00:00:45.643 --> 00:00:47.060 align:middle line:84%
But a parallel
stream can actually

20
00:00:47.060 --> 00:00:50.510 align:middle line:84%
process all of its elements
simultaneously in parallel

21
00:00:50.510 --> 00:00:53.020 align:middle line:90%
and the common ForkJoinPool.

22
00:00:53.020 --> 00:00:54.520 align:middle line:84%
And then the third
and final phase

23
00:00:54.520 --> 00:00:57.310 align:middle line:84%
is the combined phase, which
triggers intermediate operation

24
00:00:57.310 --> 00:01:01.510 align:middle line:84%
processing, and will create
a single so-called reduced

25
00:01:01.510 --> 00:01:03.990 align:middle line:90%
result.

26
00:01:03.990 --> 00:01:05.700 align:middle line:84%
Knowing which of
these three phases

27
00:01:05.700 --> 00:01:09.240 align:middle line:84%
you can change and control
and how to control them

28
00:01:09.240 --> 00:01:11.490 align:middle line:84%
is very important, especially
if you start programming

29
00:01:11.490 --> 00:01:13.380 align:middle line:84%
with parallel streams,
where you want

30
00:01:13.380 --> 00:01:15.420 align:middle line:84%
to be able to get
the maximum out

31
00:01:15.420 --> 00:01:18.743 align:middle line:90%
of your systems performance.

32
00:01:18.743 --> 00:01:20.160 align:middle line:84%
For now, we're
just going to focus

33
00:01:20.160 --> 00:01:21.960 align:middle line:84%
on sequential streams
and the internals

34
00:01:21.960 --> 00:01:25.073 align:middle line:84%
of sequential streams, covering
splitting and combining.

35
00:01:25.073 --> 00:01:27.240 align:middle line:84%
And then later, when we
talk about parallel streams,

36
00:01:27.240 --> 00:01:30.090 align:middle line:84%
we'll talk further about how
these different phases work.

37
00:01:30.090 --> 00:01:33.810 align:middle line:84%
And we'll also spend more time
covering the phase of applying,

38
00:01:33.810 --> 00:01:36.000 align:middle line:84%
which is the interesting
part that involves

39
00:01:36.000 --> 00:01:39.720 align:middle line:90%
the common ForkJoinPool.

40
00:01:39.720 --> 00:01:43.200 align:middle line:84%
Java's splitting and combining
mechanisms are often invisible.

41
00:01:43.200 --> 00:01:45.900 align:middle line:84%
They are something like a
ninja, where you can't see it

42
00:01:45.900 --> 00:01:48.670 align:middle line:90%
when it does its work properly.

43
00:01:48.670 --> 00:01:53.800 align:middle line:84%
All Java collections come
with predefined Spliterators.

44
00:01:53.800 --> 00:01:57.190 align:middle line:84%
And these predefined
Spliterators are actually

45
00:01:57.190 --> 00:02:01.810 align:middle line:84%
defined, and the core
interface is part

46
00:02:01.810 --> 00:02:04.580 align:middle line:90%
of the collection interface.

47
00:02:04.580 --> 00:02:06.160 align:middle line:84%
And if you take a
look at collection,

48
00:02:06.160 --> 00:02:07.900 align:middle line:84%
you can see that
there's actually

49
00:02:07.900 --> 00:02:12.910 align:middle line:84%
a Spliterator method which
has a default behavior, which,

50
00:02:12.910 --> 00:02:15.100 align:middle line:84%
of course, can be
overridden as needed

51
00:02:15.100 --> 00:02:19.473 align:middle line:84%
in various implementations
of the collection interface.

52
00:02:19.473 --> 00:02:21.140 align:middle line:84%
You can also see, if
you look carefully,

53
00:02:21.140 --> 00:02:25.990 align:middle line:84%
that the Spliterator interface
is used by various methods that

54
00:02:25.990 --> 00:02:28.570 align:middle line:90%
are also defined in collector--

55
00:02:28.570 --> 00:02:29.883 align:middle line:90%
in collection, rather.

56
00:02:29.883 --> 00:02:31.300 align:middle line:84%
So for example,
if you take a look

57
00:02:31.300 --> 00:02:35.080 align:middle line:84%
and see the stream method
which converts something

58
00:02:35.080 --> 00:02:38.290 align:middle line:84%
into a sequential
stream, the way it works

59
00:02:38.290 --> 00:02:42.620 align:middle line:84%
is it calls
StreamSupport.stream,

60
00:02:42.620 --> 00:02:45.170 align:middle line:84%
calling the Spliterator
method to get a Spliterator,

61
00:02:45.170 --> 00:02:48.080 align:middle line:84%
and passing the false flag,
which goes ahead and makes

62
00:02:48.080 --> 00:02:49.040 align:middle line:90%
a sequential stream.

63
00:02:49.040 --> 00:02:52.930 align:middle line:84%
And we'll talk about
that more later as well.

64
00:02:52.930 --> 00:02:57.730 align:middle line:84%
Java also provides various
predefined collector factory

65
00:02:57.730 --> 00:03:01.840 align:middle line:84%
methods in the
Collectors utility class.

66
00:03:01.840 --> 00:03:04.597 align:middle line:84%
And so as you can see
here, we have a bunch

67
00:03:04.597 --> 00:03:05.680 align:middle line:90%
of different methods here.

68
00:03:05.680 --> 00:03:08.620 align:middle line:90%
We have the toList method.

69
00:03:08.620 --> 00:03:10.210 align:middle line:90%
We have the toSet method.

70
00:03:10.210 --> 00:03:12.310 align:middle line:90%
There's a toCollection method.

71
00:03:12.310 --> 00:03:14.530 align:middle line:90%
There's a toMap method.

72
00:03:14.530 --> 00:03:17.140 align:middle line:84%
We'll take a look at some of
these as we go further along

73
00:03:17.140 --> 00:03:20.410 align:middle line:84%
and see other ways about
how they work under the hood

74
00:03:20.410 --> 00:03:21.097 align:middle line:90%
and so on.

75
00:03:21.097 --> 00:03:22.930 align:middle line:84%
But for right now, just
be aware that you've

76
00:03:22.930 --> 00:03:26.290 align:middle line:84%
got a lot of mechanisms
out of the box

77
00:03:26.290 --> 00:03:29.650 align:middle line:84%
that are useful for almost
all your programming

78
00:03:29.650 --> 00:03:31.600 align:middle line:90%
needs with streams.

79
00:03:31.600 --> 00:03:34.930 align:middle line:84%
However, there are
some contexts where

80
00:03:34.930 --> 00:03:38.110 align:middle line:84%
what you get out of the
box isn't really quite

81
00:03:38.110 --> 00:03:39.370 align:middle line:90%
what you need.

82
00:03:39.370 --> 00:03:42.280 align:middle line:84%
For example, you may have
your own user-defined data

83
00:03:42.280 --> 00:03:44.620 align:middle line:84%
structures that don't come
with Spliterators until you

84
00:03:44.620 --> 00:03:45.670 align:middle line:90%
implement them.

85
00:03:45.670 --> 00:03:47.200 align:middle line:84%
They may be above
and beyond what

86
00:03:47.200 --> 00:03:49.602 align:middle line:84%
is provided in the Java
collections framework.

87
00:03:49.602 --> 00:03:51.310 align:middle line:84%
Likewise, you may have
various use cases,

88
00:03:51.310 --> 00:03:53.227 align:middle line:84%
where you have to be
able to put data together

89
00:03:53.227 --> 00:03:54.440 align:middle line:90%
in interesting ways.

90
00:03:54.440 --> 00:03:58.150 align:middle line:84%
So it's possible to customize
the behavior of splitting

91
00:03:58.150 --> 00:04:00.040 align:middle line:84%
and combining as
long as you know

92
00:04:00.040 --> 00:04:02.740 align:middle line:84%
the proper interfaces to use,
and how to integrate them back

93
00:04:02.740 --> 00:04:05.440 align:middle line:90%
into the Java Streams framework.

94
00:04:05.440 --> 00:04:09.400 align:middle line:84%
In particular, there's an
interface called Spliterator,

95
00:04:09.400 --> 00:04:10.900 align:middle line:90%
which is a generic interface.

96
00:04:10.900 --> 00:04:16.152 align:middle line:84%
And it's used to traverse and
partition elements of a source.

97
00:04:16.152 --> 00:04:18.610 align:middle line:84%
And as you can see here, there's
a number of methods there,

98
00:04:18.610 --> 00:04:21.740 align:middle line:84%
like tryAdvance and
forEachRemaining,

99
00:04:21.740 --> 00:04:23.617 align:middle line:90%
and so on and so forth.

100
00:04:23.617 --> 00:04:25.450 align:middle line:84%
And, of course, trySplit,
which is something

101
00:04:25.450 --> 00:04:28.340 align:middle line:84%
we're going to talk about when
we talk about parallel streams.

102
00:04:28.340 --> 00:04:30.490 align:middle line:84%
So if you need to implement
your own Spliterator,

103
00:04:30.490 --> 00:04:33.340 align:middle line:84%
then you typically do that
by either implementing

104
00:04:33.340 --> 00:04:37.540 align:middle line:84%
the Spliterator interface,
or essentially extending

105
00:04:37.540 --> 00:04:42.670 align:middle line:84%
something called the
abstract Spliterator class.

106
00:04:42.670 --> 00:04:46.710 align:middle line:84%
Likewise, there's also
a Collector interface.

107
00:04:46.710 --> 00:04:50.280 align:middle line:84%
And this defines a
number of methods

108
00:04:50.280 --> 00:04:55.050 align:middle line:84%
that are used to accumulate
input elements in a stream

109
00:04:55.050 --> 00:04:58.800 align:middle line:84%
into something known as a
mutable result container.

110
00:04:58.800 --> 00:05:01.800 align:middle line:84%
And not surprisingly,
the Collector interface

111
00:05:01.800 --> 00:05:06.325 align:middle line:84%
is used in conjunction with
the collect terminal operation.

112
00:05:06.325 --> 00:05:07.950 align:middle line:84%
So as you can see
here, we have a bunch

113
00:05:07.950 --> 00:05:11.520 align:middle line:84%
of methods like supplier,
accumulator, combiner,

114
00:05:11.520 --> 00:05:12.458 align:middle line:90%
finisher, and so on.

115
00:05:12.458 --> 00:05:14.250 align:middle line:84%
And these are all
basically factory methods

116
00:05:14.250 --> 00:05:17.970 align:middle line:84%
that create the appropriate
data types that are used

117
00:05:17.970 --> 00:05:20.670 align:middle line:90%
by the Collector to do its job.

118
00:05:20.670 --> 00:05:22.680 align:middle line:84%
Not surprisingly, the
predefined collectors

119
00:05:22.680 --> 00:05:26.190 align:middle line:84%
that come out of the box for
collecting into lists or sets

120
00:05:26.190 --> 00:05:28.650 align:middle line:84%
also implement the
Collector interface.

121
00:05:28.650 --> 00:05:31.770 align:middle line:84%
But because it's provided
as a public interface,

122
00:05:31.770 --> 00:05:35.220 align:middle line:84%
you can come along and define
your implementations as well.

123
00:05:35.220 --> 00:05:37.290 align:middle line:84%
And then they're very
simple to connect

124
00:05:37.290 --> 00:05:40.070 align:middle line:90%
into the streams framework.