WEBVTT

1
00:00:00.000 --> 00:00:00.610 align:middle line:90%


2
00:00:00.610 --> 00:00:02.440 align:middle line:84%
We're now going to
cover the common factory

3
00:00:02.440 --> 00:00:07.290 align:middle line:84%
methods that are defined in
the Java Streams framework.

4
00:00:07.290 --> 00:00:11.360 align:middle line:84%
There's several common
ways to obtain a stream.

5
00:00:11.360 --> 00:00:13.820 align:middle line:84%
One of the most common
ways is to obtain it

6
00:00:13.820 --> 00:00:15.590 align:middle line:90%
from a Java collection.

7
00:00:15.590 --> 00:00:18.680 align:middle line:84%
As you can see here,
we create ourselves

8
00:00:18.680 --> 00:00:23.590 align:middle line:84%
a list of strings based
on the array of strings

9
00:00:23.590 --> 00:00:27.610 align:middle line:84%
do, re, mi as we've been doing
with the simple lab search

10
00:00:27.610 --> 00:00:29.840 align:middle line:90%
stream program.

11
00:00:29.840 --> 00:00:34.740 align:middle line:84%
And then we can go ahead and
call the stream factory method,

12
00:00:34.740 --> 00:00:37.520 align:middle line:90%
which is defined on collection.

13
00:00:37.520 --> 00:00:41.260 align:middle line:84%
And that will go ahead and
return a sequential stream

14
00:00:41.260 --> 00:00:45.963 align:middle line:84%
that contains all the elements
in that particular collection.

15
00:00:45.963 --> 00:00:47.630 align:middle line:84%
This is the approach,
of course, that we

16
00:00:47.630 --> 00:00:49.520 align:middle line:84%
use in this simple
search string program

17
00:00:49.520 --> 00:00:52.230 align:middle line:84%
because we're doing
sequential streams.

18
00:00:52.230 --> 00:00:55.110 align:middle line:84%
Conversely, we could also call
the parallel stream factory

19
00:00:55.110 --> 00:00:58.380 align:middle line:84%
method, which looks almost
identical and behaves very

20
00:00:58.380 --> 00:01:01.800 align:middle line:84%
similarly if you look at how
it's implemented compared

21
00:01:01.800 --> 00:01:02.935 align:middle line:90%
to the stream method.

22
00:01:02.935 --> 00:01:04.310 align:middle line:84%
But under the
hood, of course, it

23
00:01:04.310 --> 00:01:08.510 align:middle line:84%
creates a parallel stream,
not a sequential stream.

24
00:01:08.510 --> 00:01:11.600 align:middle line:84%
Interestingly enough, you can
actually start by creating

25
00:01:11.600 --> 00:01:15.440 align:middle line:84%
a sequential stream by
using the .stream call.

26
00:01:15.440 --> 00:01:18.290 align:middle line:84%
And then before you reach
the terminal operation,

27
00:01:18.290 --> 00:01:22.310 align:middle line:84%
you can convert from sequential
to parallel stream by using

28
00:01:22.310 --> 00:01:24.530 align:middle line:90%
the .parallel method.

29
00:01:24.530 --> 00:01:27.710 align:middle line:84%
And this call will,
essentially, then

30
00:01:27.710 --> 00:01:29.630 align:middle line:84%
ensure that parallel
streams processing

31
00:01:29.630 --> 00:01:32.570 align:middle line:84%
is going to be performed on
this stream when the terminal

32
00:01:32.570 --> 00:01:34.370 align:middle line:90%
operation is hit.

33
00:01:34.370 --> 00:01:36.140 align:middle line:84%
Also interestingly,
you could then

34
00:01:36.140 --> 00:01:37.680 align:middle line:90%
call that sequential again.

35
00:01:37.680 --> 00:01:41.450 align:middle line:84%
There's another method-- there's
a parallel in .sequential.

36
00:01:41.450 --> 00:01:43.910 align:middle line:84%
And so you can basically
go back and forth

37
00:01:43.910 --> 00:01:45.590 align:middle line:90%
between these different calls.

38
00:01:45.590 --> 00:01:47.900 align:middle line:84%
And whichever one is
the last one that's

39
00:01:47.900 --> 00:01:50.300 align:middle line:84%
called before the
terminal operation is hit

40
00:01:50.300 --> 00:01:51.803 align:middle line:90%
is the one that wins.

41
00:01:51.803 --> 00:01:53.720 align:middle line:84%
It's kind of unusual to
do more than one call,

42
00:01:53.720 --> 00:01:57.140 align:middle line:84%
however, because it's simply
confusing and has no point.

43
00:01:57.140 --> 00:02:01.310 align:middle line:84%
But we'll see later how we
can use this parallel method

44
00:02:01.310 --> 00:02:03.260 align:middle line:84%
in order to
conditionally convert

45
00:02:03.260 --> 00:02:06.020 align:middle line:84%
a stream to a parallel
stream, which turns out

46
00:02:06.020 --> 00:02:08.900 align:middle line:84%
to be useful for certain kinds
of testing and benchmarking

47
00:02:08.900 --> 00:02:10.889 align:middle line:90%
purposes.

48
00:02:10.889 --> 00:02:13.050 align:middle line:84%
Another way of being
able to create a stream

49
00:02:13.050 --> 00:02:17.910 align:middle line:84%
is by taking an array, and
using the arrays class,

50
00:02:17.910 --> 00:02:19.890 align:middle line:84%
and calling a factory
method on that.

51
00:02:19.890 --> 00:02:22.740 align:middle line:84%
So let's assume that we
have an array of strings

52
00:02:22.740 --> 00:02:25.320 align:middle line:90%
with a, b, c, d, e, or whatever.

53
00:02:25.320 --> 00:02:27.000 align:middle line:84%
Then one way to make
a stream from this

54
00:02:27.000 --> 00:02:33.807 align:middle line:84%
is to say arrays.stream where
arrays is a utility class that

55
00:02:33.807 --> 00:02:35.640 align:middle line:84%
has a bunch of factory
methods, one of which

56
00:02:35.640 --> 00:02:38.792 align:middle line:84%
is a method that converts
an array to a string.

57
00:02:38.792 --> 00:02:41.250 align:middle line:84%
And once we've done this, once
we have a stream of strings,

58
00:02:41.250 --> 00:02:43.072 align:middle line:84%
then we can do some
operations on it.

59
00:02:43.072 --> 00:02:45.530 align:middle line:84%
As you can see here, we have
a couple of different options.

60
00:02:45.530 --> 00:02:49.910 align:middle line:84%
One approach is to
use a lamda expression

61
00:02:49.910 --> 00:02:53.720 align:middle line:84%
with the forEach method so we
could go ahead and print out

62
00:02:53.720 --> 00:02:59.160 align:middle line:84%
each element s using the
println method on system.out.

63
00:02:59.160 --> 00:03:02.423 align:middle line:84%
Alternatively, we could
use a factory method--

64
00:03:02.423 --> 00:03:04.340 align:middle line:84%
sorry, a method reference
in order to do this.

65
00:03:04.340 --> 00:03:06.140 align:middle line:84%
So we could use a
method reference

66
00:03:06.140 --> 00:03:09.370 align:middle line:90%
to print out each element step.

67
00:03:09.370 --> 00:03:12.320 align:middle line:84%
We could also use a
static factory method.

68
00:03:12.320 --> 00:03:16.830 align:middle line:84%
So once again, let's assume
we have our array of strings.

69
00:03:16.830 --> 00:03:20.510 align:middle line:84%
And then we can say stream.of
and use the ofFactory method

70
00:03:20.510 --> 00:03:22.820 align:middle line:84%
defined on the stream
interface in order

71
00:03:22.820 --> 00:03:25.650 align:middle line:84%
to convert the
array into a string.

72
00:03:25.650 --> 00:03:27.380 align:middle line:84%
And as we saw before,
we could print it

73
00:03:27.380 --> 00:03:29.990 align:middle line:84%
out either using a lambda
expression or a method

74
00:03:29.990 --> 00:03:33.350 align:middle line:84%
reference to print the
elements of the stream out.

75
00:03:33.350 --> 00:03:35.300 align:middle line:90%
Couple of different ways to go.

76
00:03:35.300 --> 00:03:38.060 align:middle line:84%
There are yet other interesting
static factor methods

77
00:03:38.060 --> 00:03:41.510 align:middle line:84%
that are also defined
on the stream interface.

78
00:03:41.510 --> 00:03:43.640 align:middle line:84%
One of the ones that I
find quite fascinating

79
00:03:43.640 --> 00:03:45.342 align:middle line:90%
is the iterate method.

80
00:03:45.342 --> 00:03:47.300 align:middle line:84%
What's interesting about
this particular method

81
00:03:47.300 --> 00:03:51.020 align:middle line:84%
is you can actually generate
an infinite stream this way

82
00:03:51.020 --> 00:03:53.150 align:middle line:84%
whereas the approaches
we've seen up here

83
00:03:53.150 --> 00:03:57.797 align:middle line:84%
using things like
an array or a list,

84
00:03:57.797 --> 00:03:59.630 align:middle line:84%
obviously those are
bounded data structures.

85
00:03:59.630 --> 00:04:02.880 align:middle line:84%
You don't have an unbounded
array in this context.

86
00:04:02.880 --> 00:04:04.580 align:middle line:84%
But with iterate,
in contrast, you

87
00:04:04.580 --> 00:04:08.700 align:middle line:84%
can make an arbitrary
sized unbounded stream.

88
00:04:08.700 --> 00:04:11.540 align:middle line:84%
So let's take a look and
see how we can use iterate.

89
00:04:11.540 --> 00:04:15.950 align:middle line:84%
This particular example
will generate and print

90
00:04:15.950 --> 00:04:20.510 align:middle line:84%
the first 100 Fibonacci numbers
in the Fibonacci sequence.

91
00:04:20.510 --> 00:04:23.160 align:middle line:84%
I'm sure you're familiar
with the Fibonacci sequence.

92
00:04:23.160 --> 00:04:25.932 align:middle line:84%
You can take a look on
the web to see what it is

93
00:04:25.932 --> 00:04:27.140 align:middle line:90%
if you don't know what it is.

94
00:04:27.140 --> 00:04:29.085 align:middle line:84%
But it's basically
a sequence that's

95
00:04:29.085 --> 00:04:32.390 align:middle line:84%
converted by adding the two
previous numbers together

96
00:04:32.390 --> 00:04:34.230 align:middle line:90%
repeatedly.

97
00:04:34.230 --> 00:04:36.680 align:middle line:84%
So what we do here is we start
by getting something called

98
00:04:36.680 --> 00:04:40.010 align:middle line:84%
the seed, which is the
initial element in the stream

99
00:04:40.010 --> 00:04:41.170 align:middle line:90%
that we're defining.

100
00:04:41.170 --> 00:04:44.060 align:middle line:84%
And here our seed is
going to be an array

101
00:04:44.060 --> 00:04:46.400 align:middle line:84%
of two big integers,
both of which

102
00:04:46.400 --> 00:04:48.650 align:middle line:90%
start out with a value of one.

103
00:04:48.650 --> 00:04:50.980 align:middle line:90%
So that's the initial value.

104
00:04:50.980 --> 00:04:54.090 align:middle line:84%
And then what we have is we have
basically a generator lambda.

105
00:04:54.090 --> 00:04:56.550 align:middle line:84%
And this is a
lambda function that

106
00:04:56.550 --> 00:05:00.630 align:middle line:84%
will be applied indefinitely
to the previous element

107
00:05:00.630 --> 00:05:03.803 align:middle line:84%
in this stream to
produce a new element.

108
00:05:03.803 --> 00:05:05.220 align:middle line:84%
And you can see
what we do here is

109
00:05:05.220 --> 00:05:11.220 align:middle line:84%
we take the Fibonacci array that
came in as the first element.

110
00:05:11.220 --> 00:05:15.400 align:middle line:84%
And then we make ourselves
a new big integer array.

111
00:05:15.400 --> 00:05:19.620 align:middle line:84%
And we're going to put the
second element of that input

112
00:05:19.620 --> 00:05:22.490 align:middle line:84%
array as the first
element in the new array.

113
00:05:22.490 --> 00:05:26.550 align:middle line:84%
And then we're going to
add the second element

114
00:05:26.550 --> 00:05:27.840 align:middle line:90%
to the first element.

115
00:05:27.840 --> 00:05:30.210 align:middle line:84%
And that becomes the second
element in the array.

116
00:05:30.210 --> 00:05:31.620 align:middle line:84%
So that's basically
just defining

117
00:05:31.620 --> 00:05:33.993 align:middle line:90%
the Fibonacci sequence.

118
00:05:33.993 --> 00:05:35.910 align:middle line:84%
So we go ahead and
generate all those results.

119
00:05:35.910 --> 00:05:37.733 align:middle line:90%
That creates an infinite stream.

120
00:05:37.733 --> 00:05:39.150 align:middle line:84%
And then what we're
going to do is

121
00:05:39.150 --> 00:05:43.020 align:middle line:84%
we're going to map each of
those two element arrays

122
00:05:43.020 --> 00:05:45.960 align:middle line:84%
into a single
stream that contains

123
00:05:45.960 --> 00:05:48.012 align:middle line:90%
just the first element.

124
00:05:48.012 --> 00:05:49.470 align:middle line:84%
So that will end
up basically being

125
00:05:49.470 --> 00:05:53.360 align:middle line:84%
the Fibonacci sequence with the
first element being referenced

126
00:05:53.360 --> 00:05:53.860 align:middle line:90%
here.

127
00:05:53.860 --> 00:05:56.140 align:middle line:84%
And there'll be a stream
of those elements.

128
00:05:56.140 --> 00:05:57.690 align:middle line:84%
Now we could let
this run forever

129
00:05:57.690 --> 00:05:59.610 align:middle line:90%
but that would take a long time.

130
00:05:59.610 --> 00:06:01.650 align:middle line:84%
It's obviously an
infinite sequence,

131
00:06:01.650 --> 00:06:04.140 align:middle line:84%
although big integers will go
and go and go till we run out

132
00:06:04.140 --> 00:06:05.315 align:middle line:90%
of memory on the machine.

133
00:06:05.315 --> 00:06:07.440 align:middle line:84%
But more realistically,
what we're going to do here

134
00:06:07.440 --> 00:06:11.730 align:middle line:84%
is we're going to limit the
stream to just 100 elements.

135
00:06:11.730 --> 00:06:15.210 align:middle line:84%
So limit is what's called a
short circuiting intermediate

136
00:06:15.210 --> 00:06:16.320 align:middle line:90%
operation.

137
00:06:16.320 --> 00:06:19.693 align:middle line:84%
And it says after you've
seen 100 of these things,

138
00:06:19.693 --> 00:06:20.610 align:middle line:90%
the condition is done.

139
00:06:20.610 --> 00:06:22.020 align:middle line:90%
The stream is over.

140
00:06:22.020 --> 00:06:23.310 align:middle line:90%
Let's stop.

141
00:06:23.310 --> 00:06:26.130 align:middle line:84%
So we're going to end up with
a stream of the first 100

142
00:06:26.130 --> 00:06:27.900 align:middle line:90%
Fibonacci elements.

143
00:06:27.900 --> 00:06:30.690 align:middle line:84%
And then we will go ahead and
have the terminal operation

144
00:06:30.690 --> 00:06:32.220 align:middle line:84%
which, as you
undoubtedly recall,

145
00:06:32.220 --> 00:06:34.470 align:middle line:84%
will trigger all the
intermediate operation

146
00:06:34.470 --> 00:06:35.820 align:middle line:90%
processing.

147
00:06:35.820 --> 00:06:40.170 align:middle line:84%
And in this case, it will print
out the first 100 Fibonacci

148
00:06:40.170 --> 00:06:42.970 align:middle line:90%
numbers.

149
00:06:42.970 --> 00:06:46.930 align:middle line:84%
As a good rule of thumb,
try not to use iterate

150
00:06:46.930 --> 00:06:48.700 align:middle line:90%
in a parallel stream.

151
00:06:48.700 --> 00:06:51.730 align:middle line:84%
It turns out that iterates
is very inefficient

152
00:06:51.730 --> 00:06:54.338 align:middle line:84%
when used with a parallel stream
for a whole bunch of reasons

153
00:06:54.338 --> 00:06:56.380 align:middle line:84%
that we don't have time
to go into at the moment.

154
00:06:56.380 --> 00:06:59.080 align:middle line:84%
But we'll talk more about
this when we discuss parallel

155
00:06:59.080 --> 00:07:01.830 align:middle line:90%
streams in later weeks.