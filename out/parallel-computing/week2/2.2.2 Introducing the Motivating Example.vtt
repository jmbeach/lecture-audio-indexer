WEBVTT

1
00:00:00.000 --> 00:00:00.870 align:middle line:90%


2
00:00:00.870 --> 00:00:04.740 align:middle line:84%
Let's now go ahead and
visualize the behavior

3
00:00:04.740 --> 00:00:08.400 align:middle line:84%
of the WordSearcher
findWords method.

4
00:00:08.400 --> 00:00:12.330 align:middle line:84%
And this will provide us with
a way of literally visualizing

5
00:00:12.330 --> 00:00:14.921 align:middle line:84%
what's happening when
the program runs.

6
00:00:14.921 --> 00:00:16.379 align:middle line:84%
And as I mentioned
before, I really

7
00:00:16.379 --> 00:00:17.970 align:middle line:84%
like these visualizations
because you

8
00:00:17.970 --> 00:00:21.600 align:middle line:84%
help to see what's happening
under the hood in a way that

9
00:00:21.600 --> 00:00:26.610 align:middle line:84%
might not be quite so intuitive
just by reading the source

10
00:00:26.610 --> 00:00:28.960 align:middle line:90%
code.

11
00:00:28.960 --> 00:00:31.500 align:middle line:84%
So as you can see,
the findWord method

12
00:00:31.500 --> 00:00:35.280 align:middle line:84%
is used to search for
words in the input string.

13
00:00:35.280 --> 00:00:37.170 align:middle line:84%
Keep in mind, in this
case, the input string

14
00:00:37.170 --> 00:00:40.560 align:middle line:84%
is the complete lyrics to
the song, "The Do-Re-Mi Song"

15
00:00:40.560 --> 00:00:41.970 align:middle line:90%
from The Sound of Music.

16
00:00:41.970 --> 00:00:48.690 align:middle line:84%
And what is given as input to
findWords is the list of words

17
00:00:48.690 --> 00:00:50.310 align:middle line:90%
that you actually want to find.

18
00:00:50.310 --> 00:00:54.380 align:middle line:84%
So that's the Do-Re-Mi,
and so on, string--

19
00:00:54.380 --> 00:00:55.805 align:middle line:90%
list of strings.

20
00:00:55.805 --> 00:00:57.180 align:middle line:84%
The first thing
we're going to do

21
00:00:57.180 --> 00:00:59.610 align:middle line:84%
is we're to take
that list of strings

22
00:00:59.610 --> 00:01:02.040 align:middle line:84%
and we're going to
use the stream factory

23
00:01:02.040 --> 00:01:06.780 align:middle line:84%
method to convert that list
collection into a stream.

24
00:01:06.780 --> 00:01:09.220 align:middle line:84%
Since we're using that
stream factory method,

25
00:01:09.220 --> 00:01:11.730 align:middle line:90%
we create a sequential string.

26
00:01:11.730 --> 00:01:15.330 align:middle line:84%
So now we have a
stream of strings.

27
00:01:15.330 --> 00:01:18.510 align:middle line:84%
That's the output from
the stream factory method.

28
00:01:18.510 --> 00:01:24.270 align:middle line:84%
That stream of strings is
then fed as input into the map

29
00:01:24.270 --> 00:01:26.220 align:middle line:90%
intermediate operation.

30
00:01:26.220 --> 00:01:28.650 align:middle line:84%
And the map intermediate
operation then

31
00:01:28.650 --> 00:01:35.220 align:middle line:84%
uses the searchForWord method
reference as its behavior,

32
00:01:35.220 --> 00:01:39.540 align:middle line:84%
and goes ahead and calls
searchForWord for every word

33
00:01:39.540 --> 00:01:40.330 align:middle line:90%
in the stream.

34
00:01:40.330 --> 00:01:43.020 align:middle line:84%
So for every word in the
stream, the map operation

35
00:01:43.020 --> 00:01:46.800 align:middle line:84%
invokes the searchForWord
behavior or method reference

36
00:01:46.800 --> 00:01:51.450 align:middle line:84%
to find if that word
occurs in the stream.

37
00:01:51.450 --> 00:01:54.030 align:middle line:84%
What searchForWord does--
and we'll take a look at how

38
00:01:54.030 --> 00:01:55.920 align:middle line:84%
searchForWord is
defined a bit later--

39
00:01:55.920 --> 00:02:00.360 align:middle line:84%
what searchForWord does is
it goes ahead and searches

40
00:02:00.360 --> 00:02:02.700 align:middle line:90%
in the stream--

41
00:02:02.700 --> 00:02:04.270 align:middle line:90%
sorry, in the input string.

42
00:02:04.270 --> 00:02:07.510 align:middle line:84%
And if it finds a
match, it records it.

43
00:02:07.510 --> 00:02:12.120 align:middle line:84%
And what it returns is something
called a search result which

44
00:02:12.120 --> 00:02:15.330 align:middle line:84%
is an object that stores
the number of times

45
00:02:15.330 --> 00:02:17.368 align:middle line:84%
a word appeared in
the input string.

46
00:02:17.368 --> 00:02:19.410 align:middle line:84%
And so it doesn't only
store the number of times,

47
00:02:19.410 --> 00:02:22.690 align:middle line:84%
it also stores the location
where the word appeared.

48
00:02:22.690 --> 00:02:25.270 align:middle line:84%
And we're going to be using
search result through a number

49
00:02:25.270 --> 00:02:26.370 align:middle line:90%
of different case studies.

50
00:02:26.370 --> 00:02:27.870 align:middle line:84%
So it's important,
at least, to have

51
00:02:27.870 --> 00:02:29.812 align:middle line:90%
a general idea of what it does.

52
00:02:29.812 --> 00:02:31.520 align:middle line:84%
Now, one of the things
you'll notice here

53
00:02:31.520 --> 00:02:34.760 align:middle line:84%
is that if you look at the
visualization of the stream,

54
00:02:34.760 --> 00:02:38.100 align:middle line:84%
we went from a
stream of strings--

55
00:02:38.100 --> 00:02:41.090 align:middle line:84%
which I show here as
just the gray squares--

56
00:02:41.090 --> 00:02:42.980 align:middle line:84%
to a stream of
search results, which

57
00:02:42.980 --> 00:02:47.970 align:middle line:84%
I show as kind of the round
bronzy-gold looking circles.

58
00:02:47.970 --> 00:02:49.550 align:middle line:84%
And that's just
indicating that we've

59
00:02:49.550 --> 00:02:52.280 align:middle line:84%
changed the type of
elements in the stream,

60
00:02:52.280 --> 00:02:55.410 align:middle line:84%
just literally by changing the
shape, just to visualize it.

61
00:02:55.410 --> 00:03:00.320 align:middle line:84%
So we end up with a stream
of these search results.

62
00:03:00.320 --> 00:03:04.310 align:middle line:84%
And we'll see this later,
that the map operation

63
00:03:04.310 --> 00:03:06.655 align:middle line:90%
can be used to transform types.

64
00:03:06.655 --> 00:03:08.280 align:middle line:84%
It doesn't have to
transform the types,

65
00:03:08.280 --> 00:03:09.863 align:middle line:84%
but it can be used
to transform types.

66
00:03:09.863 --> 00:03:14.072 align:middle line:84%
And we use it, in this case,
to transform the types.

67
00:03:14.072 --> 00:03:15.530 align:middle line:84%
The next thing
we're going to do is

68
00:03:15.530 --> 00:03:18.860 align:middle line:84%
we're going to take the
stream of search results

69
00:03:18.860 --> 00:03:21.560 align:middle line:84%
and we're going to
essentially connect it

70
00:03:21.560 --> 00:03:24.470 align:middle line:84%
to the filter
intermediate operation.

71
00:03:24.470 --> 00:03:29.270 align:middle line:84%
And what filter will do is
it will only allow elements

72
00:03:29.270 --> 00:03:31.940 align:middle line:84%
in the stream to pass
through the filter

73
00:03:31.940 --> 00:03:33.943 align:middle line:90%
if they match the predicate.

74
00:03:33.943 --> 00:03:35.360 align:middle line:84%
So what we're
basically doing here

75
00:03:35.360 --> 00:03:39.170 align:middle line:84%
is we're removing empty search
results from the stream.

76
00:03:39.170 --> 00:03:41.060 align:middle line:84%
So if something is
empty, then it's

77
00:03:41.060 --> 00:03:44.780 align:middle line:84%
going to be removed
from the stream.

78
00:03:44.780 --> 00:03:46.615 align:middle line:84%
Now for this particular
example, of course,

79
00:03:46.615 --> 00:03:47.990 align:middle line:84%
we're going to
find all the words

80
00:03:47.990 --> 00:03:50.780 align:middle line:84%
because we're only looking for
the words that are in the song.

81
00:03:50.780 --> 00:03:52.430 align:middle line:84%
But more generally,
we could be looking

82
00:03:52.430 --> 00:03:54.020 align:middle line:84%
for words that
might not actually

83
00:03:54.020 --> 00:03:56.450 align:middle line:90%
be in the input string.

84
00:03:56.450 --> 00:04:00.470 align:middle line:84%
So it's possible that
the output of filter

85
00:04:00.470 --> 00:04:03.800 align:middle line:84%
will be smaller than
the input to filter,

86
00:04:03.800 --> 00:04:05.960 align:middle line:84%
because we may filter out
some of the things that

87
00:04:05.960 --> 00:04:07.950 align:middle line:90%
don't match the predicate.

88
00:04:07.950 --> 00:04:10.200 align:middle line:84%
So what we'll end up
with here is a stream

89
00:04:10.200 --> 00:04:11.900 align:middle line:90%
of non-empty search results.

90
00:04:11.900 --> 00:04:14.520 align:middle line:84%
So only things that
actually had a result

91
00:04:14.520 --> 00:04:17.980 align:middle line:84%
are going to show up
in the output stream.

92
00:04:17.980 --> 00:04:19.920 align:middle line:84%
And then the final
piece of the puzzle

93
00:04:19.920 --> 00:04:22.560 align:middle line:90%
is the collect operation.

94
00:04:22.560 --> 00:04:25.170 align:middle line:84%
Now collect is what's
called a terminal operation,

95
00:04:25.170 --> 00:04:27.340 align:middle line:90%
and it does several things.

96
00:04:27.340 --> 00:04:30.030 align:middle line:84%
First of all, it takes the
stream of non-empty search

97
00:04:30.030 --> 00:04:32.610 align:middle line:84%
results, and the first
thing that collect does

98
00:04:32.610 --> 00:04:35.220 align:middle line:84%
is it actually triggers
the intermediate operation

99
00:04:35.220 --> 00:04:36.330 align:middle line:90%
processing.

100
00:04:36.330 --> 00:04:38.010 align:middle line:84%
So this is a little
counterintuitive

101
00:04:38.010 --> 00:04:40.650 align:middle line:84%
at first, but what
that means is that none

102
00:04:40.650 --> 00:04:42.630 align:middle line:84%
of the intermediate
operations in the stream

103
00:04:42.630 --> 00:04:47.340 align:middle line:84%
even start to run until
collect is reached.

104
00:04:47.340 --> 00:04:50.280 align:middle line:84%
And I'll talk a little bit later
about how this actually works,

105
00:04:50.280 --> 00:04:54.010 align:middle line:84%
in terms of the streams
internal implementation details.

106
00:04:54.010 --> 00:04:56.400 align:middle line:84%
But for now, logically
speaking, the wheels

107
00:04:56.400 --> 00:04:59.840 align:middle line:84%
start to churn when
collect is hit.

108
00:04:59.840 --> 00:05:01.770 align:middle line:84%
And what collect
does is it ends up

109
00:05:01.770 --> 00:05:08.280 align:middle line:84%
collecting the stream of input
into a list of non-empty search

110
00:05:08.280 --> 00:05:08.880 align:middle line:90%
results.

111
00:05:08.880 --> 00:05:12.690 align:middle line:84%
And it does that by calling the
toList factory method, which

112
00:05:12.690 --> 00:05:16.320 align:middle line:84%
creates a non-concurrent
collector-- which

113
00:05:16.320 --> 00:05:17.520 align:middle line:90%
we'll talk about later.

114
00:05:17.520 --> 00:05:20.190 align:middle line:84%
And that non-concurrent
collector, in this case,

115
00:05:20.190 --> 00:05:24.030 align:middle line:84%
will accumulate all the
non-empty search results

116
00:05:24.030 --> 00:05:26.220 align:middle line:90%
into an array list.

117
00:05:26.220 --> 00:05:30.070 align:middle line:84%
And that's what gets returned
as the result of collect.

118
00:05:30.070 --> 00:05:35.368 align:middle line:84%
So that's the final
termination of the processing.

119
00:05:35.368 --> 00:05:37.660 align:middle line:84%
Now one of the things to note
here-- and I'll come back

120
00:05:37.660 --> 00:05:40.202 align:middle line:84%
and we'll explore this from a
couple different points of view

121
00:05:40.202 --> 00:05:42.760 align:middle line:84%
because it's a little bit
subtle, and in some sense, even

122
00:05:42.760 --> 00:05:44.920 align:middle line:90%
misleading at first.

123
00:05:44.920 --> 00:05:46.960 align:middle line:84%
The way I describe
the processing made

124
00:05:46.960 --> 00:05:49.300 align:middle line:84%
it sound like the
streams framework

125
00:05:49.300 --> 00:05:53.200 align:middle line:84%
takes the elements in the
stream and processes them

126
00:05:53.200 --> 00:05:57.860 align:middle line:84%
in each level, each
layer, from left to right.

127
00:05:57.860 --> 00:06:00.910 align:middle line:84%
So it sounds like each
row or each level of data

128
00:06:00.910 --> 00:06:02.320 align:middle line:90%
is processed from left to right.

129
00:06:02.320 --> 00:06:04.670 align:middle line:84%
That's kind of what it
sounds like if you just

130
00:06:04.670 --> 00:06:06.380 align:middle line:90%
look at this thing.

131
00:06:06.380 --> 00:06:08.710 align:middle line:84%
In fact, that's not
how it works at all.

132
00:06:08.710 --> 00:06:10.840 align:middle line:84%
The streams framework
actually works

133
00:06:10.840 --> 00:06:15.610 align:middle line:84%
by pulling the data
from the source

134
00:06:15.610 --> 00:06:18.490 align:middle line:84%
through each
aggregate operation,

135
00:06:18.490 --> 00:06:22.540 align:middle line:84%
applying the various processing
steps to filter, transform,

136
00:06:22.540 --> 00:06:23.110 align:middle line:90%
or whatnot--

137
00:06:23.110 --> 00:06:24.970 align:middle line:84%
sort, whatever
needs to be done--

138
00:06:24.970 --> 00:06:27.880 align:middle line:84%
the elements as they
flow through the stream.

139
00:06:27.880 --> 00:06:29.800 align:middle line:84%
And the reason it
actually works this way,

140
00:06:29.800 --> 00:06:32.785 align:middle line:84%
as opposed to working
like layer by layer--

141
00:06:32.785 --> 00:06:35.410 align:middle line:84%
the reason it does it by pulling
it from the source through all

142
00:06:35.410 --> 00:06:37.065 align:middle line:84%
the intermediate
operation processing--

143
00:06:37.065 --> 00:06:38.440 align:middle line:84%
is that turns out
to be much more

144
00:06:38.440 --> 00:06:42.100 align:middle line:84%
efficient from the point
of view of cash efficiency

145
00:06:42.100 --> 00:06:45.220 align:middle line:84%
and something known as
integrated layer processing.

146
00:06:45.220 --> 00:06:47.120 align:middle line:84%
And most importantly,
it also supports

147
00:06:47.120 --> 00:06:49.910 align:middle line:84%
so-called short
circuit operations.

148
00:06:49.910 --> 00:06:52.480 align:middle line:84%
So it's actually possible
to short circuit steps.

149
00:06:52.480 --> 00:06:54.340 align:middle line:84%
Some of the
intermediate operations,

150
00:06:54.340 --> 00:06:55.972 align:middle line:84%
some of the terminal
operations can

151
00:06:55.972 --> 00:06:57.430 align:middle line:84%
actually short
circuit, which means

152
00:06:57.430 --> 00:06:59.920 align:middle line:90%
that they don't actually--

153
00:06:59.920 --> 00:07:04.310 align:middle line:84%
they stop processing after a
certain condition is satisfied.

154
00:07:04.310 --> 00:07:06.160 align:middle line:84%
And so by doing
things this way, you

155
00:07:06.160 --> 00:07:09.340 align:middle line:84%
can instantly stop the
processing the moment something

156
00:07:09.340 --> 00:07:10.450 align:middle line:90%
short circuits.

157
00:07:10.450 --> 00:07:12.750 align:middle line:84%
Whereas if you were doing
things layer by layer,

158
00:07:12.750 --> 00:07:15.250 align:middle line:84%
you would have to process all
this data, which would just be

159
00:07:15.250 --> 00:07:17.360 align:middle line:90%
thrown away at the next phase.

160
00:07:17.360 --> 00:07:19.480 align:middle line:84%
So this turns out
to be more efficient

161
00:07:19.480 --> 00:07:21.985 align:middle line:84%
and is the way that things
actually work under the hood.

162
00:07:21.985 --> 00:07:23.860 align:middle line:84%
The other reason why
it's done this way is it

163
00:07:23.860 --> 00:07:27.610 align:middle line:84%
makes it much easier to paralyze
the processing in a very

164
00:07:27.610 --> 00:07:29.020 align:middle line:90%
efficient manner as well.

165
00:07:29.020 --> 00:07:30.910 align:middle line:84%
But we won't really
get to that until we

166
00:07:30.910 --> 00:07:35.160 align:middle line:84%
get to the parallel streams
discussion in subsequent weeks.