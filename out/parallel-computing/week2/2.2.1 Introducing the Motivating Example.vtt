WEBVTT

1
00:00:00.000 --> 00:00:00.580 align:middle line:90%


2
00:00:00.580 --> 00:00:03.460 align:middle line:84%
Welcome to the next lesson
in our discussion of the Java

3
00:00:03.460 --> 00:00:06.040 align:middle line:84%
Streams framework
where we'll start

4
00:00:06.040 --> 00:00:10.800 align:middle line:84%
with an overview of the
SimpleSearchStream Program.

5
00:00:10.800 --> 00:00:15.240 align:middle line:84%
We use this program to showcase
key Java sequential streams'

6
00:00:15.240 --> 00:00:20.430 align:middle line:84%
capabilities throughout
this week's lessons.

7
00:00:20.430 --> 00:00:23.010 align:middle line:84%
This program is fairly
straightforward.

8
00:00:23.010 --> 00:00:25.440 align:middle line:84%
But it illustrates some key
ideas and key capabilities

9
00:00:25.440 --> 00:00:26.790 align:middle line:90%
in streams.

10
00:00:26.790 --> 00:00:31.620 align:middle line:84%
At its essence, we use it to
find words in an input string.

11
00:00:31.620 --> 00:00:34.020 align:middle line:84%
In this particular
case, the input string

12
00:00:34.020 --> 00:00:37.050 align:middle line:84%
will contain the contents
of the "do, re, mi"

13
00:00:37.050 --> 00:00:39.583 align:middle line:84%
song from The Sound
of Music movie.

14
00:00:39.583 --> 00:00:41.250 align:middle line:84%
And if you ever
familiar with that song,

15
00:00:41.250 --> 00:00:44.760 align:middle line:84%
you know that they talk about
giving names to musical notes.

16
00:00:44.760 --> 00:00:46.830 align:middle line:84%
So the words we're
going to be looking up

17
00:00:46.830 --> 00:00:48.990 align:middle line:84%
are the names of
the musical notes--

18
00:00:48.990 --> 00:00:53.170 align:middle line:84%
do, re, mi, and so
on and so forth.

19
00:00:53.170 --> 00:00:55.130 align:middle line:84%
This will illustrate
how we can combine

20
00:00:55.130 --> 00:00:56.880 align:middle line:84%
Java functional
programming features we've

21
00:00:56.880 --> 00:01:01.170 align:middle line:84%
covered in previous courses,
such as lambda expressions

22
00:01:01.170 --> 00:01:05.280 align:middle line:84%
and method references, together
with Java sequential stream

23
00:01:05.280 --> 00:01:09.670 align:middle line:84%
features, such as the
concept of factory

24
00:01:09.670 --> 00:01:12.690 align:middle line:84%
methods, intermediate
operations, and terminal

25
00:01:12.690 --> 00:01:14.570 align:middle line:90%
operations.

26
00:01:14.570 --> 00:01:18.360 align:middle line:84%
The program produces
nicely formatted output.

27
00:01:18.360 --> 00:01:21.470 align:middle line:84%
And what it basically does
is for every input word we're

28
00:01:21.470 --> 00:01:25.270 align:middle line:84%
looking to find in the input
string, which in this case

29
00:01:25.270 --> 00:01:27.170 align:middle line:84%
is the names of
the musical notes,

30
00:01:27.170 --> 00:01:31.010 align:middle line:84%
it will say for each
word all the locations

31
00:01:31.010 --> 00:01:34.670 align:middle line:84%
that that word appeared in the
input string, all the indices

32
00:01:34.670 --> 00:01:37.550 align:middle line:84%
or the locations in the string
where the word appeared.

33
00:01:37.550 --> 00:01:39.260 align:middle line:84%
So for each word,
we'll get a list

34
00:01:39.260 --> 00:01:43.250 align:middle line:84%
of all the locations in
terms of their index number

35
00:01:43.250 --> 00:01:44.930 align:middle line:84%
where the word
appeared in the string.

36
00:01:44.930 --> 00:01:47.620 align:middle line:84%
And you can see if you look
closely at the output screen

37
00:01:47.620 --> 00:01:51.985 align:middle line:84%
there, you can see how it shows
all the indices in that string.

38
00:01:51.985 --> 00:01:53.360 align:middle line:84%
We also do a couple
other things.

39
00:01:53.360 --> 00:01:54.902 align:middle line:84%
We also have some
other features that

40
00:01:54.902 --> 00:01:59.350 align:middle line:84%
will be used to print a
slice of the search results

41
00:01:59.350 --> 00:02:01.580 align:middle line:90%
starting at a particular word.

42
00:02:01.580 --> 00:02:06.790 align:middle line:84%
So what we might do there is we
might say, starting with "fa,"

43
00:02:06.790 --> 00:02:10.570 align:middle line:84%
I want to print everything
in all the indices from "fa"

44
00:02:10.570 --> 00:02:11.637 align:middle line:90%
and beyond.

45
00:02:11.637 --> 00:02:13.720 align:middle line:84%
So this is just a way of
being able to demonstrate

46
00:02:13.720 --> 00:02:15.670 align:middle line:84%
some other interesting
features in streams,

47
00:02:15.670 --> 00:02:19.780 align:middle line:84%
such as the dropWhile
intermediate operation, so just

48
00:02:19.780 --> 00:02:23.200 align:middle line:90%
a different way of doing things.

49
00:02:23.200 --> 00:02:25.770 align:middle line:84%
So we'll start our discussion
by looking at the entry point

50
00:02:25.770 --> 00:02:27.930 align:middle line:84%
into the
SimpleSearchStream Program.

51
00:02:27.930 --> 00:02:31.510 align:middle line:84%
And this entry point, of course,
is just the main program,

52
00:02:31.510 --> 00:02:35.430 align:middle line:84%
the main function, that
will be used to drive

53
00:02:35.430 --> 00:02:37.240 align:middle line:90%
all the other processing.

54
00:02:37.240 --> 00:02:39.030 align:middle line:84%
And you can find
this main function

55
00:02:39.030 --> 00:02:42.210 align:middle line:84%
at the URL available at
the bottom of the slide

56
00:02:42.210 --> 00:02:44.560 align:middle line:90%
in the main.java file.

57
00:02:44.560 --> 00:02:49.480 align:middle line:84%
The first thing we do is
we call the getInput method

58
00:02:49.480 --> 00:02:53.350 align:middle line:84%
on a TestDataFactory
class, which

59
00:02:53.350 --> 00:02:57.880 align:middle line:84%
will create an input string that
contains the lyrics to the "do,

60
00:02:57.880 --> 00:02:59.047 align:middle line:90%
re, mi" song.

61
00:02:59.047 --> 00:03:00.880 align:middle line:84%
So if you look carefully
at this-- and we'll

62
00:03:00.880 --> 00:03:02.140 align:middle line:84%
look at the
implementations later.

63
00:03:02.140 --> 00:03:03.557 align:middle line:84%
But if you look
carefully at this,

64
00:03:03.557 --> 00:03:06.310 align:middle line:84%
you can see that we're going
to go to some input file.

65
00:03:06.310 --> 00:03:09.430 align:middle line:84%
And we're going
to get the input.

66
00:03:09.430 --> 00:03:11.690 align:middle line:84%
And it's going to
come back as a string.

67
00:03:11.690 --> 00:03:14.750 align:middle line:84%
And so we'll look at that
in a bit more detail later.

68
00:03:14.750 --> 00:03:17.570 align:middle line:84%
Then what we do is we
open up another file using

69
00:03:17.570 --> 00:03:21.750 align:middle line:84%
another factory method in
the TestDataFactory class.

70
00:03:21.750 --> 00:03:25.610 align:middle line:84%
And this is going to be used
to return a list of strings

71
00:03:25.610 --> 00:03:29.150 align:middle line:84%
containing the words we want
to find, which in our case

72
00:03:29.150 --> 00:03:34.520 align:middle line:84%
would be the strings, "do,
re, mi, fa, so," and so on.

73
00:03:34.520 --> 00:03:38.590 align:middle line:84%
We then go ahead and make a new
WordSearcher object giving it

74
00:03:38.590 --> 00:03:40.330 align:middle line:90%
the input string.

75
00:03:40.330 --> 00:03:43.000 align:middle line:84%
So the WordSearcher's going
to take the input string

76
00:03:43.000 --> 00:03:45.070 align:middle line:84%
and then create a
WordSearcher object that

77
00:03:45.070 --> 00:03:47.660 align:middle line:84%
will search that string and
be used to find the words

78
00:03:47.660 --> 00:03:49.520 align:middle line:90%
we want to find.

79
00:03:49.520 --> 00:03:52.360 align:middle line:84%
And then we go ahead
and we say, searcher,

80
00:03:52.360 --> 00:03:55.360 align:middle line:84%
please find all the
words that correspond

81
00:03:55.360 --> 00:03:58.120 align:middle line:90%
to the wordToFind list.

82
00:03:58.120 --> 00:04:00.827 align:middle line:84%
And that will then return
a list of search results.

83
00:04:00.827 --> 00:04:03.160 align:middle line:84%
And we'll talk more about
what search results are later.

84
00:04:03.160 --> 00:04:05.830 align:middle line:84%
A search result is
basically a data structure

85
00:04:05.830 --> 00:04:08.770 align:middle line:84%
that keeps track of
where, if anywhere,

86
00:04:08.770 --> 00:04:12.088 align:middle line:84%
the words were found in
the input string, what

87
00:04:12.088 --> 00:04:13.630 align:middle line:84%
locations they were
found at in terms

88
00:04:13.630 --> 00:04:16.373 align:middle line:90%
of the indices of the string.

89
00:04:16.373 --> 00:04:18.790 align:middle line:84%
And then for this particular
example, when we're all done,

90
00:04:18.790 --> 00:04:21.070 align:middle line:84%
we're simply going to
print all the results.

91
00:04:21.070 --> 00:04:23.525 align:middle line:84%
So that will print all
the matching words.

92
00:04:23.525 --> 00:04:25.650 align:middle line:84%
We'll take a look later at
some other examples that

93
00:04:25.650 --> 00:04:29.020 align:middle line:84%
will print slices of the words,
either prefixes or suffix

94
00:04:29.020 --> 00:04:31.230 align:middle line:90%
slices of the words.