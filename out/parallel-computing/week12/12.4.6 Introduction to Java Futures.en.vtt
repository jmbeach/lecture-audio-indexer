WEBVTT

1
00:00:00.000 --> 00:00:00.500 align:middle line:90%


2
00:00:00.500 --> 00:00:01.940 align:middle line:84%
So now that we've
talked about how

3
00:00:01.940 --> 00:00:04.490 align:middle line:84%
to program with
Java futures, let's

4
00:00:04.490 --> 00:00:08.310 align:middle line:84%
evaluate the pros and
cons of Java futures.

5
00:00:08.310 --> 00:00:10.240 align:middle line:84%
And the reason for
doing this, of course,

6
00:00:10.240 --> 00:00:13.200 align:middle line:84%
is not just to tell you
how crappy futures are

7
00:00:13.200 --> 00:00:16.020 align:middle line:84%
but really to motivate why
we need completable futures,

8
00:00:16.020 --> 00:00:18.330 align:middle line:84%
because they're
going to work around

9
00:00:18.330 --> 00:00:24.750 align:middle line:84%
all the limitations we identify
with classic Java futures.

10
00:00:24.750 --> 00:00:27.690 align:middle line:84%
But first before we start
casting shade at futures,

11
00:00:27.690 --> 00:00:30.420 align:middle line:84%
let's talk about some
good things about them.

12
00:00:30.420 --> 00:00:32.340 align:middle line:84%
One thing that you can
do with Java futures

13
00:00:32.340 --> 00:00:35.190 align:middle line:84%
is you may be able to
leverage parallelism

14
00:00:35.190 --> 00:00:39.310 align:middle line:84%
more effectively
with fewer threads.

15
00:00:39.310 --> 00:00:41.520 align:middle line:84%
So if you take a look at
the example I have here,

16
00:00:41.520 --> 00:00:44.340 align:middle line:84%
I've got an executor completion
service, which is basically

17
00:00:44.340 --> 00:00:48.390 align:middle line:84%
just a little wrapper around
the underlying thread pool

18
00:00:48.390 --> 00:00:49.860 align:middle line:90%
executor.

19
00:00:49.860 --> 00:00:52.950 align:middle line:84%
And this is basically
an example I've

20
00:00:52.950 --> 00:00:56.070 align:middle line:84%
talked about before called
the search task gang, which

21
00:00:56.070 --> 00:01:00.240 align:middle line:84%
uses the executor completion
service and a cached thread

22
00:01:00.240 --> 00:01:03.150 align:middle line:84%
pool in order to be
able to search for words

23
00:01:03.150 --> 00:01:06.330 align:middle line:90%
in a bunch of input strings.

24
00:01:06.330 --> 00:01:08.460 align:middle line:84%
We will then go
ahead and queue up

25
00:01:08.460 --> 00:01:10.950 align:middle line:84%
asynchronous computations
for execution

26
00:01:10.950 --> 00:01:14.390 align:middle line:90%
in the cached thread pool.

27
00:01:14.390 --> 00:01:16.170 align:middle line:84%
And we do that by
submitting a task.

28
00:01:16.170 --> 00:01:18.630 align:middle line:84%
As you can see here, we're
going to submit the search

29
00:01:18.630 --> 00:01:23.100 align:middle line:84%
for word task, which we're
going to pass in here basically

30
00:01:23.100 --> 00:01:26.810 align:middle line:90%
as a lambda expression.

31
00:01:26.810 --> 00:01:30.740 align:middle line:84%
The cool thing about futures
and the underlying thread

32
00:01:30.740 --> 00:01:33.110 align:middle line:84%
pool used by the executor
completion service

33
00:01:33.110 --> 00:01:36.650 align:middle line:84%
is that it automatically
tunes the number of threads.

34
00:01:36.650 --> 00:01:40.040 align:middle line:84%
So those threads
will increase as--

35
00:01:40.040 --> 00:01:42.860 align:middle line:84%
the threads will be increased
as the work shows up

36
00:01:42.860 --> 00:01:43.790 align:middle line:90%
to process them.

37
00:01:43.790 --> 00:01:46.550 align:middle line:84%
And of course, that will then be
run on the underlying processor

38
00:01:46.550 --> 00:01:48.770 align:middle line:90%
cores.

39
00:01:48.770 --> 00:01:51.560 align:middle line:84%
Now the way the executor
completion service works

40
00:01:51.560 --> 00:01:55.183 align:middle line:84%
is as the asynchronous
computations complete,

41
00:01:55.183 --> 00:01:57.350 align:middle line:84%
they're actually not delivered
to the user directly.

42
00:01:57.350 --> 00:01:59.683 align:middle line:84%
Instead they're stuck onto
something called a completion

43
00:01:59.683 --> 00:02:00.320 align:middle line:90%
queue.

44
00:02:00.320 --> 00:02:03.530 align:middle line:84%
So the completion queue
ends up with a queue

45
00:02:03.530 --> 00:02:06.290 align:middle line:90%
of completed futures.

46
00:02:06.290 --> 00:02:10.370 align:middle line:84%
And you as a client of the
executor completion service

47
00:02:10.370 --> 00:02:13.910 align:middle line:84%
can call the take method
on the completion service.

48
00:02:13.910 --> 00:02:17.152 align:middle line:84%
And that will block if
there's no futures completed.

49
00:02:17.152 --> 00:02:18.610 align:middle line:84%
But if there is a
completed future,

50
00:02:18.610 --> 00:02:20.450 align:middle line:84%
it will return the
completed future.

51
00:02:20.450 --> 00:02:22.650 align:middle line:84%
And then you can call get
on the completed future.

52
00:02:22.650 --> 00:02:25.010 align:middle line:84%
And that will always
return right away

53
00:02:25.010 --> 00:02:27.680 align:middle line:84%
because it wouldn't have had
a completed future show up

54
00:02:27.680 --> 00:02:29.780 align:middle line:84%
in the completion queue
unless it was done.

55
00:02:29.780 --> 00:02:32.390 align:middle line:90%


56
00:02:32.390 --> 00:02:35.420 align:middle line:84%
Now the other thing that's
kind of interesting about Java

57
00:02:35.420 --> 00:02:38.300 align:middle line:84%
futures is you can
block until the results

58
00:02:38.300 --> 00:02:41.060 align:middle line:84%
of asynchronous two-way
tasks are available.

59
00:02:41.060 --> 00:02:44.150 align:middle line:84%
We saw the example here before
where you can call a get

60
00:02:44.150 --> 00:02:45.860 align:middle line:90%
or the time to get.

61
00:02:45.860 --> 00:02:47.810 align:middle line:84%
You can either do
the blocking get

62
00:02:47.810 --> 00:02:51.793 align:middle line:84%
or you can do the
time or pulling get.

63
00:02:51.793 --> 00:02:53.710 align:middle line:84%
You can also do some
other things to features.

64
00:02:53.710 --> 00:02:55.620 align:middle line:84%
You can check to
see if they're done.

65
00:02:55.620 --> 00:02:57.370 align:middle line:84%
You can check to see
if they're cancelled.

66
00:02:57.370 --> 00:02:58.210 align:middle line:90%
You can cancel them.

67
00:02:58.210 --> 00:03:01.800 align:middle line:84%
So those are all the different
operations you can do.

68
00:03:01.800 --> 00:03:06.230 align:middle line:84%
However, there is a number of
problems with Java futures.

69
00:03:06.230 --> 00:03:08.570 align:middle line:84%
The main problems
stem from the fact

70
00:03:08.570 --> 00:03:13.020 align:middle line:84%
that they have a very
limited feature set.

71
00:03:13.020 --> 00:03:15.040 align:middle line:84%
Here are some things
they can't do.

72
00:03:15.040 --> 00:03:17.460 align:middle line:84%
You can't complete
them explicitly.

73
00:03:17.460 --> 00:03:19.740 align:middle line:84%
You need to use other
mechanisms in conjunction

74
00:03:19.740 --> 00:03:23.140 align:middle line:90%
with futures like future tasks.

75
00:03:23.140 --> 00:03:26.200 align:middle line:84%
You can't chain them
together fluently.

76
00:03:26.200 --> 00:03:28.540 align:middle line:84%
You have no way of
being able to start

77
00:03:28.540 --> 00:03:32.110 align:middle line:84%
an asynchronous operation,
indicate an action you want run

78
00:03:32.110 --> 00:03:35.200 align:middle line:84%
when that asynchronous operation
completes, and then chain that

79
00:03:35.200 --> 00:03:37.240 align:middle line:84%
together with other
asynchronous operations

80
00:03:37.240 --> 00:03:41.350 align:middle line:84%
that you want to happen after
the other future completes.

81
00:03:41.350 --> 00:03:45.100 align:middle line:84%
So as a consequence, it
makes for a very convoluted

82
00:03:45.100 --> 00:03:47.500 align:middle line:90%
and awkward programming model.

83
00:03:47.500 --> 00:03:52.420 align:middle line:84%
You can't use fluent
interfaces with futures.

84
00:03:52.420 --> 00:03:55.870 align:middle line:84%
You also can't trigger
them reactively.

85
00:03:55.870 --> 00:04:01.090 align:middle line:84%
You have to use either wait,
or a timed wait, or a poll.

86
00:04:01.090 --> 00:04:04.420 align:middle line:84%
You can't just say call
me back when you're done.

87
00:04:04.420 --> 00:04:06.580 align:middle line:84%
Instead you have to
say I want the result

88
00:04:06.580 --> 00:04:09.730 align:middle line:84%
or I want the result
in this amount of time.

89
00:04:09.730 --> 00:04:13.780 align:middle line:84%
As a general rule, if you find
yourself trying to work around

90
00:04:13.780 --> 00:04:18.790 align:middle line:84%
this problem by putting
timeouts on your calls to get,

91
00:04:18.790 --> 00:04:21.399 align:middle line:84%
that's almost always
the wrong thing to do.

92
00:04:21.399 --> 00:04:25.360 align:middle line:84%
It just shows there's something
broken with your program.

93
00:04:25.360 --> 00:04:28.180 align:middle line:84%
And yet another problem
with classic futures

94
00:04:28.180 --> 00:04:32.680 align:middle line:84%
is you can't treat them
efficiently as a collection.

95
00:04:32.680 --> 00:04:35.260 align:middle line:84%
So in particular,
you can't start up

96
00:04:35.260 --> 00:04:39.050 align:middle line:84%
a bunch of asynchronous
computations and then say,

97
00:04:39.050 --> 00:04:42.460 align:middle line:84%
I want all these things
to get called back

98
00:04:42.460 --> 00:04:44.320 align:middle line:84%
and tell me when
they're all done.

99
00:04:44.320 --> 00:04:48.890 align:middle line:84%
Instead you have to wait for
them in a particular order.

100
00:04:48.890 --> 00:04:54.310 align:middle line:84%
So you can see here if
we start off future one,

101
00:04:54.310 --> 00:04:56.230 align:middle line:84%
and we start off
future two, and we

102
00:04:56.230 --> 00:04:57.730 align:middle line:84%
have them running
asynchronously,

103
00:04:57.730 --> 00:05:00.460 align:middle line:84%
we have to dictate the order
in which the results come back.

104
00:05:00.460 --> 00:05:06.190 align:middle line:84%
We have to say futureone.get,
futuretwo.get, of futuretwo.get

105
00:05:06.190 --> 00:05:07.810 align:middle line:90%
by futureone.get.

106
00:05:07.810 --> 00:05:09.790 align:middle line:84%
We can't just say I want
to wait for whichever

107
00:05:09.790 --> 00:05:11.440 align:middle line:90%
one comes back first.

108
00:05:11.440 --> 00:05:15.500 align:middle line:84%
So that turns out to be
limited and frustrating.

109
00:05:15.500 --> 00:05:18.380 align:middle line:84%
So as a general
rule, it's extremely

110
00:05:18.380 --> 00:05:22.850 align:middle line:84%
awkward and inefficient to
compose multiple futures

111
00:05:22.850 --> 00:05:23.760 align:middle line:90%
together.

112
00:05:23.760 --> 00:05:26.280 align:middle line:84%
It's kind of like trying to
fit pieces of a puzzle together

113
00:05:26.280 --> 00:05:30.700 align:middle line:84%
that just don't
really fit together.

114
00:05:30.700 --> 00:05:32.670 align:middle line:84%
Now this is all
very frustrating.

115
00:05:32.670 --> 00:05:35.440 align:middle line:84%
And the people who
developed Java futures back

116
00:05:35.440 --> 00:05:38.930 align:middle line:84%
15 or so years ago back
in 2004, or whenever

117
00:05:38.930 --> 00:05:43.130 align:middle line:84%
you're watching this video--
back in 2004 a long time ago,

118
00:05:43.130 --> 00:05:46.910 align:middle line:84%
they realized there were
limitations with Java futures.

119
00:05:46.910 --> 00:05:48.800 align:middle line:84%
And that, of course,
is what motivated

120
00:05:48.800 --> 00:05:53.030 align:middle line:84%
them to fix these problems by
defining the computable futures

121
00:05:53.030 --> 00:05:54.880 align:middle line:90%
framework.