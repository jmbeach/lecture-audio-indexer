WEBVTT

1
00:00:00.000 --> 00:00:00.720 align:middle line:90%


2
00:00:00.720 --> 00:00:03.360 align:middle line:84%
We'll begin our discussion of
the Java completable futures

3
00:00:03.360 --> 00:00:07.580 align:middle line:84%
framework by first covering
reactive programming.

4
00:00:07.580 --> 00:00:09.640 align:middle line:84%
In this part of the
lesson, I'll describe

5
00:00:09.640 --> 00:00:15.290 align:middle line:84%
the key principles that underlie
the reactive programming model.

6
00:00:15.290 --> 00:00:17.630 align:middle line:84%
Reactive programming is an
asynchronous programming

7
00:00:17.630 --> 00:00:20.000 align:middle line:84%
paradigm that's
concerned with processing

8
00:00:20.000 --> 00:00:23.890 align:middle line:84%
data streams and
propagating changes.

9
00:00:23.890 --> 00:00:25.830 align:middle line:84%
There are four key
principles that

10
00:00:25.830 --> 00:00:28.480 align:middle line:84%
are part of the reactive
programming model.

11
00:00:28.480 --> 00:00:31.490 align:middle line:90%
The first is responsive.

12
00:00:31.490 --> 00:00:33.240 align:middle line:84%
And the idea here is
we want our solutions

13
00:00:33.240 --> 00:00:36.990 align:middle line:84%
to provide rapid and
consistent response times.

14
00:00:36.990 --> 00:00:40.500 align:middle line:84%
Ideally we should be able to
establish reliable upper bounds

15
00:00:40.500 --> 00:00:44.790 align:middle line:84%
on the time required to deliver
consistent quality of service

16
00:00:44.790 --> 00:00:47.070 align:middle line:84%
in order to prevent delays,
especially delays that

17
00:00:47.070 --> 00:00:50.470 align:middle line:90%
could be noticeable by users.

18
00:00:50.470 --> 00:00:52.690 align:middle line:84%
We also want the
system to be resilient.

19
00:00:52.690 --> 00:00:55.150 align:middle line:84%
That means it needs
to be responsive

20
00:00:55.150 --> 00:00:59.200 align:middle line:84%
even in the face of failure,
especially partial failure.

21
00:00:59.200 --> 00:01:00.970 align:middle line:84%
Failure of some
operations should not

22
00:01:00.970 --> 00:01:04.230 align:middle line:90%
bring the entire system down.

23
00:01:04.230 --> 00:01:07.560 align:middle line:84%
Third, we want the
system to be elastic.

24
00:01:07.560 --> 00:01:10.638 align:middle line:84%
It should remain responsive
even under varying workloads.

25
00:01:10.638 --> 00:01:12.180 align:middle line:84%
Another way of saying
this is we want

26
00:01:12.180 --> 00:01:14.050 align:middle line:84%
to be able to
auto-scale performance.

27
00:01:14.050 --> 00:01:15.960 align:middle line:84%
So as the workload
goes up, we want

28
00:01:15.960 --> 00:01:18.660 align:middle line:84%
to be able to take advantage
of more processing resources

29
00:01:18.660 --> 00:01:20.760 align:middle line:84%
in order to be able
to keep the workload

30
00:01:20.760 --> 00:01:23.330 align:middle line:90%
consistent and responsive.

31
00:01:23.330 --> 00:01:27.295 align:middle line:84%
And finally, we'd like the
solution to be message driven.

32
00:01:27.295 --> 00:01:28.670 align:middle line:84%
What that really
means is we want

33
00:01:28.670 --> 00:01:31.970 align:middle line:84%
to be able to support
asynchronous message passing

34
00:01:31.970 --> 00:01:35.375 align:middle line:84%
to ensure loose coupling,
isolation, and location

35
00:01:35.375 --> 00:01:37.250 align:middle line:84%
transparency between
the different components

36
00:01:37.250 --> 00:01:39.080 align:middle line:90%
of our solution.

37
00:01:39.080 --> 00:01:42.040 align:middle line:84%
If you think about the other
three principles-- responsive,

38
00:01:42.040 --> 00:01:43.480 align:middle line:90%
resilient, and elastic--

39
00:01:43.480 --> 00:01:47.200 align:middle line:84%
those are more about quality
of service properties,

40
00:01:47.200 --> 00:01:50.470 align:middle line:84%
whereas message driven, that
principle is really more

41
00:01:50.470 --> 00:01:52.515 align:middle line:90%
of an implementation detail.

42
00:01:52.515 --> 00:01:53.890 align:middle line:84%
And we'll talk
about this when we

43
00:01:53.890 --> 00:01:57.950 align:middle line:84%
talk more about how Java
completable futures map

44
00:01:57.950 --> 00:02:01.230 align:middle line:90%
onto these principles.