WEBVTT

1
00:00:00.000 --> 00:00:00.600 align:middle line:90%


2
00:00:00.600 --> 00:00:03.840 align:middle line:84%
Now that we've talked about
the ForkJoinPool class,

3
00:00:03.840 --> 00:00:08.850 align:middle line:84%
let's talk about an associated
class called the ForkJoinTask.

4
00:00:08.850 --> 00:00:12.180 align:middle line:84%
And here we're going to talk
about the use of ForkJoinTask

5
00:00:12.180 --> 00:00:16.890 align:middle line:84%
and how it serves as essentially
a superclass for other classes

6
00:00:16.890 --> 00:00:18.990 align:middle line:84%
that are used by
application developers

7
00:00:18.990 --> 00:00:22.850 align:middle line:84%
and executed, of course,
by ForkJoinPools.

8
00:00:22.850 --> 00:00:27.830 align:middle line:84%
So a ForkJoinTask is a class
that associates a chunk of data

9
00:00:27.830 --> 00:00:31.820 align:middle line:84%
along with a given
computation on that data.

10
00:00:31.820 --> 00:00:36.280 align:middle line:84%
And its purpose is to enable
fine-grained data parallelism.

11
00:00:36.280 --> 00:00:39.200 align:middle line:84%
So you want to be able to
run lots of ForkJoinTasks

12
00:00:39.200 --> 00:00:41.810 align:middle line:84%
and be able to handle
large amounts of data,

13
00:00:41.810 --> 00:00:44.280 align:middle line:90%
and do it all in parallel.

14
00:00:44.280 --> 00:00:47.780 align:middle line:84%
A ForkJoinTask is intentionally
lighter-weight than a Java

15
00:00:47.780 --> 00:00:48.530 align:middle line:90%
thread.

16
00:00:48.530 --> 00:00:50.150 align:middle line:84%
A Java thread,
which, of course, is

17
00:00:50.150 --> 00:00:53.810 align:middle line:84%
what ultimately executes on
the underlying operating system

18
00:00:53.810 --> 00:00:56.150 align:middle line:84%
threads and process
records and so on,

19
00:00:56.150 --> 00:00:57.680 align:middle line:90%
maintains a lot of stuff.

20
00:00:57.680 --> 00:00:59.930 align:middle line:84%
It maintains its
own runtime stack.

21
00:00:59.930 --> 00:01:01.397 align:middle line:90%
It maintains its own registers.

22
00:01:01.397 --> 00:01:03.230 align:middle line:84%
It maintains its own
thread-specific storage

23
00:01:03.230 --> 00:01:05.900 align:middle line:84%
or thread local storage,
and so on and so forth.

24
00:01:05.900 --> 00:01:08.450 align:middle line:84%
And it's got all kinds of
states and lifecycle states

25
00:01:08.450 --> 00:01:10.440 align:middle line:90%
and so on and so forth.

26
00:01:10.440 --> 00:01:13.488 align:middle line:84%
In contrast, the ForkJoinTask
is just an object.

27
00:01:13.488 --> 00:01:15.030 align:middle line:84%
But the fact that
it's lighter weight

28
00:01:15.030 --> 00:01:20.940 align:middle line:84%
allows the ForkJoinTask to
be created in vast numbers--

29
00:01:20.940 --> 00:01:22.690 align:middle line:84%
probably many more
than you could actually

30
00:01:22.690 --> 00:01:25.030 align:middle line:90%
create real Java threads.

31
00:01:25.030 --> 00:01:27.160 align:middle line:84%
And then those
many ForkJoinTasks

32
00:01:27.160 --> 00:01:30.580 align:middle line:84%
can be multiplexed or run
over a much smaller number

33
00:01:30.580 --> 00:01:34.690 align:middle line:84%
of worker threads in the
context of a ForkJoinPool.

34
00:01:34.690 --> 00:01:36.370 align:middle line:84%
So you may only
have a half dozen

35
00:01:36.370 --> 00:01:38.750 align:middle line:90%
or so Java worker threads.

36
00:01:38.750 --> 00:01:41.320 align:middle line:84%
But you could have thousands or
tens of thousands or hundreds

37
00:01:41.320 --> 00:01:44.550 align:middle line:90%
of thousands of ForkJoinTasks.

38
00:01:44.550 --> 00:01:46.800 align:middle line:84%
And that, again, is
because the worker threads

39
00:01:46.800 --> 00:01:51.570 align:middle line:84%
have all this extra stuff that
the ForkJoinTasks that sit

40
00:01:51.570 --> 00:01:54.510 align:middle line:90%
upon them don't need to have.

41
00:01:54.510 --> 00:01:58.350 align:middle line:84%
ForkJoinTask defines
two key methods

42
00:01:58.350 --> 00:02:01.380 align:middle line:84%
that are used to control
parallel processing

43
00:02:01.380 --> 00:02:03.900 align:middle line:90%
and merging of results.

44
00:02:03.900 --> 00:02:05.940 align:middle line:84%
And not surprisingly,
since the name of this

45
00:02:05.940 --> 00:02:11.330 align:middle line:84%
is the ForkJoinTask, the
methods are fork and join.

46
00:02:11.330 --> 00:02:15.650 align:middle line:84%
Fork arranges to
asynchronously execute

47
00:02:15.650 --> 00:02:21.080 align:middle line:84%
the task it's called on in
the appropriate ForkJoinPool.

48
00:02:21.080 --> 00:02:23.270 align:middle line:84%
So think again
about a ForkJoinTask

49
00:02:23.270 --> 00:02:26.030 align:middle line:84%
as being this lightweight
variant of a thread.

50
00:02:26.030 --> 00:02:31.750 align:middle line:84%
When you fork a
ForkJoinTask, that

51
00:02:31.750 --> 00:02:35.630 align:middle line:84%
doesn't have as much overhead
as starting a thread.

52
00:02:35.630 --> 00:02:38.440 align:middle line:84%
So if you fork a
task, you basically

53
00:02:38.440 --> 00:02:40.978 align:middle line:90%
create a child ForkJoinTask.

54
00:02:40.978 --> 00:02:42.520 align:middle line:84%
And then you can go
ahead and arrange

55
00:02:42.520 --> 00:02:45.880 align:middle line:84%
to have that executed in
one of the real threads

56
00:02:45.880 --> 00:02:48.820 align:middle line:90%
in the underlying ForkJoinPool.

57
00:02:48.820 --> 00:02:51.400 align:middle line:90%


58
00:02:51.400 --> 00:02:53.500 align:middle line:84%
Fork doesn't actually
run the task.

59
00:02:53.500 --> 00:02:58.960 align:middle line:84%
But it simply places it on
a work queue in the calling

60
00:02:58.960 --> 00:03:02.170 align:middle line:90%
worker threads' queue.

61
00:03:02.170 --> 00:03:03.670 align:middle line:90%
Let me try to rephrase that.

62
00:03:03.670 --> 00:03:06.010 align:middle line:84%
When you call fork, it doesn't
run the task immediately.

63
00:03:06.010 --> 00:03:07.960 align:middle line:84%
But it places it on a
queue called a deck--

64
00:03:07.960 --> 00:03:09.280 align:middle line:90%
a double-ended queue--

65
00:03:09.280 --> 00:03:13.323 align:middle line:84%
in the context of the worker
thread where fork was called.

66
00:03:13.323 --> 00:03:14.740 align:middle line:84%
And we'll talk
more about how this

67
00:03:14.740 --> 00:03:15.948 align:middle line:90%
is arranged in just a minute.

68
00:03:15.948 --> 00:03:19.022 align:middle line:90%


69
00:03:19.022 --> 00:03:20.480 align:middle line:84%
The other operation
that's defined,

70
00:03:20.480 --> 00:03:22.790 align:middle line:84%
the other key method that's
defined on ForkJoinTask

71
00:03:22.790 --> 00:03:24.260 align:middle line:90%
is join.

72
00:03:24.260 --> 00:03:27.170 align:middle line:84%
And this returns the
result of the computation

73
00:03:27.170 --> 00:03:28.400 align:middle line:90%
when the computation is done.

74
00:03:28.400 --> 00:03:30.025 align:middle line:84%
So you can see earlier,
we'd do a fork,

75
00:03:30.025 --> 00:03:31.700 align:middle line:90%
which creates child tasks.

76
00:03:31.700 --> 00:03:33.770 align:middle line:84%
And then when those
tasks are done,

77
00:03:33.770 --> 00:03:37.850 align:middle line:84%
join will be able to return
the result of the child task

78
00:03:37.850 --> 00:03:41.200 align:middle line:84%
to the parent task
that forked it.

79
00:03:41.200 --> 00:03:45.660 align:middle line:84%
Unlike Thread join, which
blocks the calling thread,

80
00:03:45.660 --> 00:03:49.870 align:middle line:84%
ForkJoinTask join doesn't
simply block the calling thread,

81
00:03:49.870 --> 00:03:53.050 align:middle line:84%
although it will ensure
that progress does not

82
00:03:53.050 --> 00:03:57.490 align:middle line:84%
continue until we get the result
back from the ForkJoin child

83
00:03:57.490 --> 00:03:59.820 align:middle line:90%
task that just finished.

84
00:03:59.820 --> 00:04:04.620 align:middle line:84%
Instead, what it does is the
join method on a ForkJoinTask

85
00:04:04.620 --> 00:04:09.420 align:middle line:84%
use the worker thread it's
called in to run other tasks.

86
00:04:09.420 --> 00:04:13.350 align:middle line:84%
And this sort of
"pitching in" approach

87
00:04:13.350 --> 00:04:15.810 align:middle line:84%
is what I like to call the
"collaborative Jiffy Lube

88
00:04:15.810 --> 00:04:17.790 align:middle line:90%
model of processing."

89
00:04:17.790 --> 00:04:21.480 align:middle line:84%
For those of you who live in
countries that have Jiffy Lube,

90
00:04:21.480 --> 00:04:26.098 align:middle line:84%
Jiffy Lube is an on-demand
oil-change facility.

91
00:04:26.098 --> 00:04:28.140 align:middle line:84%
So if you want to change
the oil in your vehicle,

92
00:04:28.140 --> 00:04:30.090 align:middle line:90%
you can drive up to Jiffy Lube.

93
00:04:30.090 --> 00:04:33.210 align:middle line:84%
And they'll typically get your
oil changed in a jiffy, which

94
00:04:33.210 --> 00:04:34.790 align:middle line:90%
is why it's Jiffy Lube.

95
00:04:34.790 --> 00:04:37.290 align:middle line:84%
The way Jiffy Lube typically
works is shown in this diagram.

96
00:04:37.290 --> 00:04:41.220 align:middle line:84%
You'll typically have multiple
bays for the cars to go into.

97
00:04:41.220 --> 00:04:45.840 align:middle line:84%
And there'll usually be a
couple of workers per bay.

98
00:04:45.840 --> 00:04:48.000 align:middle line:84%
So in steady state, when
all the bays are full,

99
00:04:48.000 --> 00:04:51.540 align:middle line:84%
all the workers will be working
on their respective cars--

100
00:04:51.540 --> 00:04:54.870 align:middle line:84%
checking fluids, putting
air in the tires,

101
00:04:54.870 --> 00:04:58.530 align:middle line:84%
changing filters, topping off
the oil, changing the oil,

102
00:04:58.530 --> 00:05:01.260 align:middle line:84%
changing the wipers--
whatever they need to do.

103
00:05:01.260 --> 00:05:04.680 align:middle line:84%
If it turns out, for example,
that there's only one car

104
00:05:04.680 --> 00:05:08.370 align:middle line:84%
active in the bays at a
time, then other workers

105
00:05:08.370 --> 00:05:11.940 align:middle line:84%
who are sitting idly
by in their empty bays

106
00:05:11.940 --> 00:05:14.160 align:middle line:84%
can come over to the
bay with a car in it

107
00:05:14.160 --> 00:05:16.320 align:middle line:84%
and then speed things
up by joining in--

108
00:05:16.320 --> 00:05:20.480 align:middle line:84%
by pitching in-- and checking
the air, filling the air,

109
00:05:20.480 --> 00:05:22.980 align:middle line:84%
changing the oil, changing the
wipers, changing the filters,

110
00:05:22.980 --> 00:05:24.040 align:middle line:90%
or whatever.

111
00:05:24.040 --> 00:05:26.520 align:middle line:84%
So that's what I call the
collaborative Jiffy Lube

112
00:05:26.520 --> 00:05:30.900 align:middle line:84%
model, where idle workers can
come over and help pitch in

113
00:05:30.900 --> 00:05:34.600 align:middle line:84%
to make the overall
processing go faster.

114
00:05:34.600 --> 00:05:37.360 align:middle line:84%
When a worker thread
encounters a join,

115
00:05:37.360 --> 00:05:40.960 align:middle line:84%
it processes other
tasks until it notices

116
00:05:40.960 --> 00:05:43.225 align:middle line:90%
that the target's subtask--

117
00:05:43.225 --> 00:05:45.100 align:middle line:84%
in other words, the
thing we called join on--

118
00:05:45.100 --> 00:05:46.160 align:middle line:90%
is done.

119
00:05:46.160 --> 00:05:48.310 align:middle line:84%
And then it goes
ahead and returns,

120
00:05:48.310 --> 00:05:53.115 align:middle line:84%
possibly with a value if
it's a value-returning join.

121
00:05:53.115 --> 00:05:54.740 align:middle line:84%
Now, there's a couple
of different ways

122
00:05:54.740 --> 00:05:56.520 align:middle line:90%
to start the ball rolling.

123
00:05:56.520 --> 00:06:00.770 align:middle line:84%
So in steady state, you'll
have a bunch of ForkJoinTasks

124
00:06:00.770 --> 00:06:05.180 align:middle line:84%
that are processing in the
context of the ForkJoinPool's

125
00:06:05.180 --> 00:06:06.800 align:middle line:90%
worker threads.

126
00:06:06.800 --> 00:06:08.480 align:middle line:84%
But that raises
the question, how

127
00:06:08.480 --> 00:06:12.830 align:middle line:84%
do these ForkJoinTasks
get into worker thread

128
00:06:12.830 --> 00:06:14.700 align:middle line:90%
pool in the first place?

129
00:06:14.700 --> 00:06:18.020 align:middle line:84%
And the answer is, there's
a bunch of methods defined

130
00:06:18.020 --> 00:06:25.280 align:middle line:84%
in ForkJoinPools API that
allows non-ForkJoinTask clients

131
00:06:25.280 --> 00:06:29.450 align:middle line:84%
to submit or to add
ForkJoinTasks to be processed

132
00:06:29.450 --> 00:06:31.190 align:middle line:90%
in the ForkJoinPool.

133
00:06:31.190 --> 00:06:36.155 align:middle line:84%
And those methods are
execute, invoke, and submit.

134
00:06:36.155 --> 00:06:38.030 align:middle line:84%
And they all do something
a little different.

135
00:06:38.030 --> 00:06:42.730 align:middle line:84%
Execute arranges to execute
something asynchronously,

136
00:06:42.730 --> 00:06:44.420 align:middle line:90%
not returning a value.

137
00:06:44.420 --> 00:06:47.900 align:middle line:84%
Invoke will essentially
perform the given task

138
00:06:47.900 --> 00:06:50.270 align:middle line:90%
and then block until we're done.

139
00:06:50.270 --> 00:06:52.400 align:middle line:84%
And submit submits
the ForkJoinTask

140
00:06:52.400 --> 00:06:54.170 align:middle line:84%
and returns a future,
which turns out

141
00:06:54.170 --> 00:06:57.230 align:middle line:84%
to be a ForkJoinTask because
ForkJoinTask implements

142
00:06:57.230 --> 00:07:00.030 align:middle line:90%
the future interface.

143
00:07:00.030 --> 00:07:02.520 align:middle line:84%
We'll come back later and talk
about how these methods work

144
00:07:02.520 --> 00:07:04.830 align:middle line:84%
when we talk about the key
methods in the ForkJoinPool

145
00:07:04.830 --> 00:07:05.650 align:middle line:90%
here shortly.

146
00:07:05.650 --> 00:07:09.100 align:middle line:84%
So just keep that in
the back of your mind.

147
00:07:09.100 --> 00:07:12.070 align:middle line:84%
Clients can insert
new ForkJoinTasks

148
00:07:12.070 --> 00:07:16.090 align:middle line:84%
into the ForkJoinPool via
something called its shared

149
00:07:16.090 --> 00:07:20.560 align:middle line:84%
queue, which is used to
feed work-stealing cues that

150
00:07:20.560 --> 00:07:26.110 align:middle line:84%
are actually managed by worker
threads in the ForkJoinPool.

151
00:07:26.110 --> 00:07:29.615 align:middle line:84%
And the actual implementation
is very, very cool and very,

152
00:07:29.615 --> 00:07:30.115 align:middle line:90%
very subtle.

153
00:07:30.115 --> 00:07:32.570 align:middle line:84%
And I'm not going to talk
about it in great detail now.

154
00:07:32.570 --> 00:07:33.778 align:middle line:90%
We'll cover some of it later.

155
00:07:33.778 --> 00:07:37.450 align:middle line:84%
But in essence, you can
think of the ForkJoinPool

156
00:07:37.450 --> 00:07:40.300 align:middle line:84%
as having a bunch of
data structures inside.

157
00:07:40.300 --> 00:07:43.600 align:middle line:84%
And each worker thread
in the ForkJoinPool

158
00:07:43.600 --> 00:07:46.660 align:middle line:84%
has a dedicated
work queue, which

159
00:07:46.660 --> 00:07:49.510 align:middle line:84%
is this double-ended
queue or deck, that it

160
00:07:49.510 --> 00:07:51.380 align:middle line:90%
interacts with directly.

161
00:07:51.380 --> 00:07:53.170 align:middle line:84%
There's also,
somewhat in parallel

162
00:07:53.170 --> 00:07:55.390 align:middle line:84%
to this, a bunch of
other queues that

163
00:07:55.390 --> 00:07:57.940 align:middle line:90%
can be used to stick work in.

164
00:07:57.940 --> 00:08:01.540 align:middle line:84%
And various threads can then
come along and steal that work

165
00:08:01.540 --> 00:08:04.840 align:middle line:84%
and start processing them
in their particular thread

166
00:08:04.840 --> 00:08:05.890 align:middle line:90%
contexts.

167
00:08:05.890 --> 00:08:09.640 align:middle line:84%
And so when a client calls
execute, invoke, or submit,

168
00:08:09.640 --> 00:08:15.280 align:middle line:84%
it basically ends up putting the
ForkJoinTask into this shared

169
00:08:15.280 --> 00:08:18.430 align:middle line:84%
queue mechanism and
allowing it to be taken

170
00:08:18.430 --> 00:08:21.730 align:middle line:84%
or picked up by one
of the worker threads

171
00:08:21.730 --> 00:08:24.430 align:middle line:90%
in the ForkJoinPool.

172
00:08:24.430 --> 00:08:27.290 align:middle line:84%
I'm kind of glossing
over a lot of details.

173
00:08:27.290 --> 00:08:30.082 align:middle line:84%
But that's basically what's
happening under the hood.

174
00:08:30.082 --> 00:08:31.790 align:middle line:84%
Regardless of the
implementation details,

175
00:08:31.790 --> 00:08:35.360 align:middle line:84%
however, the whole purpose
of doing this work stealing

176
00:08:35.360 --> 00:08:37.445 align:middle line:84%
is to try to maximize
processor core utilization.

177
00:08:37.445 --> 00:08:39.320 align:middle line:84%
And we'll come back and
talk a lot about this

178
00:08:39.320 --> 00:08:41.220 align:middle line:84%
later because it's a
very important concept

179
00:08:41.220 --> 00:08:42.530 align:middle line:90%
to understand.