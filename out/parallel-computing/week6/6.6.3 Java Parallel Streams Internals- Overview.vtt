WEBVTT

1
00:00:00.000 --> 00:00:00.668 align:middle line:90%


2
00:00:00.668 --> 00:00:02.210 align:middle line:84%
We're now going to
turn our attention

3
00:00:02.210 --> 00:00:05.480 align:middle line:84%
to one of the processing
phases and discuss

4
00:00:05.480 --> 00:00:08.000 align:middle line:90%
the order of processing.

5
00:00:08.000 --> 00:00:10.220 align:middle line:84%
And we'll see once again
it's important to know

6
00:00:10.220 --> 00:00:14.550 align:middle line:84%
what you can change and
what you can't change.

7
00:00:14.550 --> 00:00:17.540 align:middle line:84%
So let's talk about
stream processing order.

8
00:00:17.540 --> 00:00:19.290 align:middle line:90%
What the heck does that mean?

9
00:00:19.290 --> 00:00:22.490 align:middle line:84%
Well, keep in mind when we
talk about processing order,

10
00:00:22.490 --> 00:00:24.660 align:middle line:90%
we're in the apply phase.

11
00:00:24.660 --> 00:00:27.110 align:middle line:84%
And this is the phase
where the chunks that

12
00:00:27.110 --> 00:00:30.320 align:middle line:84%
were created by the
split phase are then

13
00:00:30.320 --> 00:00:34.550 align:middle line:84%
mapped to the underlying
common ForkJoinPool

14
00:00:34.550 --> 00:00:36.570 align:middle line:90%
to be run in parallel.

15
00:00:36.570 --> 00:00:39.020 align:middle line:84%
Now, it turns out that
the order in which

16
00:00:39.020 --> 00:00:41.900 align:middle line:84%
the chunks in a parallel
stream are processed

17
00:00:41.900 --> 00:00:44.300 align:middle line:84%
is intentionally
non-deterministic.

18
00:00:44.300 --> 00:00:48.270 align:middle line:84%
What that means is, is you
have no control over it.

19
00:00:48.270 --> 00:00:50.690 align:middle line:84%
And what'll happen
here is that the way

20
00:00:50.690 --> 00:00:54.890 align:middle line:84%
in which the ForkJoinPool takes
the tasks that it's been given

21
00:00:54.890 --> 00:00:59.822 align:middle line:84%
and runs them can be
different for different runs,

22
00:00:59.822 --> 00:01:01.280 align:middle line:84%
be different on
different hardware,

23
00:01:01.280 --> 00:01:02.988 align:middle line:84%
different in different
operating systems,

24
00:01:02.988 --> 00:01:05.390 align:middle line:84%
different on versions
of the Java execution

25
00:01:05.390 --> 00:01:07.610 align:middle line:84%
environment, Java virtual
machine, and so on,

26
00:01:07.610 --> 00:01:09.680 align:middle line:90%
even for the same input.

27
00:01:09.680 --> 00:01:14.600 align:middle line:84%
And programmers have little
or no control over that.

28
00:01:14.600 --> 00:01:16.440 align:middle line:84%
You just can't do
anything about it.

29
00:01:16.440 --> 00:01:18.890 align:middle line:90%
And that's actually by design.

30
00:01:18.890 --> 00:01:23.550 align:middle line:84%
The reason for doing this is
it enables the various layers

31
00:01:23.550 --> 00:01:25.530 align:middle line:84%
in the Java execution
environment,

32
00:01:25.530 --> 00:01:31.260 align:middle line:84%
say a JVM, Java virtual machine,
or something like the Android

33
00:01:31.260 --> 00:01:34.860 align:middle line:84%
Arch runtime environment, which
uses ahead of time compilation

34
00:01:34.860 --> 00:01:37.920 align:middle line:84%
as opposed to virtual
machine interpretation.

35
00:01:37.920 --> 00:01:39.510 align:middle line:84%
All of these kinds
of things can be

36
00:01:39.510 --> 00:01:43.300 align:middle line:84%
optimized in ways that are
transparent to your code.

37
00:01:43.300 --> 00:01:47.280 align:middle line:84%
So the way in which tasks
are scheduled and executed

38
00:01:47.280 --> 00:01:51.038 align:middle line:84%
in the ForkJoinPool, on the
execution environment, the JVM,

39
00:01:51.038 --> 00:01:53.330 align:middle line:84%
the hardware cores, the
operating system, the operating

40
00:01:53.330 --> 00:01:55.350 align:middle line:84%
system threads,
all of those things

41
00:01:55.350 --> 00:01:58.950 align:middle line:84%
can be optimized in a way that's
totally transparent to you.

42
00:01:58.950 --> 00:01:59.970 align:middle line:90%
And that's a good thing.

43
00:01:59.970 --> 00:02:04.070 align:middle line:84%
You don't really want to have
to know about those details.

44
00:02:04.070 --> 00:02:07.790 align:middle line:84%
A good example of where some
non-determinism might come from

45
00:02:07.790 --> 00:02:12.273 align:middle line:84%
is the fork-join framework
support for work stealing.

46
00:02:12.273 --> 00:02:14.690 align:middle line:84%
We're going to talk a lot about
work stealing when we talk

47
00:02:14.690 --> 00:02:16.100 align:middle line:90%
about the fork-join framework.

48
00:02:16.100 --> 00:02:17.600 align:middle line:84%
And we'll talk a
little bit about it

49
00:02:17.600 --> 00:02:20.120 align:middle line:84%
when we talk about how
the parallel streams

50
00:02:20.120 --> 00:02:22.280 align:middle line:90%
framework uses ForkJoinPool.

51
00:02:22.280 --> 00:02:26.000 align:middle line:84%
But basically what happens
is, if you've got the worker

52
00:02:26.000 --> 00:02:28.160 align:middle line:84%
threads in the
ForkJoinPool, each

53
00:02:28.160 --> 00:02:29.870 align:middle line:84%
have their own
internal queue, which

54
00:02:29.870 --> 00:02:32.210 align:middle line:84%
is called a deck or
a double-ended queue.

55
00:02:32.210 --> 00:02:37.520 align:middle line:84%
And whenever a worker thread
has no work on its deck,

56
00:02:37.520 --> 00:02:40.970 align:middle line:84%
it turns around and tries
to steal available work

57
00:02:40.970 --> 00:02:43.790 align:middle line:84%
from other worker
threads' decks in order

58
00:02:43.790 --> 00:02:45.980 align:middle line:84%
to be able to have
the performance

59
00:02:45.980 --> 00:02:49.490 align:middle line:84%
maximized of the CPU of
the multicore processors.

60
00:02:49.490 --> 00:02:53.930 align:middle line:84%
And the reason for doing this
is to improve overall throughput

61
00:02:53.930 --> 00:02:55.070 align:middle line:90%
in the system.

62
00:02:55.070 --> 00:02:57.020 align:middle line:84%
But it also leads to a
lot of non-determinism.

63
00:02:57.020 --> 00:02:58.280 align:middle line:90%
And that's perfectly OK.

64
00:02:58.280 --> 00:03:00.190 align:middle line:90%
That's what you want.