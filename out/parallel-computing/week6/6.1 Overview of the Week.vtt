WEBVTT

1
00:00:00.000 --> 00:00:00.670 align:middle line:90%


2
00:00:00.670 --> 00:00:03.070 align:middle line:84%
Welcome to the next
week of our course

3
00:00:03.070 --> 00:00:06.268 align:middle line:84%
on parallel functional
programming with Java.

4
00:00:06.268 --> 00:00:08.560 align:middle line:84%
Now that we've finished our
coverage of Java sequential

5
00:00:08.560 --> 00:00:11.140 align:middle line:84%
streams, we can finally
turn our attention

6
00:00:11.140 --> 00:00:15.130 align:middle line:84%
to Java parallel streams, which
is the first of several Java

7
00:00:15.130 --> 00:00:19.010 align:middle line:84%
parallels and frameworks
we cover in this course.

8
00:00:19.010 --> 00:00:21.740 align:middle line:84%
This week's lessons start
by outlining the structure

9
00:00:21.740 --> 00:00:25.310 align:middle line:84%
and functionality of a parallel
stream, which partitions a data

10
00:00:25.310 --> 00:00:28.480 align:middle line:84%
source into multiple
chunks, processes

11
00:00:28.480 --> 00:00:30.730 align:middle line:84%
these chunks in a
pool of threads,

12
00:00:30.730 --> 00:00:33.400 align:middle line:84%
and combines the results
of this parallel processing

13
00:00:33.400 --> 00:00:36.280 align:middle line:90%
into a final, reduced result.

14
00:00:36.280 --> 00:00:38.650 align:middle line:84%
A key benefit of the
Java streams framework

15
00:00:38.650 --> 00:00:42.640 align:middle line:84%
is its ability to automatically
and transparently map behaviors

16
00:00:42.640 --> 00:00:46.180 align:middle line:84%
in a parallel stream to
multiple processor cores

17
00:00:46.180 --> 00:00:48.250 align:middle line:84%
without requiring
programmers to spawn threads

18
00:00:48.250 --> 00:00:51.280 align:middle line:84%
explicitly or even apply
synchronization mechanisms,

19
00:00:51.280 --> 00:00:53.000 align:middle line:90%
in many cases.

20
00:00:53.000 --> 00:00:56.180 align:middle line:84%
In fact, converting a sequential
stream to a parallel stream

21
00:00:56.180 --> 00:00:59.180 align:middle line:84%
often just requires
minuscule changes,

22
00:00:59.180 --> 00:01:01.520 align:middle line:84%
such as replacing a call
to the stream factory

23
00:01:01.520 --> 00:01:05.780 align:middle line:84%
method or the call to the
parallel stream factory method.

24
00:01:05.780 --> 00:01:09.470 align:middle line:84%
This week's lessons visualize
and demonstrate the simplicity

25
00:01:09.470 --> 00:01:12.260 align:middle line:84%
of converting
sequential-to-parallel streams

26
00:01:12.260 --> 00:01:16.020 align:middle line:84%
in the context of the search
stream [? gang ?] case study.

27
00:01:16.020 --> 00:01:18.390 align:middle line:84%
This case study
underscores the fact

28
00:01:18.390 --> 00:01:19.980 align:middle line:84%
that all the
aggregate operations

29
00:01:19.980 --> 00:01:24.000 align:middle line:84%
we covered in prior weeks'
work will work seamlessly

30
00:01:24.000 --> 00:01:26.240 align:middle line:90%
with parallel streams.

31
00:01:26.240 --> 00:01:28.640 align:middle line:84%
Not surprisingly,
however, the three phases

32
00:01:28.640 --> 00:01:31.130 align:middle line:84%
of a parallel stream
operate somewhat differently

33
00:01:31.130 --> 00:01:33.630 align:middle line:90%
than a sequential stream.

34
00:01:33.630 --> 00:01:36.150 align:middle line:84%
This week's lessons,
therefore, give an overview

35
00:01:36.150 --> 00:01:39.150 align:middle line:84%
of parallel streams'
internals, which

36
00:01:39.150 --> 00:01:41.580 align:middle line:84%
are particularly important
to understand when developing

37
00:01:41.580 --> 00:01:45.030 align:middle line:84%
performance-critical Java
programs on modern multicore

38
00:01:45.030 --> 00:01:46.730 align:middle line:90%
processors.

39
00:01:46.730 --> 00:01:49.580 align:middle line:84%
In particular, we examine
how the streams framework

40
00:01:49.580 --> 00:01:53.690 align:middle line:84%
first invokes predefined or
user-defined spliterators

41
00:01:53.690 --> 00:01:56.930 align:middle line:84%
to partition a data source
into multiple chunks.

42
00:01:56.930 --> 00:01:59.990 align:middle line:84%
We next show how these chunks
are processed in parallel

43
00:01:59.990 --> 00:02:02.540 align:middle line:84%
by running the streams
intermediate operations

44
00:02:02.540 --> 00:02:05.360 align:middle line:84%
in the Java common
fork-joint pool.

45
00:02:05.360 --> 00:02:08.810 align:middle line:84%
Finally, we outline how the
streams framework uses terminal

46
00:02:08.810 --> 00:02:12.720 align:middle line:84%
operations like collect together
with predefined or user-defined

47
00:02:12.720 --> 00:02:16.340 align:middle line:84%
collectors the join partial
sub-results into a final,

48
00:02:16.340 --> 00:02:20.420 align:middle line:84%
reduced result. To maximize
the performance of the Java

49
00:02:20.420 --> 00:02:24.050 align:middle line:84%
parallel streams framework, it's
important to know which aspects

50
00:02:24.050 --> 00:02:27.980 align:middle line:84%
of these phases can be
controlled and which can't.

51
00:02:27.980 --> 00:02:30.170 align:middle line:84%
So we walked through
many code examples

52
00:02:30.170 --> 00:02:32.650 align:middle line:90%
to illustrate key points.