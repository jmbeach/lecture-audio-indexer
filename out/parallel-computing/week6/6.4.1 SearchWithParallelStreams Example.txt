Now that I'm giving you a quick overview of the Java parallel streams framework. Let's just jump right in Two showing how to apply it to our search stream, game application case study. And now we're going to talk about the search with parallel streams implementation, and this implementation. As you can see, if you look kind of squinted the the performance output shown in that little screen there on the on your slide. This implementation performs substantially better than the previous sequential stream implementation that we talked about in Prior weeks.
So we'll see that the implementation here is very, very similar. It's almost identical. In fact to the sequential streams version as before the two key methods were going to focus on will be process stream and process input. Except now, these are part of the search with Carol Streams class as opposed to the search for sequential streams class.
 Hear the method implementations just kind of shown very simply and as before will focus on map filter and collect. Except this time will be calling parallel stream instead of calling stream, which natural generator parallel streams of thought about cyclical strength.
 Let's put a recap what these methods do and kind of visualize them at a high-level. The parallel that the process stream that the uses of parallel stream to search a list of inputs and each of those inputs dreams, of course, contains a work of our favorite author, William Shakespeare. So one string would have the text for Hamlet. Another string would have the text from Macbeth of the string would have the text. For King Lear, etc, etc.
 The Perla stream, of course, uses the common Fork. Join pool of workers thread, so it runs and process these. These inputs dreams in parallel.
 And as with the sequential version, it returns a list of lists of search results and not surprisingly, the print phrases method that we've covered in previous weeks can be used in order to be able to flatten the contents, therein print them out and then nicely formatted way for each work of Shakespeare. All the quotes that came from that work will be display.
 Process input also uses a parallel stream, except that uses apparel stream to search. Each input strain and locate all occurrences of the phase, the phrases that shouldn't be a phase has its phrases his all occurrences of phrases, obviously thinking too much about the streams phases as opposed to the search screen, gang phases and phrases.
 As before the parallel stream. Here also uses the common Fork. Join pool of workers threads to run this capitation these computations in parallel and process, input returns a list of search results, which then gets collected into a list of list of search results by process string.