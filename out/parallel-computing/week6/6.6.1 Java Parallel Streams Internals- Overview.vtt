WEBVTT

1
00:00:00.000 --> 00:00:00.500 align:middle line:90%


2
00:00:00.500 --> 00:00:04.019 align:middle line:84%
Now that we've had a chance
to showcase and revisit

3
00:00:04.019 --> 00:00:06.630 align:middle line:84%
the SearchWithStreamGang
case study

4
00:00:06.630 --> 00:00:08.940 align:middle line:84%
and show how easy it was
to go from sequential

5
00:00:08.940 --> 00:00:11.280 align:middle line:84%
to parallel streams,
it's a good time

6
00:00:11.280 --> 00:00:13.980 align:middle line:84%
to take a step back and
look at the internals

7
00:00:13.980 --> 00:00:16.560 align:middle line:84%
of parallel streams and have
a better understanding of how

8
00:00:16.560 --> 00:00:18.120 align:middle line:90%
things work under the hood.

9
00:00:18.120 --> 00:00:21.292 align:middle line:84%
I gave you a quick synopsis
of this earlier this week,

10
00:00:21.292 --> 00:00:23.250 align:middle line:84%
but now I'm really going
to go into more detail

11
00:00:23.250 --> 00:00:26.790 align:middle line:84%
and really look in
great depth about how

12
00:00:26.790 --> 00:00:27.960 align:middle line:90%
parallel streams works.

13
00:00:27.960 --> 00:00:30.970 align:middle line:90%
It's really, really fascinating.

14
00:00:30.970 --> 00:00:33.070 align:middle line:84%
As we talked about
earlier in earlier weeks

15
00:00:33.070 --> 00:00:36.670 align:middle line:84%
when we discussed
sequential stream internals,

16
00:00:36.670 --> 00:00:40.210 align:middle line:84%
one of the first and most
important things to understand

17
00:00:40.210 --> 00:00:42.700 align:middle line:84%
is what aspects of
the parallel streams

18
00:00:42.700 --> 00:00:47.540 align:middle line:84%
framework you can change and
what aspects you can't change.

19
00:00:47.540 --> 00:00:49.720 align:middle line:84%
And you just have to come
to grips with the fact

20
00:00:49.720 --> 00:00:51.968 align:middle line:84%
you can't change everything,
and that's by design.

21
00:00:51.968 --> 00:00:54.010 align:middle line:84%
There's a lot of reasons
why the parallel streams

22
00:00:54.010 --> 00:00:57.400 align:middle line:84%
framework is designed and
implemented the way it is.

23
00:00:57.400 --> 00:00:59.720 align:middle line:84%
And you might quibble with
some of the design choices,

24
00:00:59.720 --> 00:01:03.130 align:middle line:84%
but I think you'll find the
practice is really quite good,

25
00:01:03.130 --> 00:01:04.810 align:middle line:84%
especially considering
you don't have

26
00:01:04.810 --> 00:01:07.840 align:middle line:84%
to write it, document it,
maintain it, debug it,

27
00:01:07.840 --> 00:01:09.600 align:middle line:90%
and so on.

28
00:01:09.600 --> 00:01:12.290 align:middle line:84%
So the first question, of
course, is, why do we care?

29
00:01:12.290 --> 00:01:14.930 align:middle line:84%
Who cares how parallel
streams works?

30
00:01:14.930 --> 00:01:17.912 align:middle line:84%
Shouldn't we just be happy
that it works so well?

31
00:01:17.912 --> 00:01:20.120 align:middle line:84%
And in fact, we've seen that
it's actually quite easy

32
00:01:20.120 --> 00:01:22.670 align:middle line:84%
to be parallel, so why do
we care how it does things

33
00:01:22.670 --> 00:01:24.080 align:middle line:90%
under the hood?

34
00:01:24.080 --> 00:01:27.020 align:middle line:84%
Well, as you'll see very
quickly, if you're just

35
00:01:27.020 --> 00:01:29.150 align:middle line:84%
having fun writing
little demo programs

36
00:01:29.150 --> 00:01:31.700 align:middle line:84%
or teaching a class
casually, it's

37
00:01:31.700 --> 00:01:33.920 align:middle line:84%
probably not that important
to know all the details

38
00:01:33.920 --> 00:01:35.000 align:middle line:90%
internally.

39
00:01:35.000 --> 00:01:36.680 align:middle line:84%
However, if you're
trying to write

40
00:01:36.680 --> 00:01:39.500 align:middle line:84%
performance-critical
applications,

41
00:01:39.500 --> 00:01:42.980 align:middle line:84%
it's essential to understand
how streams and parallel

42
00:01:42.980 --> 00:01:44.725 align:middle line:90%
streams work internally.

43
00:01:44.725 --> 00:01:46.350 align:middle line:84%
Because if you
understand how it works,

44
00:01:46.350 --> 00:01:48.308 align:middle line:84%
you'll be more likely to
use the right features

45
00:01:48.308 --> 00:01:49.970 align:middle line:84%
in the right
combinations in order

46
00:01:49.970 --> 00:01:52.130 align:middle line:84%
to get the right
performance that you

47
00:01:52.130 --> 00:01:55.310 align:middle line:90%
need to meet your requirements.

48
00:01:55.310 --> 00:01:57.140 align:middle line:84%
To start this
discussion, just recall

49
00:01:57.140 --> 00:01:59.348 align:middle line:84%
there were three phases
of a parallel stream.

50
00:01:59.348 --> 00:02:01.640 align:middle line:84%
I'm not going to dwell on
this because we've covered it

51
00:02:01.640 --> 00:02:03.920 align:middle line:84%
several times, but this
sets up the discussion

52
00:02:03.920 --> 00:02:06.373 align:middle line:84%
of what can change
and what can't change.

53
00:02:06.373 --> 00:02:07.790 align:middle line:84%
There's the splitting
phase, where

54
00:02:07.790 --> 00:02:10.789 align:middle line:84%
we use a spliterator to
partition the data source up

55
00:02:10.789 --> 00:02:12.540 align:middle line:90%
into multiple chunks.

56
00:02:12.540 --> 00:02:14.570 align:middle line:84%
There's the apply phase,
where we independently

57
00:02:14.570 --> 00:02:17.470 align:middle line:84%
process these chunks
in worker threads

58
00:02:17.470 --> 00:02:19.283 align:middle line:90%
in the common fork-join pool.

59
00:02:19.283 --> 00:02:21.200 align:middle line:84%
And then, finally, we
have the combined phase,

60
00:02:21.200 --> 00:02:23.630 align:middle line:84%
which joins the
partial sub-results

61
00:02:23.630 --> 00:02:27.650 align:middle line:84%
and merges them together into
a single, reduced result.

62
00:02:27.650 --> 00:02:32.330 align:middle line:84%
Now, it turns out that we can
make some changes to splitting,

63
00:02:32.330 --> 00:02:34.880 align:middle line:84%
we can make some
changes to combining,

64
00:02:34.880 --> 00:02:38.810 align:middle line:84%
but we're pretty much stuck with
the way the apply phase works

65
00:02:38.810 --> 00:02:42.110 align:middle line:84%
because there aren't many
knobs for controlling

66
00:02:42.110 --> 00:02:44.120 align:middle line:90%
the common fork-join pool.

67
00:02:44.120 --> 00:02:46.700 align:middle line:84%
We'll see that there's a
few little, simple knobs,

68
00:02:46.700 --> 00:02:49.140 align:middle line:84%
like influencing the
number of threads that

69
00:02:49.140 --> 00:02:50.870 align:middle line:84%
are in the fork-join
pool, but you really

70
00:02:50.870 --> 00:02:54.020 align:middle line:84%
can't control, for example, the
order in which the processing

71
00:02:54.020 --> 00:02:55.320 align:middle line:90%
takes place in parallel.

72
00:02:55.320 --> 00:02:57.225 align:middle line:84%
That's not something
you really can control.

73
00:02:57.225 --> 00:02:59.600 align:middle line:84%
So you've got to come to grips
with what you can control,

74
00:02:59.600 --> 00:03:02.720 align:middle line:84%
and then learn how to use
those control knobs effectively

75
00:03:02.720 --> 00:03:06.260 align:middle line:90%
to optimize and tune your code.