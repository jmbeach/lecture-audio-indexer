WEBVTT

1
00:00:00.000 --> 00:00:00.182 align:middle line:90%


2
00:00:00.182 --> 00:00:01.640 align:middle line:84%
What we're going
to do now is we're

3
00:00:01.640 --> 00:00:05.940 align:middle line:84%
going to talk about the order
of results for operations.

4
00:00:05.940 --> 00:00:08.660 align:middle line:84%
So before, we talked
about the order of results

5
00:00:08.660 --> 00:00:10.010 align:middle line:90%
for collections.

6
00:00:10.010 --> 00:00:13.190 align:middle line:84%
Now we're going to talk
about the order of results

7
00:00:13.190 --> 00:00:15.410 align:middle line:84%
that are affected
by the operations

8
00:00:15.410 --> 00:00:17.940 align:middle line:90%
that you may happen to choose.

9
00:00:17.940 --> 00:00:20.210 align:middle line:84%
And again, we're going to
look at a bunch of examples.

10
00:00:20.210 --> 00:00:21.650 align:middle line:90%
This is actually kind of fun.

11
00:00:21.650 --> 00:00:24.140 align:middle line:84%
There's lots of
interesting things here.

12
00:00:24.140 --> 00:00:26.750 align:middle line:84%
As was the case earlier,
if you take a look

13
00:00:26.750 --> 00:00:30.830 align:middle line:84%
at the ex21 folder in
my GitHub repository,

14
00:00:30.830 --> 00:00:35.100 align:middle line:84%
you'll find all
the examples there.

15
00:00:35.100 --> 00:00:37.410 align:middle line:84%
So certain
intermediate operations

16
00:00:37.410 --> 00:00:39.540 align:middle line:90%
affect ordering behavior.

17
00:00:39.540 --> 00:00:44.490 align:middle line:84%
And we'll take a look
and see what they are.

18
00:00:44.490 --> 00:00:47.430 align:middle line:84%
We'll start by
looking at sorted,

19
00:00:47.430 --> 00:00:51.210 align:middle line:90%
unordered, skip, and limit.

20
00:00:51.210 --> 00:00:52.980 align:middle line:84%
And I'll demonstrate
some of these things

21
00:00:52.980 --> 00:00:55.500 align:middle line:84%
in the context of
several examples

22
00:00:55.500 --> 00:00:58.300 align:middle line:90%
that are variants of each other.

23
00:00:58.300 --> 00:01:03.640 align:middle line:84%
So once again, we'll start
by looking at some input.

24
00:01:03.640 --> 00:01:08.360 align:middle line:84%
In this case, we're going
to have a list created

25
00:01:08.360 --> 00:01:13.620 align:middle line:84%
that has the values 2,
3, 1, 4, 2 in that order.

26
00:01:13.620 --> 00:01:16.680 align:middle line:84%
And that will be
the encounter order.

27
00:01:16.680 --> 00:01:20.490 align:middle line:84%
And that's because a list is
both ordered and non-unique.

28
00:01:20.490 --> 00:01:24.100 align:middle line:84%
So we don't have to worry
about having duplicates.

29
00:01:24.100 --> 00:01:28.040 align:middle line:84%
The next thing we do
is we call distinct.

30
00:01:28.040 --> 00:01:31.807 align:middle line:84%
So we create a parallel stream
from that original list.

31
00:01:31.807 --> 00:01:32.890 align:middle line:90%
And then we call distinct.

32
00:01:32.890 --> 00:01:38.103 align:middle line:84%
And distinct is a stateful
intermediate operation.

33
00:01:38.103 --> 00:01:39.520 align:middle line:84%
And that will, of
course, go ahead

34
00:01:39.520 --> 00:01:43.160 align:middle line:90%
and remove duplicate elements.

35
00:01:43.160 --> 00:01:44.830 align:middle line:84%
So now we'll end up
with a stream that

36
00:01:44.830 --> 00:01:49.160 align:middle line:90%
will be basically 2, 3, 1, 4.

37
00:01:49.160 --> 00:01:53.150 align:middle line:84%
And then we're also going
to go ahead and limit

38
00:01:53.150 --> 00:01:54.980 align:middle line:84%
the amount of processing
that takes place

39
00:01:54.980 --> 00:01:59.332 align:middle line:84%
here to some parameter
passed in to the limit

40
00:01:59.332 --> 00:02:00.290 align:middle line:90%
intermediate operation.

41
00:02:00.290 --> 00:02:05.120 align:middle line:84%
So let's assume sOutputLimit
had the value of 2,

42
00:02:05.120 --> 00:02:06.770 align:middle line:90%
or something like that.

43
00:02:06.770 --> 00:02:09.740 align:middle line:84%
That would then also be
a stateful intermediate

44
00:02:09.740 --> 00:02:10.919 align:middle line:90%
operation.

45
00:02:10.919 --> 00:02:13.490 align:middle line:84%
And that means we're only going
to process that many elements

46
00:02:13.490 --> 00:02:14.760 align:middle line:90%
in the stream.

47
00:02:14.760 --> 00:02:17.900 align:middle line:84%
So it's what's called a
short-circuiting stateful

48
00:02:17.900 --> 00:02:20.530 align:middle line:90%
intermediate operation.

49
00:02:20.530 --> 00:02:22.990 align:middle line:84%
Now, after all of
this stuff, we'll

50
00:02:22.990 --> 00:02:28.240 align:middle line:84%
end up with a result that
will be 8 followed by 4.

51
00:02:28.240 --> 00:02:31.690 align:middle line:84%
And that's because
we're going to end up

52
00:02:31.690 --> 00:02:36.130 align:middle line:90%
with the duplicates removed.

53
00:02:36.130 --> 00:02:40.780 align:middle line:84%
And this will be
the encounter order,

54
00:02:40.780 --> 00:02:42.520 align:middle line:84%
because everything
we saw along the way

55
00:02:42.520 --> 00:02:46.250 align:middle line:90%
preserved the ordering property.

56
00:02:46.250 --> 00:02:48.490 align:middle line:84%
However, the
performance of this code

57
00:02:48.490 --> 00:02:54.850 align:middle line:84%
will be rather slow, because
limit and distinct have

58
00:02:54.850 --> 00:02:57.130 align:middle line:84%
so-called stateful
semantics, which

59
00:02:57.130 --> 00:03:01.270 align:middle line:84%
require additional processing
in parallel streams.

60
00:03:01.270 --> 00:03:04.810 align:middle line:84%
So be aware that the choice
of the intermediate operation

61
00:03:04.810 --> 00:03:08.470 align:middle line:84%
can affect the behavior
as well as also affect

62
00:03:08.470 --> 00:03:11.210 align:middle line:90%
the performance as well.

63
00:03:11.210 --> 00:03:16.540 align:middle line:84%
Now, if we go ahead and
insert the unordered call

64
00:03:16.540 --> 00:03:19.480 align:middle line:84%
after we make a
parallel stream, this

65
00:03:19.480 --> 00:03:21.760 align:middle line:84%
will end up allowing
the code to run

66
00:03:21.760 --> 00:03:25.330 align:middle line:84%
more efficiently, because
there's no need to preserve

67
00:03:25.330 --> 00:03:26.890 align:middle line:90%
the encounter order.

68
00:03:26.890 --> 00:03:29.200 align:middle line:84%
So therefore, these
intermediate operations,

69
00:03:29.200 --> 00:03:33.670 align:middle line:84%
like limit and distinct,
can incur less overhead.

70
00:03:33.670 --> 00:03:35.360 align:middle line:90%
And that's a good thing.

71
00:03:35.360 --> 00:03:37.840 align:middle line:84%
It's a win, because
we've made things faster

72
00:03:37.840 --> 00:03:42.210 align:middle line:84%
by not caring about the
order in which things occur.

73
00:03:42.210 --> 00:03:45.060 align:middle line:84%
Since the encounter order
doesn't have to be maintained,

74
00:03:45.060 --> 00:03:48.788 align:middle line:84%
the result could be 8 followed
by 4, or 4 followed by 8.

75
00:03:48.788 --> 00:03:49.830 align:middle line:90%
It doesn't really matter.

76
00:03:49.830 --> 00:03:52.410 align:middle line:90%


77
00:03:52.410 --> 00:03:56.650 align:middle line:84%
Certain terminal operations
also affect ordering behavior.

78
00:03:56.650 --> 00:03:59.250 align:middle line:84%
So we already saw how
intermediate operations

79
00:03:59.250 --> 00:04:00.600 align:middle line:90%
affected the behavior.

80
00:04:00.600 --> 00:04:03.420 align:middle line:84%
Now we're going to take a look
and see how terminal operations

81
00:04:03.420 --> 00:04:06.370 align:middle line:90%
affect the ordering behavior.

82
00:04:06.370 --> 00:04:07.960 align:middle line:84%
The most obvious
terminal operation

83
00:04:07.960 --> 00:04:09.790 align:middle line:84%
that will affect
ordering behavior

84
00:04:09.790 --> 00:04:12.040 align:middle line:90%
is the forEachOrdered method.

85
00:04:12.040 --> 00:04:14.470 align:middle line:84%
And the whole purpose
of forEachOrdered

86
00:04:14.470 --> 00:04:19.899 align:middle line:84%
is to ensure that we end
up with ordering preserved.

87
00:04:19.899 --> 00:04:23.120 align:middle line:84%
We want to preserve
the encounter order.

88
00:04:23.120 --> 00:04:28.760 align:middle line:84%
So you can take a look here and
see that if we write this code

89
00:04:28.760 --> 00:04:32.390 align:middle line:84%
and we use the
array list to be 2,

90
00:04:32.390 --> 00:04:35.450 align:middle line:84%
3, 1, 4, 2, run this
thing in parallel,

91
00:04:35.450 --> 00:04:37.790 align:middle line:84%
we use forEachOrdered,
then we'll

92
00:04:37.790 --> 00:04:42.180 align:middle line:84%
be able to have the
results be ordered.

93
00:04:42.180 --> 00:04:44.960 align:middle line:84%
However, we have to
be very careful here,

94
00:04:44.960 --> 00:04:48.050 align:middle line:84%
because this list is
only going to support

95
00:04:48.050 --> 00:04:50.690 align:middle line:84%
unsynchronized insertion
and removal of elements,

96
00:04:50.690 --> 00:04:54.170 align:middle line:84%
because it's just a
plain old array list.

97
00:04:54.170 --> 00:04:56.930 align:middle line:84%
Now, the thing
that's so wacky here

98
00:04:56.930 --> 00:05:02.170 align:middle line:84%
is that even though we're
using a parallel stream here,

99
00:05:02.170 --> 00:05:05.440 align:middle line:84%
we will still end up
getting results that

100
00:05:05.440 --> 00:05:07.630 align:middle line:90%
don't have race conditions.

101
00:05:07.630 --> 00:05:11.880 align:middle line:84%
And that's because the results
must appear in encounter order.

102
00:05:11.880 --> 00:05:13.470 align:middle line:90%
Now, this is really strange.

103
00:05:13.470 --> 00:05:17.370 align:middle line:84%
This will work properly
using forEachOrdered.

104
00:05:17.370 --> 00:05:18.810 align:middle line:90%
But it will be slow.

105
00:05:18.810 --> 00:05:21.510 align:middle line:84%
And that's because there's
implicit synchronization that's

106
00:05:21.510 --> 00:05:25.890 align:middle line:84%
performed in the
forEachOrdered method.

107
00:05:25.890 --> 00:05:28.200 align:middle line:84%
Were you to use the
forEach method here,

108
00:05:28.200 --> 00:05:30.240 align:middle line:84%
then chaos and
insanity would ensue,

109
00:05:30.240 --> 00:05:33.330 align:middle line:84%
because we would be
simultaneously accessing

110
00:05:33.330 --> 00:05:37.350 align:middle line:90%
an unsynchronized array list.

111
00:05:37.350 --> 00:05:40.930 align:middle line:84%
Let's go take a look at how
you could use forEach properly.

112
00:05:40.930 --> 00:05:43.050 align:middle line:84%
Now remember, forEach
does not attempt

113
00:05:43.050 --> 00:05:46.210 align:middle line:90%
to preserve encounter order.

114
00:05:46.210 --> 00:05:50.910 align:middle line:84%
And instead, what we do here
is we create the results

115
00:05:50.910 --> 00:05:54.750 align:middle line:84%
variable to be a concurrent
linked queue rather

116
00:05:54.750 --> 00:05:57.780 align:middle line:84%
than an array list,
as we showed here.

117
00:05:57.780 --> 00:06:00.990 align:middle line:84%
And this code will
work properly,

118
00:06:00.990 --> 00:06:03.930 align:middle line:84%
because results will be
properly synchronized.

119
00:06:03.930 --> 00:06:06.270 align:middle line:84%
But the order doesn't
have to be preserved.

120
00:06:06.270 --> 00:06:10.360 align:middle line:84%
So it might be faster
than forEachOrdered.

121
00:06:10.360 --> 00:06:12.660 align:middle line:84%
It might be about the same,
because we're still using

122
00:06:12.660 --> 00:06:14.880 align:middle line:90%
synchronized data structures.

123
00:06:14.880 --> 00:06:18.510 align:middle line:84%
It just depends on whether
concurrent linked queues

124
00:06:18.510 --> 00:06:23.160 align:middle line:84%
synchronizers any faster than
forEachOrdered's linked--

125
00:06:23.160 --> 00:06:25.890 align:middle line:90%
forEachOrdered synchronizer.

126
00:06:25.890 --> 00:06:28.140 align:middle line:84%
So you have to pick
your poison there.

127
00:06:28.140 --> 00:06:30.690 align:middle line:84%
I would probably not
recommend writing

128
00:06:30.690 --> 00:06:33.690 align:middle line:84%
any of this code
with a forEach loop

129
00:06:33.690 --> 00:06:37.890 align:middle line:84%
and a results queue
or a results list.

130
00:06:37.890 --> 00:06:40.440 align:middle line:84%
It's just there are better
ways to do it using collect.

131
00:06:40.440 --> 00:06:43.800 align:middle line:84%
So I'm just showing you
that the ordering of forEach

132
00:06:43.800 --> 00:06:44.800 align:middle line:90%
and forEachAll differs.

133
00:06:44.800 --> 00:06:48.075 align:middle line:90%


134
00:06:48.075 --> 00:06:52.020 align:middle line:84%
OK, so that basically
wraps up our discussion

135
00:06:52.020 --> 00:06:55.200 align:middle line:84%
about ordering results
for operations, which

136
00:06:55.200 --> 00:06:57.720 align:middle line:84%
is one of the things that
you can, in fact, control

137
00:06:57.720 --> 00:07:02.640 align:middle line:84%
in Java parallel streams, even
though ordering of processing

138
00:07:02.640 --> 00:07:05.810 align:middle line:84%
is not really something
that you can control.