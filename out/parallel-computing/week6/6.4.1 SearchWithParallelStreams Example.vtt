WEBVTT

1
00:00:00.000 --> 00:00:00.660 align:middle line:90%


2
00:00:00.660 --> 00:00:03.300 align:middle line:84%
So now that I've given you
a quick overview of the Java

3
00:00:03.300 --> 00:00:05.250 align:middle line:84%
parallel streams
framework, let's

4
00:00:05.250 --> 00:00:08.010 align:middle line:84%
just jump right in
to showing a how

5
00:00:08.010 --> 00:00:14.460 align:middle line:84%
to apply it to our search stream
game application case study.

6
00:00:14.460 --> 00:00:16.830 align:middle line:84%
And now we're going to
talk about the search

7
00:00:16.830 --> 00:00:20.070 align:middle line:84%
with parallel streams
implementation.

8
00:00:20.070 --> 00:00:23.370 align:middle line:84%
And this implementation, as
you can see if you look--

9
00:00:23.370 --> 00:00:27.690 align:middle line:84%
squint at the performance output
shown in that little screen

10
00:00:27.690 --> 00:00:29.580 align:middle line:90%
there on your slide--

11
00:00:29.580 --> 00:00:32.729 align:middle line:84%
this implementation performs
substantially better

12
00:00:32.729 --> 00:00:36.210 align:middle line:84%
than the previous sequential
stream implementation

13
00:00:36.210 --> 00:00:39.930 align:middle line:84%
that we've talked
about in prior weeks.

14
00:00:39.930 --> 00:00:42.960 align:middle line:84%
So we'll see that the
implementation here

15
00:00:42.960 --> 00:00:44.250 align:middle line:90%
is very, very similar.

16
00:00:44.250 --> 00:00:46.740 align:middle line:84%
It's almost identical, in fact,
to the sequential stream's

17
00:00:46.740 --> 00:00:48.060 align:middle line:90%
version.

18
00:00:48.060 --> 00:00:51.150 align:middle line:84%
As before, the two key methods
we're going to focus on

19
00:00:51.150 --> 00:00:54.505 align:middle line:84%
will be process stream
and process input.

20
00:00:54.505 --> 00:00:56.130 align:middle line:84%
Except now these are
part of the search

21
00:00:56.130 --> 00:00:58.470 align:middle line:84%
with parallel streams
class as opposed

22
00:00:58.470 --> 00:01:01.890 align:middle line:84%
to the search with
sequential streams class.

23
00:01:01.890 --> 00:01:06.060 align:middle line:84%
Here the method implementations
just shown very simply.

24
00:01:06.060 --> 00:01:10.410 align:middle line:84%
And as before we'll focus
on map, filter, and collect.

25
00:01:10.410 --> 00:01:13.950 align:middle line:84%
Except this time, we'll
be calling parallel stream

26
00:01:13.950 --> 00:01:16.590 align:middle line:84%
instead of calling
stream, which naturally

27
00:01:16.590 --> 00:01:20.970 align:middle line:84%
will generate a parallel stream
instead of sequential stream.

28
00:01:20.970 --> 00:01:25.440 align:middle line:84%
Let's quickly recap what these
methods do and visualize them

29
00:01:25.440 --> 00:01:26.670 align:middle line:90%
at a high level.

30
00:01:26.670 --> 00:01:29.040 align:middle line:84%
The parallel-- the
process stream method

31
00:01:29.040 --> 00:01:33.458 align:middle line:84%
uses a parallel stream to
search a list of input strings.

32
00:01:33.458 --> 00:01:35.250 align:middle line:84%
And each of those input
strings, of course,

33
00:01:35.250 --> 00:01:39.450 align:middle line:84%
contains a work of our favorite
author William Shakespeare.

34
00:01:39.450 --> 00:01:41.820 align:middle line:84%
So one string would have
the text for Hamlet.

35
00:01:41.820 --> 00:01:44.210 align:middle line:84%
Another string would have
the text for Macbeth.

36
00:01:44.210 --> 00:01:46.860 align:middle line:84%
Another string would have
the text for King Lear,

37
00:01:46.860 --> 00:01:49.150 align:middle line:90%
et cetera, et cetera.

38
00:01:49.150 --> 00:01:52.270 align:middle line:84%
The parallel stream, of course,
uses the common fork-join pool

39
00:01:52.270 --> 00:01:55.960 align:middle line:84%
of worker thread, so it runs and
processes these input strings

40
00:01:55.960 --> 00:01:57.710 align:middle line:90%
in parallel.

41
00:01:57.710 --> 00:02:00.140 align:middle line:84%
And as with the
sequential version,

42
00:02:00.140 --> 00:02:04.070 align:middle line:84%
it returns a list of
lists of search results.

43
00:02:04.070 --> 00:02:06.800 align:middle line:84%
And not surprisingly
the print phrases method

44
00:02:06.800 --> 00:02:08.990 align:middle line:84%
that we've covered
in previous weeks

45
00:02:08.990 --> 00:02:11.648 align:middle line:84%
can be used in order
to be able to flatten

46
00:02:11.648 --> 00:02:13.190 align:middle line:84%
the contents there
and print them out

47
00:02:13.190 --> 00:02:15.080 align:middle line:90%
in a nicely formatted way.

48
00:02:15.080 --> 00:02:17.420 align:middle line:84%
For each work of
Shakespeare, all the quotes

49
00:02:17.420 --> 00:02:20.450 align:middle line:84%
that came from that
work will be displayed.

50
00:02:20.450 --> 00:02:24.110 align:middle line:84%
Process input also
uses a parallel stream

51
00:02:24.110 --> 00:02:27.890 align:middle line:84%
except it uses a parallel stream
to search each input string

52
00:02:27.890 --> 00:02:31.880 align:middle line:84%
and locate all
occurrences of the phase--

53
00:02:31.880 --> 00:02:34.760 align:middle line:84%
the phrases-- that should
be phases, its phrases--

54
00:02:34.760 --> 00:02:37.260 align:middle line:90%
so all occurrences of phrases.

55
00:02:37.260 --> 00:02:40.580 align:middle line:84%
I'm obviously thinking too
much about streams phases

56
00:02:40.580 --> 00:02:46.320 align:middle line:84%
as opposed to the search
stream game phases and phrases.

57
00:02:46.320 --> 00:02:47.910 align:middle line:84%
As before, the
parallel stream here

58
00:02:47.910 --> 00:02:51.390 align:middle line:84%
also uses the common fork-join
pool of worker threads

59
00:02:51.390 --> 00:02:54.810 align:middle line:84%
to run this computation, these
computations in parallel.

60
00:02:54.810 --> 00:02:58.500 align:middle line:84%
And process input returns a
list of search results, which

61
00:02:58.500 --> 00:03:02.190 align:middle line:84%
then gets collected into a
list of list of search results

62
00:03:02.190 --> 00:03:05.120 align:middle line:90%
by process stream.