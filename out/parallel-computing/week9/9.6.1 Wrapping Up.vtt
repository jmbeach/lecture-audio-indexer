WEBVTT

1
00:00:00.000 --> 00:00:00.500 align:middle line:90%


2
00:00:00.500 --> 00:00:02.820 align:middle line:84%
So now that we've finished
describing the structure

3
00:00:02.820 --> 00:00:06.240 align:middle line:84%
and functionality and
implementation of the image

4
00:00:06.240 --> 00:00:09.780 align:middle line:84%
stream gang case study, let's
take a step back and talk

5
00:00:09.780 --> 00:00:14.720 align:middle line:84%
about the pros and cons
of Java parallel streams.

6
00:00:14.720 --> 00:00:17.040 align:middle line:90%
We'll start with the pros.

7
00:00:17.040 --> 00:00:21.600 align:middle line:84%
As we've seen after examining
the various implementations

8
00:00:21.600 --> 00:00:23.820 align:middle line:84%
of search with parallel
streams, search

9
00:00:23.820 --> 00:00:27.280 align:middle line:84%
with parallel spliterators,
image stream gang and so on,

10
00:00:27.280 --> 00:00:29.970 align:middle line:84%
we can see that the Java
Streams framework greatly

11
00:00:29.970 --> 00:00:33.690 align:middle line:84%
simplifies parallel programming
by shielding developers

12
00:00:33.690 --> 00:00:36.780 align:middle line:84%
from all those nitty gritty
details of parallel splitting,

13
00:00:36.780 --> 00:00:40.100 align:middle line:84%
parallel applying, in parallel
combining of the results.

14
00:00:40.100 --> 00:00:41.100 align:middle line:90%
And that's a nice thing.

15
00:00:41.100 --> 00:00:44.460 align:middle line:84%
If you go and look at the source
code for the streams framework,

16
00:00:44.460 --> 00:00:46.740 align:middle line:84%
especially the parts that
deal with parallelism,

17
00:00:46.740 --> 00:00:48.882 align:middle line:84%
your mind will most
likely explode.

18
00:00:48.882 --> 00:00:51.090 align:middle line:84%
Now, admittedly, it's not
particularly well commented

19
00:00:51.090 --> 00:00:53.610 align:middle line:84%
or documented, but even
so, even if it were,

20
00:00:53.610 --> 00:00:56.640 align:middle line:84%
it's some complicated code
that you don't need to write,

21
00:00:56.640 --> 00:00:59.810 align:middle line:90%
and that's a reassuring thing.

22
00:00:59.810 --> 00:01:04.060 align:middle line:84%
We've also seen how much the
parallel stream implementations

23
00:01:04.060 --> 00:01:06.790 align:middle line:84%
tend to be a lot faster
and more scalable

24
00:01:06.790 --> 00:01:08.650 align:middle line:84%
than the sequential
implementations,

25
00:01:08.650 --> 00:01:10.810 align:middle line:84%
either the ones that
use streams or loops.

26
00:01:10.810 --> 00:01:12.790 align:middle line:84%
And again, that's not
particularly surprising.

27
00:01:12.790 --> 00:01:15.550 align:middle line:84%
You'd expect that if
the framework itself

28
00:01:15.550 --> 00:01:20.280 align:middle line:84%
is done properly and maps well
onto the underlying cores.

29
00:01:20.280 --> 00:01:21.520 align:middle line:90%
Why does this happen?

30
00:01:21.520 --> 00:01:23.910 align:middle line:84%
Well, performance
speed up is largely

31
00:01:23.910 --> 00:01:28.770 align:middle line:84%
a function of the partitioning
strategy, how we break input up

32
00:01:28.770 --> 00:01:34.140 align:middle line:84%
into N chunks, the amount
of work performed per chunk,

33
00:01:34.140 --> 00:01:35.580 align:middle line:90%
and the number of cores.

34
00:01:35.580 --> 00:01:39.630 align:middle line:84%
And of course, that's our good
friend the N times Q model,

35
00:01:39.630 --> 00:01:42.930 align:middle line:84%
where N is the number of data
elements to process for thread,

36
00:01:42.930 --> 00:01:48.150 align:middle line:84%
and Q quantifies just how
CPU-intensive the processing

37
00:01:48.150 --> 00:01:49.020 align:middle line:90%
actually is.

38
00:01:49.020 --> 00:01:51.540 align:middle line:84%
So when N and Q queue are
large, we get better speed ups.

39
00:01:51.540 --> 00:01:53.687 align:middle line:84%
When N and Q are
smaller, uh, you

40
00:01:53.687 --> 00:01:55.770 align:middle line:84%
may be better off going
with a sequential solution

41
00:01:55.770 --> 00:01:58.120 align:middle line:90%
in some cases.

42
00:01:58.120 --> 00:02:00.790 align:middle line:84%
Another nice aspect
of parallel streams

43
00:02:00.790 --> 00:02:04.330 align:middle line:84%
is that application
developers often need

44
00:02:04.330 --> 00:02:06.190 align:middle line:84%
to know nothing at
all and don't need

45
00:02:06.190 --> 00:02:08.900 align:middle line:90%
to program threading directly.

46
00:02:08.900 --> 00:02:10.430 align:middle line:84%
You never have to
spawn a thread.

47
00:02:10.430 --> 00:02:12.530 align:middle line:84%
You never have to do any
management of threads.

48
00:02:12.530 --> 00:02:14.990 align:middle line:84%
And in many cases, you never
have to do any synchronization

49
00:02:14.990 --> 00:02:16.100 align:middle line:90%
either.

50
00:02:16.100 --> 00:02:19.520 align:middle line:84%
And removing synchronization
and threading

51
00:02:19.520 --> 00:02:22.100 align:middle line:84%
alleviates all kinds of
accidental and inherent

52
00:02:22.100 --> 00:02:25.580 align:middle line:84%
complexities of concurrent
and parallel programming.

53
00:02:25.580 --> 00:02:27.770 align:middle line:84%
Now, from time to
time, you might need

54
00:02:27.770 --> 00:02:29.090 align:middle line:90%
to use some synchronization.

55
00:02:29.090 --> 00:02:30.590 align:middle line:84%
But again, hopefully,
I've given you

56
00:02:30.590 --> 00:02:33.860 align:middle line:84%
a good set of tips
on how to apply

57
00:02:33.860 --> 00:02:36.860 align:middle line:84%
Java collections, especially
concurrent collections,

58
00:02:36.860 --> 00:02:39.440 align:middle line:84%
in order to simplify
access and optimize

59
00:02:39.440 --> 00:02:44.980 align:middle line:90%
access to shared mutable state.

60
00:02:44.980 --> 00:02:47.500 align:middle line:84%
The way to avoid the need
to use shared mutable state,

61
00:02:47.500 --> 00:02:50.290 align:middle line:84%
of course, is to
simply make sure

62
00:02:50.290 --> 00:02:52.870 align:middle line:84%
that all your behaviors
are stateless.

63
00:02:52.870 --> 00:02:55.540 align:middle line:84%
So we saw here the
use of pure functions,

64
00:02:55.540 --> 00:03:00.040 align:middle line:84%
like search for phrase, or
search results, is empty.

65
00:03:00.040 --> 00:03:02.630 align:middle line:84%
Those implementations
don't know,

66
00:03:02.630 --> 00:03:04.900 align:middle line:84%
don't care about
state management

67
00:03:04.900 --> 00:03:08.620 align:middle line:84%
because they're stateless, which
is a really good thing to have.

68
00:03:08.620 --> 00:03:10.960 align:middle line:84%
As I said before,
if you do absolutely

69
00:03:10.960 --> 00:03:14.890 align:middle line:84%
have to have state management,
then leverage the mechanisms

70
00:03:14.890 --> 00:03:17.470 align:middle line:84%
in the Java class
library, which will often

71
00:03:17.470 --> 00:03:25.720 align:middle line:84%
provide locks to guard access
to this shared mutable state.

72
00:03:25.720 --> 00:03:27.460 align:middle line:84%
Another nice benefit
of parallel streams

73
00:03:27.460 --> 00:03:32.578 align:middle line:84%
is just how easy it is to
do a simple transformation,

74
00:03:32.578 --> 00:03:34.870 align:middle line:84%
a straightforward transformation
of a sequential stream

75
00:03:34.870 --> 00:03:36.780 align:middle line:90%
to a parallel stream.

76
00:03:36.780 --> 00:03:38.880 align:middle line:84%
As we saw a number of
times, particularly when

77
00:03:38.880 --> 00:03:43.000 align:middle line:84%
we talked about the search
with parallel streams

78
00:03:43.000 --> 00:03:45.970 align:middle line:84%
implementation, the difference
between that and the search

79
00:03:45.970 --> 00:03:48.280 align:middle line:84%
with sequential
streams implementation

80
00:03:48.280 --> 00:03:51.950 align:middle line:84%
was just a matter of changing
stream to parallel stream.

81
00:03:51.950 --> 00:03:54.110 align:middle line:84%
That's not always the
easiest way to do things.

82
00:03:54.110 --> 00:03:57.660 align:middle line:84%
It's not always quite so easy,
but that's often the case.

83
00:03:57.660 --> 00:04:01.340 align:middle line:84%
We also saw, for
going from the search

84
00:04:01.340 --> 00:04:05.530 align:middle line:84%
with palace streams to search
with parallel spliterators,

85
00:04:05.530 --> 00:04:07.930 align:middle line:84%
we also had to make minor
changes in the code,

86
00:04:07.930 --> 00:04:10.180 align:middle line:84%
although of course, we did
have to spend all that time

87
00:04:10.180 --> 00:04:11.597 align:middle line:84%
writing the parallel
spliterators.

88
00:04:11.597 --> 00:04:13.690 align:middle line:84%
So that required some
minuscule changes

89
00:04:13.690 --> 00:04:17.320 align:middle line:84%
in some places and some not
so minuscule enhancements

90
00:04:17.320 --> 00:04:19.779 align:middle line:90%
in other places.

91
00:04:19.779 --> 00:04:22.250 align:middle line:84%
Hopefully you've also gotten
a sense to these examples,

92
00:04:22.250 --> 00:04:25.060 align:middle line:84%
particularly the one that dealt
with the image stream gang

93
00:04:25.060 --> 00:04:29.470 align:middle line:84%
example, of the synergies
between functional programming

94
00:04:29.470 --> 00:04:31.350 align:middle line:90%
and object-oriented programming.

95
00:04:31.350 --> 00:04:32.850 align:middle line:84%
And if you look at
this diagram, you

96
00:04:32.850 --> 00:04:36.340 align:middle line:84%
can kind of see modern
Java from Java 8

97
00:04:36.340 --> 00:04:39.100 align:middle line:84%
onwards really occurs
at the intersection

98
00:04:39.100 --> 00:04:41.830 align:middle line:84%
between the imperative
paradigm, which

99
00:04:41.830 --> 00:04:43.570 align:middle line:84%
is where object
oriented programming

100
00:04:43.570 --> 00:04:46.960 align:middle line:84%
lives, and the declarative
paradigm, which is really where

101
00:04:46.960 --> 00:04:48.600 align:middle line:90%
functional programming lives.

102
00:04:48.600 --> 00:04:51.185 align:middle line:84%
And Java 8 kind of combines
the best of both worlds.

103
00:04:51.185 --> 00:04:54.400 align:middle line:84%
So it's kind of like
a griffin or a sphinx,

104
00:04:54.400 --> 00:04:58.490 align:middle line:84%
which is part of one thing
and part of something else.

105
00:04:58.490 --> 00:05:01.040 align:middle line:84%
From my experience,
object-oriented design

106
00:05:01.040 --> 00:05:04.220 align:middle line:84%
and programming features,
things like classes,

107
00:05:04.220 --> 00:05:08.900 align:middle line:84%
abstraction, encapsulation,
inheritance, dynamic binding,

108
00:05:08.900 --> 00:05:12.290 align:middle line:84%
all those good things, are
very valuable to help simplify

109
00:05:12.290 --> 00:05:14.870 align:middle line:84%
the understandability,
reusability,

110
00:05:14.870 --> 00:05:17.052 align:middle line:90%
and extensability of the code.

111
00:05:17.052 --> 00:05:18.510 align:middle line:84%
So if you take a
look, for example,

112
00:05:18.510 --> 00:05:21.950 align:middle line:84%
at our search stream
gang or image stream gang

113
00:05:21.950 --> 00:05:26.270 align:middle line:84%
class hierarchies,
those hierarchies really

114
00:05:26.270 --> 00:05:28.880 align:middle line:84%
helped to make it clear
what the pieces are,

115
00:05:28.880 --> 00:05:31.950 align:middle line:84%
what things are reusable,
how to extend pieces,

116
00:05:31.950 --> 00:05:34.940 align:middle line:84%
and it basically helps
to emphasize and enhance

117
00:05:34.940 --> 00:05:38.040 align:middle line:90%
systematic reuse of structure.

118
00:05:38.040 --> 00:05:40.290 align:middle line:84%
So that's what we get from
object-oriented approaches.

119
00:05:40.290 --> 00:05:42.050 align:middle line:90%
We get reuse of structure.

120
00:05:42.050 --> 00:05:45.280 align:middle line:90%


121
00:05:45.280 --> 00:05:48.400 align:middle line:84%
Combining the object-oriented
approaches, in particular

122
00:05:48.400 --> 00:05:51.850 align:middle line:84%
the concept of methods,
with functional programming

123
00:05:51.850 --> 00:05:54.230 align:middle line:84%
features, like
Lambda expressions,

124
00:05:54.230 --> 00:05:56.710 align:middle line:84%
method references,
sequential streams,

125
00:05:56.710 --> 00:05:58.630 align:middle line:84%
parallel streams,
and so on, helped

126
00:05:58.630 --> 00:06:02.020 align:middle line:84%
to close that gap that otherwise
would exist between the domain

127
00:06:02.020 --> 00:06:05.290 align:middle line:84%
intent on one end, what
are you trying to do,

128
00:06:05.290 --> 00:06:08.500 align:middle line:84%
and the computations on
the other side, which

129
00:06:08.500 --> 00:06:10.210 align:middle line:90%
is what you're trying to write.

130
00:06:10.210 --> 00:06:12.760 align:middle line:84%
And so it turns out that,
as you can see here,

131
00:06:12.760 --> 00:06:14.230 align:middle line:84%
we have these hook
methods, which

132
00:06:14.230 --> 00:06:16.540 align:middle line:84%
are an object-oriented
concept, implemented

133
00:06:16.540 --> 00:06:21.760 align:middle line:84%
through virtual method calls
in our search stream framework.

134
00:06:21.760 --> 00:06:23.710 align:middle line:84%
And then we go ahead and
override those things

135
00:06:23.710 --> 00:06:26.140 align:middle line:84%
and fill in the blanks,
and the blanks we fill in

136
00:06:26.140 --> 00:06:28.780 align:middle line:84%
use the Java functional
programming features.

137
00:06:28.780 --> 00:06:30.820 align:middle line:84%
So we kind of get this
wonderful marriage

138
00:06:30.820 --> 00:06:33.660 align:middle line:90%
of the best of both worlds.