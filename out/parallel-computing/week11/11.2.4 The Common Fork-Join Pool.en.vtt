WEBVTT

1
00:00:00.000 --> 00:00:00.520 align:middle line:90%


2
00:00:00.520 --> 00:00:02.860 align:middle line:84%
So now that I've shown you
how to use the ManagedBlocker

3
00:00:02.860 --> 00:00:05.110 align:middle line:84%
interface directly,
let's go ahead

4
00:00:05.110 --> 00:00:08.050 align:middle line:84%
and talk about how to
encapsulate it inside

5
00:00:08.050 --> 00:00:12.070 align:middle line:84%
of a really convenient
wrapper class

6
00:00:12.070 --> 00:00:16.120 align:middle line:84%
in order to make it much easier
to use the ManagedBlocker

7
00:00:16.120 --> 00:00:19.450 align:middle line:84%
mechanism, which is otherwise a
little bit crufty to work with.

8
00:00:19.450 --> 00:00:21.792 align:middle line:90%
This is much more convenient.

9
00:00:21.792 --> 00:00:23.500 align:middle line:84%
So we're going to show
how to encapsulate

10
00:00:23.500 --> 00:00:30.050 align:middle line:84%
the use of ManagedBlocker within
so-called blocking task class.

11
00:00:30.050 --> 00:00:34.760 align:middle line:84%
The blocking task class
integrates blocking suppliers,

12
00:00:34.760 --> 00:00:38.290 align:middle line:84%
where supplier is a
functional interface defined

13
00:00:38.290 --> 00:00:41.070 align:middle line:90%
in Java from Java 8 onwards.

14
00:00:41.070 --> 00:00:43.333 align:middle line:84%
And it integrates it with
a common ForkJoinPool.

15
00:00:43.333 --> 00:00:45.000 align:middle line:84%
And here's basically
what it looks like.

16
00:00:45.000 --> 00:00:46.708 align:middle line:84%
You can see an example
of this, actually,

17
00:00:46.708 --> 00:00:48.520 align:middle line:90%
many places in my source code.

18
00:00:48.520 --> 00:00:53.930 align:middle line:84%
But EX 20 and the EX 20
folder in my GitHub repository

19
00:00:53.930 --> 00:00:58.320 align:middle line:84%
have a particularly clean
example of how to do this.

20
00:00:58.320 --> 00:01:04.110 align:middle line:84%
There's a static method
called call in ManagedBlocker.

21
00:01:04.110 --> 00:01:06.900 align:middle line:84%
And this call in
ManagedBlocker mechanism

22
00:01:06.900 --> 00:01:10.560 align:middle line:84%
will enable the use of
the blocking suppliers

23
00:01:10.560 --> 00:01:15.690 align:middle line:84%
in conjunction with the common
Java fork-join thread pool.

24
00:01:15.690 --> 00:01:17.280 align:middle line:84%
So when this method
gets called, it'll

25
00:01:17.280 --> 00:01:20.880 align:middle line:84%
do all the magic to
wrap things up and make

26
00:01:20.880 --> 00:01:22.920 align:middle line:90%
it much easier to program.

27
00:01:22.920 --> 00:01:24.660 align:middle line:84%
There's a nice Stack
Overflow article

28
00:01:24.660 --> 00:01:29.020 align:middle line:84%
that talks about the pros
and cons of this approach.

29
00:01:29.020 --> 00:01:30.760 align:middle line:84%
The call in
ManagedBlocker method

30
00:01:30.760 --> 00:01:34.060 align:middle line:84%
is past a supplier,
which, again,

31
00:01:34.060 --> 00:01:36.995 align:middle line:84%
is this functional interface
defined in Java 8 and beyond.

32
00:01:36.995 --> 00:01:38.620 align:middle line:84%
And we're going to
go ahead and wrap up

33
00:01:38.620 --> 00:01:42.250 align:middle line:84%
that supplier in a
little helper object

34
00:01:42.250 --> 00:01:45.267 align:middle line:84%
called ManagedBlocker of
type supplier ManagedBlocker.

35
00:01:45.267 --> 00:01:47.600 align:middle line:84%
And I'll show you what that
looks like in just a second.

36
00:01:47.600 --> 00:01:50.320 align:middle line:84%
So we make a new
supplier ManagedBlocker

37
00:01:50.320 --> 00:01:54.960 align:middle line:84%
object that essentially
encapsulates the supplier.

38
00:01:54.960 --> 00:01:59.520 align:middle line:84%
And then we go ahead and
call the ManagedBlock method

39
00:01:59.520 --> 00:02:04.180 align:middle line:84%
on the ForkJoinPool, passing
in the ManagedBlocker.

40
00:02:04.180 --> 00:02:07.210 align:middle line:84%
And the ManagedBlocker
here is that object

41
00:02:07.210 --> 00:02:09.900 align:middle line:84%
that's the supplier
ManagedBlocker instance.

42
00:02:09.900 --> 00:02:13.980 align:middle line:84%
And that will then turn around
and submit the ManagedBlocker

43
00:02:13.980 --> 00:02:17.430 align:middle line:84%
to the common
fork-join thread pool.

44
00:02:17.430 --> 00:02:19.300 align:middle line:84%
Now, at this point,
that could block.

45
00:02:19.300 --> 00:02:21.790 align:middle line:84%
We don't know what it will do
because we've got a supplier.

46
00:02:21.790 --> 00:02:23.415 align:middle line:84%
And that could do
whatever the supplier

47
00:02:23.415 --> 00:02:24.510 align:middle line:90%
has been programmed to do.

48
00:02:24.510 --> 00:02:26.010 align:middle line:84%
But we know that
when ManagedBlocker

49
00:02:26.010 --> 00:02:30.533 align:middle line:84%
returns, normally that it's
finished its operation.

50
00:02:30.533 --> 00:02:31.950 align:middle line:84%
And what we do
then is we go ahead

51
00:02:31.950 --> 00:02:35.550 align:middle line:84%
and we say, hey, ManagedBlocker,
please give me your result.

52
00:02:35.550 --> 00:02:38.560 align:middle line:84%
And that result will then be
passed back to the caller.

53
00:02:38.560 --> 00:02:42.240 align:middle line:84%
So that returns the result
of the blocking call

54
00:02:42.240 --> 00:02:43.005 align:middle line:90%
after it finishes.

55
00:02:43.005 --> 00:02:45.510 align:middle line:90%


56
00:02:45.510 --> 00:02:48.030 align:middle line:84%
So here's what the
supplier ManagedBlocker

57
00:02:48.030 --> 00:02:50.110 align:middle line:90%
class looks like.

58
00:02:50.110 --> 00:02:53.100 align:middle line:84%
As you can see, it
implements the ForkJoinPool's

59
00:02:53.100 --> 00:02:54.370 align:middle line:90%
ManagedBlocker interface.

60
00:02:54.370 --> 00:02:55.870 align:middle line:84%
And that's why we
needed this class.

61
00:02:55.870 --> 00:02:59.010 align:middle line:84%
It's a private,
static, nested class.

62
00:02:59.010 --> 00:03:02.310 align:middle line:84%
And it basically allows
the blocking supplier

63
00:03:02.310 --> 00:03:06.710 align:middle line:84%
to work with the
common ForkJoinPool.

64
00:03:06.710 --> 00:03:08.540 align:middle line:84%
It has a field
called m supplier,

65
00:03:08.540 --> 00:03:12.110 align:middle line:84%
which is just used to stash away
the supplier that it's passed.

66
00:03:12.110 --> 00:03:15.400 align:middle line:84%
It's got a flag that keeps
track of whether we're done.

67
00:03:15.400 --> 00:03:17.030 align:middle line:84%
And it also has a
field that keeps

68
00:03:17.030 --> 00:03:20.450 align:middle line:84%
track of the result, which can
be obtained later after we're

69
00:03:20.450 --> 00:03:23.490 align:middle line:90%
done potentially blocking.

70
00:03:23.490 --> 00:03:24.902 align:middle line:90%
Here's the block method.

71
00:03:24.902 --> 00:03:26.610 align:middle line:84%
So you can see what
the block method does

72
00:03:26.610 --> 00:03:29.571 align:middle line:90%
is it says m supplier dot get.

73
00:03:29.571 --> 00:03:32.730 align:middle line:84%
Remember, a supplier
has a get method.

74
00:03:32.730 --> 00:03:35.220 align:middle line:84%
It's a functional interface
that only has one method.

75
00:03:35.220 --> 00:03:36.900 align:middle line:90%
And that method is called get.

76
00:03:36.900 --> 00:03:38.760 align:middle line:84%
And that method is
whatever you passed

77
00:03:38.760 --> 00:03:43.860 align:middle line:84%
it to be when you called the
method on the blocking task.

78
00:03:43.860 --> 00:03:46.158 align:middle line:84%
And that will then go ahead
and do what it needs to do.

79
00:03:46.158 --> 00:03:47.700 align:middle line:84%
And let's assume
for sake of argument

80
00:03:47.700 --> 00:03:49.408 align:middle line:84%
it's going to block
because otherwise you

81
00:03:49.408 --> 00:03:53.160 align:middle line:84%
wouldn't be calling it in the
context of the ManagedBlocker

82
00:03:53.160 --> 00:03:54.240 align:middle line:90%
mechanism.

83
00:03:54.240 --> 00:03:58.050 align:middle line:84%
And when it's done, it returns
a result, sets the flag to true,

84
00:03:58.050 --> 00:04:01.330 align:middle line:90%
and goes ahead and returns true.

85
00:04:01.330 --> 00:04:04.470 align:middle line:84%
So this basically
indicates that we're done.

86
00:04:04.470 --> 00:04:07.170 align:middle line:84%
Is Releasable will
return whether or not

87
00:04:07.170 --> 00:04:08.700 align:middle line:90%
we've already finished.

88
00:04:08.700 --> 00:04:11.880 align:middle line:84%
Note that there is no
non-blocking behavior

89
00:04:11.880 --> 00:04:13.050 align:middle line:90%
for a blocking task.

90
00:04:13.050 --> 00:04:15.780 align:middle line:84%
We don't have a way of doing
non-blocking this here.

91
00:04:15.780 --> 00:04:19.350 align:middle line:84%
So really, the main method that
matters is the block method.

92
00:04:19.350 --> 00:04:21.140 align:middle line:84%
And then once everything
is done and we've

93
00:04:21.140 --> 00:04:23.990 align:middle line:84%
returned from the
ManagedBlock call,

94
00:04:23.990 --> 00:04:26.360 align:middle line:84%
then the get Result
method can be

95
00:04:26.360 --> 00:04:30.910 align:middle line:90%
invoked to obtain the result.

96
00:04:30.910 --> 00:04:32.730 align:middle line:84%
So just to show you
how we can use this,

97
00:04:32.730 --> 00:04:36.870 align:middle line:84%
let's take a look at a snippet
of code from the EX 20 example.

98
00:04:36.870 --> 00:04:39.830 align:middle line:84%
And this example uses
the blocking task

99
00:04:39.830 --> 00:04:42.330 align:middle line:84%
to ensure that there are enough
threads in the common thread

100
00:04:42.330 --> 00:04:44.550 align:middle line:90%
pool to download images.

101
00:04:44.550 --> 00:04:46.290 align:middle line:84%
So here's the
method that's going

102
00:04:46.290 --> 00:04:50.010 align:middle line:84%
to basically take a URL to
an image on a remote server

103
00:04:50.010 --> 00:04:53.100 align:middle line:84%
and then download it and
turn it into an image object.

104
00:04:53.100 --> 00:04:54.180 align:middle line:90%
That's its goal.

105
00:04:54.180 --> 00:04:55.650 align:middle line:84%
Not surprisingly,
that could block

106
00:04:55.650 --> 00:04:58.348 align:middle line:84%
because it's going to be
going across the network.

107
00:04:58.348 --> 00:04:59.640 align:middle line:90%
And you can see how this works.

108
00:04:59.640 --> 00:05:03.510 align:middle line:84%
We call BlockingTask dot
call in ManagedBlocker.

109
00:05:03.510 --> 00:05:09.390 align:middle line:84%
And we pass in a lambda
supplier, or supplier lambda.

110
00:05:09.390 --> 00:05:12.330 align:middle line:84%
And in this particular
case, that's going to say,

111
00:05:12.330 --> 00:05:15.030 align:middle line:84%
basically, download
the image at the URL.

112
00:05:15.030 --> 00:05:19.410 align:middle line:84%
And that is the supplier that
gets called or actually gets

113
00:05:19.410 --> 00:05:22.480 align:middle line:84%
passed to the call in
ManagedBlocker method,

114
00:05:22.480 --> 00:05:27.660 align:middle line:84%
which is then going to be used
to initiate that supplier get

115
00:05:27.660 --> 00:05:30.840 align:middle line:84%
method in the context
of the ManagedBlocker

116
00:05:30.840 --> 00:05:33.175 align:middle line:90%
mechanism of the ForkJoinPool.

117
00:05:33.175 --> 00:05:34.800 align:middle line:84%
So this is just the
nice little wrapper

118
00:05:34.800 --> 00:05:37.230 align:middle line:84%
that makes everything
so much easier to use.

119
00:05:37.230 --> 00:05:40.230 align:middle line:84%
And it allows us to use
convenient lambda expressions

120
00:05:40.230 --> 00:05:43.590 align:middle line:84%
or method references
to get the job done.

121
00:05:43.590 --> 00:05:45.470 align:middle line:84%
As I mentioned before,
any extra threads

122
00:05:45.470 --> 00:05:48.200 align:middle line:84%
in the common ForkJoinPool
will be terminated later

123
00:05:48.200 --> 00:05:53.340 align:middle line:84%
if they're not used after
some period of inactivity.

124
00:05:53.340 --> 00:05:57.270 align:middle line:84%
One of the potential risks
with this kind of an approach

125
00:05:57.270 --> 00:06:00.510 align:middle line:84%
is it's possible
to saturate the CPU

126
00:06:00.510 --> 00:06:03.790 align:middle line:90%
cores during bursty workloads.

127
00:06:03.790 --> 00:06:06.150 align:middle line:84%
So if you end up having
lots and lots of requests

128
00:06:06.150 --> 00:06:09.870 align:middle line:84%
come in for downloading
images for example,

129
00:06:09.870 --> 00:06:13.050 align:middle line:84%
then you could end
up basically spawning

130
00:06:13.050 --> 00:06:15.540 align:middle line:90%
an unbounded number of threads.

131
00:06:15.540 --> 00:06:18.430 align:middle line:84%
And that itself might
become problematic.

132
00:06:18.430 --> 00:06:20.580 align:middle line:84%
So in practice, you
might want to have

133
00:06:20.580 --> 00:06:23.040 align:middle line:84%
some kind of flow control
mechanism built in,

134
00:06:23.040 --> 00:06:26.040 align:middle line:84%
where you would stop
doing these ManagedBlocker

135
00:06:26.040 --> 00:06:28.110 align:middle line:84%
calls at a certain
point and just queue up

136
00:06:28.110 --> 00:06:32.550 align:middle line:84%
the results in some other means,
and then run them later when

137
00:06:32.550 --> 00:06:37.060 align:middle line:90%
the CPU utilization will abate.